
FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .init         0000000c  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000038c2  00008010  00008010  00008010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fini         0000000c  0000b8d4  0000b8d4  0000b8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000208  0000b8e0  0000b8e0  0000b8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  0000bae8  0000bae8  0000bae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .eh_frame     00000004  0000baf0  0000baf0  0000baf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0001baf4  0001baf4  0000baf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0001baf8  0001baf8  0000baf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  0001bafc  0001bafc  0000bafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  0001bb68  0001bb68  0000bb68  2**2
                  ALLOC
 10 .comment      0000007b  00000000  00000000  0000bb68  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000548  00000000  00000000  0000bbe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000092d5  00000000  00000000  0000c12b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001646  00000000  00000000  00015400  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000056f4  00000000  00000000  00016a46  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000019f8  00000000  00000000  0001c13c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0006b6b8  00000000  00000000  0001db34  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000004b8  00000000  00000000  000891ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0001474e  00000000  00000000  000896a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .ARM.attributes 00000029  00000000  00000000  0009ddf2  2**0
                  CONTENTS, READONLY

Disassembly of section .init:

00008000 <_init>:
    8000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8002:	bf00      	nop
    8004:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8006:	bc08      	pop	{r3}
    8008:	469e      	mov	lr, r3
    800a:	4770      	bx	lr

Disassembly of section .text:

00008010 <exit>:
    8010:	b508      	push	{r3, lr}
    8012:	4b07      	ldr	r3, [pc, #28]	; (8030 <exit+0x20>)
    8014:	4604      	mov	r4, r0
    8016:	b113      	cbz	r3, 801e <exit+0xe>
    8018:	2100      	movs	r1, #0
    801a:	f3af 8000 	nop.w
    801e:	4b05      	ldr	r3, [pc, #20]	; (8034 <exit+0x24>)
    8020:	6818      	ldr	r0, [r3, #0]
    8022:	6a83      	ldr	r3, [r0, #40]	; 0x28
    8024:	b103      	cbz	r3, 8028 <exit+0x18>
    8026:	4798      	blx	r3
    8028:	4620      	mov	r0, r4
    802a:	f003 fc51 	bl	b8d0 <_exit>
    802e:	bf00      	nop
    8030:	00000000 	.word	0x00000000
    8034:	0000b90c 	.word	0x0000b90c

00008038 <__do_global_dtors_aux>:
    8038:	b510      	push	{r4, lr}
    803a:	4c05      	ldr	r4, [pc, #20]	; (8050 <__do_global_dtors_aux+0x18>)
    803c:	7823      	ldrb	r3, [r4, #0]
    803e:	b933      	cbnz	r3, 804e <__do_global_dtors_aux+0x16>
    8040:	4b04      	ldr	r3, [pc, #16]	; (8054 <__do_global_dtors_aux+0x1c>)
    8042:	b113      	cbz	r3, 804a <__do_global_dtors_aux+0x12>
    8044:	4804      	ldr	r0, [pc, #16]	; (8058 <__do_global_dtors_aux+0x20>)
    8046:	f3af 8000 	nop.w
    804a:	2301      	movs	r3, #1
    804c:	7023      	strb	r3, [r4, #0]
    804e:	bd10      	pop	{r4, pc}
    8050:	0001bb68 	.word	0x0001bb68
    8054:	00000000 	.word	0x00000000
    8058:	0000baf0 	.word	0x0000baf0

0000805c <frame_dummy>:
    805c:	b508      	push	{r3, lr}
    805e:	4b03      	ldr	r3, [pc, #12]	; (806c <frame_dummy+0x10>)
    8060:	b11b      	cbz	r3, 806a <frame_dummy+0xe>
    8062:	4903      	ldr	r1, [pc, #12]	; (8070 <frame_dummy+0x14>)
    8064:	4803      	ldr	r0, [pc, #12]	; (8074 <frame_dummy+0x18>)
    8066:	f3af 8000 	nop.w
    806a:	bd08      	pop	{r3, pc}
    806c:	00000000 	.word	0x00000000
    8070:	0001bb6c 	.word	0x0001bb6c
    8074:	0000baf0 	.word	0x0000baf0

00008078 <_mainCRTStartup>:
    8078:	4b15      	ldr	r3, [pc, #84]	; (80d0 <_mainCRTStartup+0x58>)
    807a:	2b00      	cmp	r3, #0
    807c:	bf08      	it	eq
    807e:	4b13      	ldreq	r3, [pc, #76]	; (80cc <_mainCRTStartup+0x54>)
    8080:	469d      	mov	sp, r3
    8082:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
    8086:	2100      	movs	r1, #0
    8088:	468b      	mov	fp, r1
    808a:	460f      	mov	r7, r1
    808c:	4813      	ldr	r0, [pc, #76]	; (80dc <_mainCRTStartup+0x64>)
    808e:	4a14      	ldr	r2, [pc, #80]	; (80e0 <_mainCRTStartup+0x68>)
    8090:	1a12      	subs	r2, r2, r0
    8092:	f001 fcc9 	bl	9a28 <memset>
    8096:	4b0f      	ldr	r3, [pc, #60]	; (80d4 <_mainCRTStartup+0x5c>)
    8098:	2b00      	cmp	r3, #0
    809a:	d000      	beq.n	809e <_mainCRTStartup+0x26>
    809c:	4798      	blx	r3
    809e:	4b0e      	ldr	r3, [pc, #56]	; (80d8 <_mainCRTStartup+0x60>)
    80a0:	2b00      	cmp	r3, #0
    80a2:	d000      	beq.n	80a6 <_mainCRTStartup+0x2e>
    80a4:	4798      	blx	r3
    80a6:	2000      	movs	r0, #0
    80a8:	2100      	movs	r1, #0
    80aa:	0004      	movs	r4, r0
    80ac:	000d      	movs	r5, r1
    80ae:	480d      	ldr	r0, [pc, #52]	; (80e4 <_mainCRTStartup+0x6c>)
    80b0:	2800      	cmp	r0, #0
    80b2:	d002      	beq.n	80ba <_mainCRTStartup+0x42>
    80b4:	480c      	ldr	r0, [pc, #48]	; (80e8 <_mainCRTStartup+0x70>)
    80b6:	f3af 8000 	nop.w
    80ba:	f001 fc91 	bl	99e0 <__libc_init_array>
    80be:	0020      	movs	r0, r4
    80c0:	0029      	movs	r1, r5
    80c2:	f001 fa81 	bl	95c8 <main>
    80c6:	f7ff ffa3 	bl	8010 <exit>
    80ca:	bf00      	nop
    80cc:	00080000 	.word	0x00080000
	...
    80dc:	0001bb68 	.word	0x0001bb68
    80e0:	0001bbc8 	.word	0x0001bbc8
	...

000080ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
    80ec:	b580      	push	{r7, lr}
    80ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
    80f0:	4b08      	ldr	r3, [pc, #32]	; (8114 <HAL_Init+0x28>)
    80f2:	681b      	ldr	r3, [r3, #0]
    80f4:	4a07      	ldr	r2, [pc, #28]	; (8114 <HAL_Init+0x28>)
    80f6:	f043 0310 	orr.w	r3, r3, #16
    80fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
    80fc:	2003      	movs	r0, #3
    80fe:	f000 f8f5 	bl	82ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
    8102:	2000      	movs	r0, #0
    8104:	f000 f808 	bl	8118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
    8108:	f001 fbec 	bl	98e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
    810c:	2300      	movs	r3, #0
}
    810e:	4618      	mov	r0, r3
    8110:	bd80      	pop	{r7, pc}
    8112:	bf00      	nop
    8114:	40022000 	.word	0x40022000

00008118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
    8118:	b580      	push	{r7, lr}
    811a:	b082      	sub	sp, #8
    811c:	af00      	add	r7, sp, #0
    811e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
    8120:	4b12      	ldr	r3, [pc, #72]	; (816c <HAL_InitTick+0x54>)
    8122:	681a      	ldr	r2, [r3, #0]
    8124:	4b12      	ldr	r3, [pc, #72]	; (8170 <HAL_InitTick+0x58>)
    8126:	781b      	ldrb	r3, [r3, #0]
    8128:	4619      	mov	r1, r3
    812a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    812e:	fbb3 f3f1 	udiv	r3, r3, r1
    8132:	fbb2 f3f3 	udiv	r3, r2, r3
    8136:	4618      	mov	r0, r3
    8138:	f000 f8ff 	bl	833a <HAL_SYSTICK_Config>
    813c:	4603      	mov	r3, r0
    813e:	2b00      	cmp	r3, #0
    8140:	d001      	beq.n	8146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
    8142:	2301      	movs	r3, #1
    8144:	e00e      	b.n	8164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
    8146:	687b      	ldr	r3, [r7, #4]
    8148:	2b0f      	cmp	r3, #15
    814a:	d80a      	bhi.n	8162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    814c:	2200      	movs	r2, #0
    814e:	6879      	ldr	r1, [r7, #4]
    8150:	f04f 30ff 	mov.w	r0, #4294967295
    8154:	f000 f8d5 	bl	8302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
    8158:	4a06      	ldr	r2, [pc, #24]	; (8174 <HAL_InitTick+0x5c>)
    815a:	687b      	ldr	r3, [r7, #4]
    815c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
    815e:	2300      	movs	r3, #0
    8160:	e000      	b.n	8164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
    8162:	2301      	movs	r3, #1
}
    8164:	4618      	mov	r0, r3
    8166:	3708      	adds	r7, #8
    8168:	46bd      	mov	sp, r7
    816a:	bd80      	pop	{r7, pc}
    816c:	0001bb04 	.word	0x0001bb04
    8170:	0001bb00 	.word	0x0001bb00
    8174:	0001bafc 	.word	0x0001bafc

00008178 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
    8178:	b480      	push	{r7}
    817a:	af00      	add	r7, sp, #0
  return uwTick;
    817c:	4b02      	ldr	r3, [pc, #8]	; (8188 <HAL_GetTick+0x10>)
    817e:	681b      	ldr	r3, [r3, #0]
}
    8180:	4618      	mov	r0, r3
    8182:	46bd      	mov	sp, r7
    8184:	bc80      	pop	{r7}
    8186:	4770      	bx	lr
    8188:	0001bb84 	.word	0x0001bb84

0000818c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
    818c:	b480      	push	{r7}
    818e:	b085      	sub	sp, #20
    8190:	af00      	add	r7, sp, #0
    8192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
    8194:	687b      	ldr	r3, [r7, #4]
    8196:	f003 0307 	and.w	r3, r3, #7
    819a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
    819c:	4b0c      	ldr	r3, [pc, #48]	; (81d0 <NVIC_SetPriorityGrouping+0x44>)
    819e:	68db      	ldr	r3, [r3, #12]
    81a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
    81a2:	68ba      	ldr	r2, [r7, #8]
    81a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
    81a8:	4013      	ands	r3, r2
    81aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
    81ac:	68fb      	ldr	r3, [r7, #12]
    81ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    81b0:	68bb      	ldr	r3, [r7, #8]
    81b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
    81b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    81b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    81bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
    81be:	4a04      	ldr	r2, [pc, #16]	; (81d0 <NVIC_SetPriorityGrouping+0x44>)
    81c0:	68bb      	ldr	r3, [r7, #8]
    81c2:	60d3      	str	r3, [r2, #12]
}
    81c4:	bf00      	nop
    81c6:	3714      	adds	r7, #20
    81c8:	46bd      	mov	sp, r7
    81ca:	bc80      	pop	{r7}
    81cc:	4770      	bx	lr
    81ce:	bf00      	nop
    81d0:	e000ed00 	.word	0xe000ed00

000081d4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
    81d4:	b480      	push	{r7}
    81d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
    81d8:	4b04      	ldr	r3, [pc, #16]	; (81ec <NVIC_GetPriorityGrouping+0x18>)
    81da:	68db      	ldr	r3, [r3, #12]
    81dc:	0a1b      	lsrs	r3, r3, #8
    81de:	f003 0307 	and.w	r3, r3, #7
}
    81e2:	4618      	mov	r0, r3
    81e4:	46bd      	mov	sp, r7
    81e6:	bc80      	pop	{r7}
    81e8:	4770      	bx	lr
    81ea:	bf00      	nop
    81ec:	e000ed00 	.word	0xe000ed00

000081f0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    81f0:	b480      	push	{r7}
    81f2:	b083      	sub	sp, #12
    81f4:	af00      	add	r7, sp, #0
    81f6:	4603      	mov	r3, r0
    81f8:	6039      	str	r1, [r7, #0]
    81fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
    81fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
    8200:	2b00      	cmp	r3, #0
    8202:	da0b      	bge.n	821c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8204:	683b      	ldr	r3, [r7, #0]
    8206:	b2da      	uxtb	r2, r3
    8208:	490c      	ldr	r1, [pc, #48]	; (823c <NVIC_SetPriority+0x4c>)
    820a:	79fb      	ldrb	r3, [r7, #7]
    820c:	f003 030f 	and.w	r3, r3, #15
    8210:	3b04      	subs	r3, #4
    8212:	0112      	lsls	r2, r2, #4
    8214:	b2d2      	uxtb	r2, r2
    8216:	440b      	add	r3, r1
    8218:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    821a:	e009      	b.n	8230 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    821c:	683b      	ldr	r3, [r7, #0]
    821e:	b2da      	uxtb	r2, r3
    8220:	4907      	ldr	r1, [pc, #28]	; (8240 <NVIC_SetPriority+0x50>)
    8222:	f997 3007 	ldrsb.w	r3, [r7, #7]
    8226:	0112      	lsls	r2, r2, #4
    8228:	b2d2      	uxtb	r2, r2
    822a:	440b      	add	r3, r1
    822c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    8230:	bf00      	nop
    8232:	370c      	adds	r7, #12
    8234:	46bd      	mov	sp, r7
    8236:	bc80      	pop	{r7}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	e000ed00 	.word	0xe000ed00
    8240:	e000e100 	.word	0xe000e100

00008244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
    8244:	b480      	push	{r7}
    8246:	b089      	sub	sp, #36	; 0x24
    8248:	af00      	add	r7, sp, #0
    824a:	60f8      	str	r0, [r7, #12]
    824c:	60b9      	str	r1, [r7, #8]
    824e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
    8250:	68fb      	ldr	r3, [r7, #12]
    8252:	f003 0307 	and.w	r3, r3, #7
    8256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
    8258:	69fb      	ldr	r3, [r7, #28]
    825a:	f1c3 0307 	rsb	r3, r3, #7
    825e:	2b04      	cmp	r3, #4
    8260:	bf28      	it	cs
    8262:	2304      	movcs	r3, #4
    8264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
    8266:	69fb      	ldr	r3, [r7, #28]
    8268:	3304      	adds	r3, #4
    826a:	2b06      	cmp	r3, #6
    826c:	d902      	bls.n	8274 <NVIC_EncodePriority+0x30>
    826e:	69fb      	ldr	r3, [r7, #28]
    8270:	3b03      	subs	r3, #3
    8272:	e000      	b.n	8276 <NVIC_EncodePriority+0x32>
    8274:	2300      	movs	r3, #0
    8276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
    8278:	f04f 32ff 	mov.w	r2, #4294967295
    827c:	69bb      	ldr	r3, [r7, #24]
    827e:	fa02 f303 	lsl.w	r3, r2, r3
    8282:	43da      	mvns	r2, r3
    8284:	68bb      	ldr	r3, [r7, #8]
    8286:	401a      	ands	r2, r3
    8288:	697b      	ldr	r3, [r7, #20]
    828a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
    828c:	f04f 31ff 	mov.w	r1, #4294967295
    8290:	697b      	ldr	r3, [r7, #20]
    8292:	fa01 f303 	lsl.w	r3, r1, r3
    8296:	43d9      	mvns	r1, r3
    8298:	687b      	ldr	r3, [r7, #4]
    829a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
    829c:	4313      	orrs	r3, r2
         );
}
    829e:	4618      	mov	r0, r3
    82a0:	3724      	adds	r7, #36	; 0x24
    82a2:	46bd      	mov	sp, r7
    82a4:	bc80      	pop	{r7}
    82a6:	4770      	bx	lr

000082a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
    82a8:	b580      	push	{r7, lr}
    82aa:	b082      	sub	sp, #8
    82ac:	af00      	add	r7, sp, #0
    82ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    82b0:	687b      	ldr	r3, [r7, #4]
    82b2:	3b01      	subs	r3, #1
    82b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    82b8:	d301      	bcc.n	82be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
    82ba:	2301      	movs	r3, #1
    82bc:	e00f      	b.n	82de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    82be:	4a0a      	ldr	r2, [pc, #40]	; (82e8 <SysTick_Config+0x40>)
    82c0:	687b      	ldr	r3, [r7, #4]
    82c2:	3b01      	subs	r3, #1
    82c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
    82c6:	210f      	movs	r1, #15
    82c8:	f04f 30ff 	mov.w	r0, #4294967295
    82cc:	f7ff ff90 	bl	81f0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    82d0:	4b05      	ldr	r3, [pc, #20]	; (82e8 <SysTick_Config+0x40>)
    82d2:	2200      	movs	r2, #0
    82d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    82d6:	4b04      	ldr	r3, [pc, #16]	; (82e8 <SysTick_Config+0x40>)
    82d8:	2207      	movs	r2, #7
    82da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
    82dc:	2300      	movs	r3, #0
}
    82de:	4618      	mov	r0, r3
    82e0:	3708      	adds	r7, #8
    82e2:	46bd      	mov	sp, r7
    82e4:	bd80      	pop	{r7, pc}
    82e6:	bf00      	nop
    82e8:	e000e010 	.word	0xe000e010

000082ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
    82ec:	b580      	push	{r7, lr}
    82ee:	b082      	sub	sp, #8
    82f0:	af00      	add	r7, sp, #0
    82f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
    82f4:	6878      	ldr	r0, [r7, #4]
    82f6:	f7ff ff49 	bl	818c <NVIC_SetPriorityGrouping>
}
    82fa:	bf00      	nop
    82fc:	3708      	adds	r7, #8
    82fe:	46bd      	mov	sp, r7
    8300:	bd80      	pop	{r7, pc}

00008302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
    8302:	b580      	push	{r7, lr}
    8304:	b086      	sub	sp, #24
    8306:	af00      	add	r7, sp, #0
    8308:	4603      	mov	r3, r0
    830a:	60b9      	str	r1, [r7, #8]
    830c:	607a      	str	r2, [r7, #4]
    830e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
    8310:	2300      	movs	r3, #0
    8312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
    8314:	f7ff ff5e 	bl	81d4 <NVIC_GetPriorityGrouping>
    8318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
    831a:	687a      	ldr	r2, [r7, #4]
    831c:	68b9      	ldr	r1, [r7, #8]
    831e:	6978      	ldr	r0, [r7, #20]
    8320:	f7ff ff90 	bl	8244 <NVIC_EncodePriority>
    8324:	4602      	mov	r2, r0
    8326:	f997 300f 	ldrsb.w	r3, [r7, #15]
    832a:	4611      	mov	r1, r2
    832c:	4618      	mov	r0, r3
    832e:	f7ff ff5f 	bl	81f0 <NVIC_SetPriority>
}
    8332:	bf00      	nop
    8334:	3718      	adds	r7, #24
    8336:	46bd      	mov	sp, r7
    8338:	bd80      	pop	{r7, pc}

0000833a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
    833a:	b580      	push	{r7, lr}
    833c:	b082      	sub	sp, #8
    833e:	af00      	add	r7, sp, #0
    8340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
    8342:	6878      	ldr	r0, [r7, #4]
    8344:	f7ff ffb0 	bl	82a8 <SysTick_Config>
    8348:	4603      	mov	r3, r0
}
    834a:	4618      	mov	r0, r3
    834c:	3708      	adds	r7, #8
    834e:	46bd      	mov	sp, r7
    8350:	bd80      	pop	{r7, pc}
	...

00008354 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
    8354:	b480      	push	{r7}
    8356:	b08b      	sub	sp, #44	; 0x2c
    8358:	af00      	add	r7, sp, #0
    835a:	6078      	str	r0, [r7, #4]
    835c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
    835e:	2300      	movs	r3, #0
    8360:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
    8362:	2300      	movs	r3, #0
    8364:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
    8366:	2300      	movs	r3, #0
    8368:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
    836a:	2300      	movs	r3, #0
    836c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
    836e:	2300      	movs	r3, #0
    8370:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
    8372:	2300      	movs	r3, #0
    8374:	627b      	str	r3, [r7, #36]	; 0x24
    8376:	e127      	b.n	85c8 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
    8378:	2201      	movs	r2, #1
    837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    837c:	fa02 f303 	lsl.w	r3, r2, r3
    8380:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
    8382:	683b      	ldr	r3, [r7, #0]
    8384:	681b      	ldr	r3, [r3, #0]
    8386:	69fa      	ldr	r2, [r7, #28]
    8388:	4013      	ands	r3, r2
    838a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
    838c:	69ba      	ldr	r2, [r7, #24]
    838e:	69fb      	ldr	r3, [r7, #28]
    8390:	429a      	cmp	r2, r3
    8392:	f040 8116 	bne.w	85c2 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
    8396:	683b      	ldr	r3, [r7, #0]
    8398:	685b      	ldr	r3, [r3, #4]
    839a:	2b12      	cmp	r3, #18
    839c:	d034      	beq.n	8408 <HAL_GPIO_Init+0xb4>
    839e:	2b12      	cmp	r3, #18
    83a0:	d80d      	bhi.n	83be <HAL_GPIO_Init+0x6a>
    83a2:	2b02      	cmp	r3, #2
    83a4:	d02b      	beq.n	83fe <HAL_GPIO_Init+0xaa>
    83a6:	2b02      	cmp	r3, #2
    83a8:	d804      	bhi.n	83b4 <HAL_GPIO_Init+0x60>
    83aa:	2b00      	cmp	r3, #0
    83ac:	d031      	beq.n	8412 <HAL_GPIO_Init+0xbe>
    83ae:	2b01      	cmp	r3, #1
    83b0:	d01c      	beq.n	83ec <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
    83b2:	e048      	b.n	8446 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
    83b4:	2b03      	cmp	r3, #3
    83b6:	d043      	beq.n	8440 <HAL_GPIO_Init+0xec>
    83b8:	2b11      	cmp	r3, #17
    83ba:	d01b      	beq.n	83f4 <HAL_GPIO_Init+0xa0>
          break;
    83bc:	e043      	b.n	8446 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
    83be:	4a87      	ldr	r2, [pc, #540]	; (85dc <HAL_GPIO_Init+0x288>)
    83c0:	4293      	cmp	r3, r2
    83c2:	d026      	beq.n	8412 <HAL_GPIO_Init+0xbe>
    83c4:	4a85      	ldr	r2, [pc, #532]	; (85dc <HAL_GPIO_Init+0x288>)
    83c6:	4293      	cmp	r3, r2
    83c8:	d806      	bhi.n	83d8 <HAL_GPIO_Init+0x84>
    83ca:	4a85      	ldr	r2, [pc, #532]	; (85e0 <HAL_GPIO_Init+0x28c>)
    83cc:	4293      	cmp	r3, r2
    83ce:	d020      	beq.n	8412 <HAL_GPIO_Init+0xbe>
    83d0:	4a84      	ldr	r2, [pc, #528]	; (85e4 <HAL_GPIO_Init+0x290>)
    83d2:	4293      	cmp	r3, r2
    83d4:	d01d      	beq.n	8412 <HAL_GPIO_Init+0xbe>
          break;
    83d6:	e036      	b.n	8446 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
    83d8:	4a83      	ldr	r2, [pc, #524]	; (85e8 <HAL_GPIO_Init+0x294>)
    83da:	4293      	cmp	r3, r2
    83dc:	d019      	beq.n	8412 <HAL_GPIO_Init+0xbe>
    83de:	4a83      	ldr	r2, [pc, #524]	; (85ec <HAL_GPIO_Init+0x298>)
    83e0:	4293      	cmp	r3, r2
    83e2:	d016      	beq.n	8412 <HAL_GPIO_Init+0xbe>
    83e4:	4a82      	ldr	r2, [pc, #520]	; (85f0 <HAL_GPIO_Init+0x29c>)
    83e6:	4293      	cmp	r3, r2
    83e8:	d013      	beq.n	8412 <HAL_GPIO_Init+0xbe>
          break;
    83ea:	e02c      	b.n	8446 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
    83ec:	683b      	ldr	r3, [r7, #0]
    83ee:	68db      	ldr	r3, [r3, #12]
    83f0:	623b      	str	r3, [r7, #32]
          break;
    83f2:	e028      	b.n	8446 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
    83f4:	683b      	ldr	r3, [r7, #0]
    83f6:	68db      	ldr	r3, [r3, #12]
    83f8:	3304      	adds	r3, #4
    83fa:	623b      	str	r3, [r7, #32]
          break;
    83fc:	e023      	b.n	8446 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
    83fe:	683b      	ldr	r3, [r7, #0]
    8400:	68db      	ldr	r3, [r3, #12]
    8402:	3308      	adds	r3, #8
    8404:	623b      	str	r3, [r7, #32]
          break;
    8406:	e01e      	b.n	8446 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
    8408:	683b      	ldr	r3, [r7, #0]
    840a:	68db      	ldr	r3, [r3, #12]
    840c:	330c      	adds	r3, #12
    840e:	623b      	str	r3, [r7, #32]
          break;
    8410:	e019      	b.n	8446 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
    8412:	683b      	ldr	r3, [r7, #0]
    8414:	689b      	ldr	r3, [r3, #8]
    8416:	2b00      	cmp	r3, #0
    8418:	d102      	bne.n	8420 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
    841a:	2304      	movs	r3, #4
    841c:	623b      	str	r3, [r7, #32]
          break;
    841e:	e012      	b.n	8446 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
    8420:	683b      	ldr	r3, [r7, #0]
    8422:	689b      	ldr	r3, [r3, #8]
    8424:	2b01      	cmp	r3, #1
    8426:	d105      	bne.n	8434 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
    8428:	2308      	movs	r3, #8
    842a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
    842c:	687b      	ldr	r3, [r7, #4]
    842e:	69fa      	ldr	r2, [r7, #28]
    8430:	611a      	str	r2, [r3, #16]
          break;
    8432:	e008      	b.n	8446 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
    8434:	2308      	movs	r3, #8
    8436:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
    8438:	687b      	ldr	r3, [r7, #4]
    843a:	69fa      	ldr	r2, [r7, #28]
    843c:	615a      	str	r2, [r3, #20]
          break;
    843e:	e002      	b.n	8446 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
    8440:	2300      	movs	r3, #0
    8442:	623b      	str	r3, [r7, #32]
          break;
    8444:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
    8446:	69bb      	ldr	r3, [r7, #24]
    8448:	2bff      	cmp	r3, #255	; 0xff
    844a:	d801      	bhi.n	8450 <HAL_GPIO_Init+0xfc>
    844c:	687b      	ldr	r3, [r7, #4]
    844e:	e001      	b.n	8454 <HAL_GPIO_Init+0x100>
    8450:	687b      	ldr	r3, [r7, #4]
    8452:	3304      	adds	r3, #4
    8454:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
    8456:	69bb      	ldr	r3, [r7, #24]
    8458:	2bff      	cmp	r3, #255	; 0xff
    845a:	d802      	bhi.n	8462 <HAL_GPIO_Init+0x10e>
    845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    845e:	009b      	lsls	r3, r3, #2
    8460:	e002      	b.n	8468 <HAL_GPIO_Init+0x114>
    8462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8464:	3b08      	subs	r3, #8
    8466:	009b      	lsls	r3, r3, #2
    8468:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
    846a:	68fb      	ldr	r3, [r7, #12]
    846c:	681a      	ldr	r2, [r3, #0]
    846e:	210f      	movs	r1, #15
    8470:	693b      	ldr	r3, [r7, #16]
    8472:	fa01 f303 	lsl.w	r3, r1, r3
    8476:	43db      	mvns	r3, r3
    8478:	401a      	ands	r2, r3
    847a:	6a39      	ldr	r1, [r7, #32]
    847c:	693b      	ldr	r3, [r7, #16]
    847e:	fa01 f303 	lsl.w	r3, r1, r3
    8482:	431a      	orrs	r2, r3
    8484:	68fb      	ldr	r3, [r7, #12]
    8486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
    8488:	683b      	ldr	r3, [r7, #0]
    848a:	685b      	ldr	r3, [r3, #4]
    848c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    8490:	2b00      	cmp	r3, #0
    8492:	f000 8096 	beq.w	85c2 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
    8496:	4b57      	ldr	r3, [pc, #348]	; (85f4 <HAL_GPIO_Init+0x2a0>)
    8498:	699b      	ldr	r3, [r3, #24]
    849a:	4a56      	ldr	r2, [pc, #344]	; (85f4 <HAL_GPIO_Init+0x2a0>)
    849c:	f043 0301 	orr.w	r3, r3, #1
    84a0:	6193      	str	r3, [r2, #24]
    84a2:	4b54      	ldr	r3, [pc, #336]	; (85f4 <HAL_GPIO_Init+0x2a0>)
    84a4:	699b      	ldr	r3, [r3, #24]
    84a6:	f003 0301 	and.w	r3, r3, #1
    84aa:	60bb      	str	r3, [r7, #8]
    84ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
    84ae:	4a52      	ldr	r2, [pc, #328]	; (85f8 <HAL_GPIO_Init+0x2a4>)
    84b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84b2:	089b      	lsrs	r3, r3, #2
    84b4:	3302      	adds	r3, #2
    84b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    84ba:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
    84bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84be:	f003 0303 	and.w	r3, r3, #3
    84c2:	009b      	lsls	r3, r3, #2
    84c4:	220f      	movs	r2, #15
    84c6:	fa02 f303 	lsl.w	r3, r2, r3
    84ca:	43db      	mvns	r3, r3
    84cc:	697a      	ldr	r2, [r7, #20]
    84ce:	4013      	ands	r3, r2
    84d0:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
    84d2:	687b      	ldr	r3, [r7, #4]
    84d4:	4a49      	ldr	r2, [pc, #292]	; (85fc <HAL_GPIO_Init+0x2a8>)
    84d6:	4293      	cmp	r3, r2
    84d8:	d013      	beq.n	8502 <HAL_GPIO_Init+0x1ae>
    84da:	687b      	ldr	r3, [r7, #4]
    84dc:	4a48      	ldr	r2, [pc, #288]	; (8600 <HAL_GPIO_Init+0x2ac>)
    84de:	4293      	cmp	r3, r2
    84e0:	d00d      	beq.n	84fe <HAL_GPIO_Init+0x1aa>
    84e2:	687b      	ldr	r3, [r7, #4]
    84e4:	4a47      	ldr	r2, [pc, #284]	; (8604 <HAL_GPIO_Init+0x2b0>)
    84e6:	4293      	cmp	r3, r2
    84e8:	d007      	beq.n	84fa <HAL_GPIO_Init+0x1a6>
    84ea:	687b      	ldr	r3, [r7, #4]
    84ec:	4a46      	ldr	r2, [pc, #280]	; (8608 <HAL_GPIO_Init+0x2b4>)
    84ee:	4293      	cmp	r3, r2
    84f0:	d101      	bne.n	84f6 <HAL_GPIO_Init+0x1a2>
    84f2:	2303      	movs	r3, #3
    84f4:	e006      	b.n	8504 <HAL_GPIO_Init+0x1b0>
    84f6:	2304      	movs	r3, #4
    84f8:	e004      	b.n	8504 <HAL_GPIO_Init+0x1b0>
    84fa:	2302      	movs	r3, #2
    84fc:	e002      	b.n	8504 <HAL_GPIO_Init+0x1b0>
    84fe:	2301      	movs	r3, #1
    8500:	e000      	b.n	8504 <HAL_GPIO_Init+0x1b0>
    8502:	2300      	movs	r3, #0
    8504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8506:	f002 0203 	and.w	r2, r2, #3
    850a:	0092      	lsls	r2, r2, #2
    850c:	4093      	lsls	r3, r2
    850e:	697a      	ldr	r2, [r7, #20]
    8510:	4313      	orrs	r3, r2
    8512:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
    8514:	4938      	ldr	r1, [pc, #224]	; (85f8 <HAL_GPIO_Init+0x2a4>)
    8516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8518:	089b      	lsrs	r3, r3, #2
    851a:	3302      	adds	r3, #2
    851c:	697a      	ldr	r2, [r7, #20]
    851e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
    8522:	683b      	ldr	r3, [r7, #0]
    8524:	685b      	ldr	r3, [r3, #4]
    8526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    852a:	2b00      	cmp	r3, #0
    852c:	d006      	beq.n	853c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
    852e:	4b37      	ldr	r3, [pc, #220]	; (860c <HAL_GPIO_Init+0x2b8>)
    8530:	681a      	ldr	r2, [r3, #0]
    8532:	4936      	ldr	r1, [pc, #216]	; (860c <HAL_GPIO_Init+0x2b8>)
    8534:	69bb      	ldr	r3, [r7, #24]
    8536:	4313      	orrs	r3, r2
    8538:	600b      	str	r3, [r1, #0]
    853a:	e006      	b.n	854a <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
    853c:	4b33      	ldr	r3, [pc, #204]	; (860c <HAL_GPIO_Init+0x2b8>)
    853e:	681a      	ldr	r2, [r3, #0]
    8540:	69bb      	ldr	r3, [r7, #24]
    8542:	43db      	mvns	r3, r3
    8544:	4931      	ldr	r1, [pc, #196]	; (860c <HAL_GPIO_Init+0x2b8>)
    8546:	4013      	ands	r3, r2
    8548:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
    854a:	683b      	ldr	r3, [r7, #0]
    854c:	685b      	ldr	r3, [r3, #4]
    854e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8552:	2b00      	cmp	r3, #0
    8554:	d006      	beq.n	8564 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
    8556:	4b2d      	ldr	r3, [pc, #180]	; (860c <HAL_GPIO_Init+0x2b8>)
    8558:	685a      	ldr	r2, [r3, #4]
    855a:	492c      	ldr	r1, [pc, #176]	; (860c <HAL_GPIO_Init+0x2b8>)
    855c:	69bb      	ldr	r3, [r7, #24]
    855e:	4313      	orrs	r3, r2
    8560:	604b      	str	r3, [r1, #4]
    8562:	e006      	b.n	8572 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
    8564:	4b29      	ldr	r3, [pc, #164]	; (860c <HAL_GPIO_Init+0x2b8>)
    8566:	685a      	ldr	r2, [r3, #4]
    8568:	69bb      	ldr	r3, [r7, #24]
    856a:	43db      	mvns	r3, r3
    856c:	4927      	ldr	r1, [pc, #156]	; (860c <HAL_GPIO_Init+0x2b8>)
    856e:	4013      	ands	r3, r2
    8570:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
    8572:	683b      	ldr	r3, [r7, #0]
    8574:	685b      	ldr	r3, [r3, #4]
    8576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    857a:	2b00      	cmp	r3, #0
    857c:	d006      	beq.n	858c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
    857e:	4b23      	ldr	r3, [pc, #140]	; (860c <HAL_GPIO_Init+0x2b8>)
    8580:	689a      	ldr	r2, [r3, #8]
    8582:	4922      	ldr	r1, [pc, #136]	; (860c <HAL_GPIO_Init+0x2b8>)
    8584:	69bb      	ldr	r3, [r7, #24]
    8586:	4313      	orrs	r3, r2
    8588:	608b      	str	r3, [r1, #8]
    858a:	e006      	b.n	859a <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
    858c:	4b1f      	ldr	r3, [pc, #124]	; (860c <HAL_GPIO_Init+0x2b8>)
    858e:	689a      	ldr	r2, [r3, #8]
    8590:	69bb      	ldr	r3, [r7, #24]
    8592:	43db      	mvns	r3, r3
    8594:	491d      	ldr	r1, [pc, #116]	; (860c <HAL_GPIO_Init+0x2b8>)
    8596:	4013      	ands	r3, r2
    8598:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
    859a:	683b      	ldr	r3, [r7, #0]
    859c:	685b      	ldr	r3, [r3, #4]
    859e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    85a2:	2b00      	cmp	r3, #0
    85a4:	d006      	beq.n	85b4 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
    85a6:	4b19      	ldr	r3, [pc, #100]	; (860c <HAL_GPIO_Init+0x2b8>)
    85a8:	68da      	ldr	r2, [r3, #12]
    85aa:	4918      	ldr	r1, [pc, #96]	; (860c <HAL_GPIO_Init+0x2b8>)
    85ac:	69bb      	ldr	r3, [r7, #24]
    85ae:	4313      	orrs	r3, r2
    85b0:	60cb      	str	r3, [r1, #12]
    85b2:	e006      	b.n	85c2 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
    85b4:	4b15      	ldr	r3, [pc, #84]	; (860c <HAL_GPIO_Init+0x2b8>)
    85b6:	68da      	ldr	r2, [r3, #12]
    85b8:	69bb      	ldr	r3, [r7, #24]
    85ba:	43db      	mvns	r3, r3
    85bc:	4913      	ldr	r1, [pc, #76]	; (860c <HAL_GPIO_Init+0x2b8>)
    85be:	4013      	ands	r3, r2
    85c0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
    85c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    85c4:	3301      	adds	r3, #1
    85c6:	627b      	str	r3, [r7, #36]	; 0x24
    85c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    85ca:	2b0f      	cmp	r3, #15
    85cc:	f67f aed4 	bls.w	8378 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
    85d0:	bf00      	nop
    85d2:	372c      	adds	r7, #44	; 0x2c
    85d4:	46bd      	mov	sp, r7
    85d6:	bc80      	pop	{r7}
    85d8:	4770      	bx	lr
    85da:	bf00      	nop
    85dc:	10210000 	.word	0x10210000
    85e0:	10110000 	.word	0x10110000
    85e4:	10120000 	.word	0x10120000
    85e8:	10310000 	.word	0x10310000
    85ec:	10320000 	.word	0x10320000
    85f0:	10220000 	.word	0x10220000
    85f4:	40021000 	.word	0x40021000
    85f8:	40010000 	.word	0x40010000
    85fc:	40010800 	.word	0x40010800
    8600:	40010c00 	.word	0x40010c00
    8604:	40011000 	.word	0x40011000
    8608:	40011400 	.word	0x40011400
    860c:	40010400 	.word	0x40010400

00008610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
    8610:	b580      	push	{r7, lr}
    8612:	b086      	sub	sp, #24
    8614:	af00      	add	r7, sp, #0
    8616:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
    8618:	2300      	movs	r3, #0
    861a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
    861c:	687b      	ldr	r3, [r7, #4]
    861e:	681b      	ldr	r3, [r3, #0]
    8620:	f003 0301 	and.w	r3, r3, #1
    8624:	2b00      	cmp	r3, #0
    8626:	f000 8087 	beq.w	8738 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
    862a:	4b92      	ldr	r3, [pc, #584]	; (8874 <HAL_RCC_OscConfig+0x264>)
    862c:	685b      	ldr	r3, [r3, #4]
    862e:	f003 030c 	and.w	r3, r3, #12
    8632:	2b04      	cmp	r3, #4
    8634:	d00c      	beq.n	8650 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    8636:	4b8f      	ldr	r3, [pc, #572]	; (8874 <HAL_RCC_OscConfig+0x264>)
    8638:	685b      	ldr	r3, [r3, #4]
    863a:	f003 030c 	and.w	r3, r3, #12
    863e:	2b08      	cmp	r3, #8
    8640:	d112      	bne.n	8668 <HAL_RCC_OscConfig+0x58>
    8642:	4b8c      	ldr	r3, [pc, #560]	; (8874 <HAL_RCC_OscConfig+0x264>)
    8644:	685b      	ldr	r3, [r3, #4]
    8646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    864a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    864e:	d10b      	bne.n	8668 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
    8650:	4b88      	ldr	r3, [pc, #544]	; (8874 <HAL_RCC_OscConfig+0x264>)
    8652:	681b      	ldr	r3, [r3, #0]
    8654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8658:	2b00      	cmp	r3, #0
    865a:	d06c      	beq.n	8736 <HAL_RCC_OscConfig+0x126>
    865c:	687b      	ldr	r3, [r7, #4]
    865e:	685b      	ldr	r3, [r3, #4]
    8660:	2b00      	cmp	r3, #0
    8662:	d168      	bne.n	8736 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
    8664:	2301      	movs	r3, #1
    8666:	e22d      	b.n	8ac4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
    8668:	687b      	ldr	r3, [r7, #4]
    866a:	685b      	ldr	r3, [r3, #4]
    866c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8670:	d106      	bne.n	8680 <HAL_RCC_OscConfig+0x70>
    8672:	4b80      	ldr	r3, [pc, #512]	; (8874 <HAL_RCC_OscConfig+0x264>)
    8674:	681b      	ldr	r3, [r3, #0]
    8676:	4a7f      	ldr	r2, [pc, #508]	; (8874 <HAL_RCC_OscConfig+0x264>)
    8678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    867c:	6013      	str	r3, [r2, #0]
    867e:	e02e      	b.n	86de <HAL_RCC_OscConfig+0xce>
    8680:	687b      	ldr	r3, [r7, #4]
    8682:	685b      	ldr	r3, [r3, #4]
    8684:	2b00      	cmp	r3, #0
    8686:	d10c      	bne.n	86a2 <HAL_RCC_OscConfig+0x92>
    8688:	4b7a      	ldr	r3, [pc, #488]	; (8874 <HAL_RCC_OscConfig+0x264>)
    868a:	681b      	ldr	r3, [r3, #0]
    868c:	4a79      	ldr	r2, [pc, #484]	; (8874 <HAL_RCC_OscConfig+0x264>)
    868e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    8692:	6013      	str	r3, [r2, #0]
    8694:	4b77      	ldr	r3, [pc, #476]	; (8874 <HAL_RCC_OscConfig+0x264>)
    8696:	681b      	ldr	r3, [r3, #0]
    8698:	4a76      	ldr	r2, [pc, #472]	; (8874 <HAL_RCC_OscConfig+0x264>)
    869a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    869e:	6013      	str	r3, [r2, #0]
    86a0:	e01d      	b.n	86de <HAL_RCC_OscConfig+0xce>
    86a2:	687b      	ldr	r3, [r7, #4]
    86a4:	685b      	ldr	r3, [r3, #4]
    86a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    86aa:	d10c      	bne.n	86c6 <HAL_RCC_OscConfig+0xb6>
    86ac:	4b71      	ldr	r3, [pc, #452]	; (8874 <HAL_RCC_OscConfig+0x264>)
    86ae:	681b      	ldr	r3, [r3, #0]
    86b0:	4a70      	ldr	r2, [pc, #448]	; (8874 <HAL_RCC_OscConfig+0x264>)
    86b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    86b6:	6013      	str	r3, [r2, #0]
    86b8:	4b6e      	ldr	r3, [pc, #440]	; (8874 <HAL_RCC_OscConfig+0x264>)
    86ba:	681b      	ldr	r3, [r3, #0]
    86bc:	4a6d      	ldr	r2, [pc, #436]	; (8874 <HAL_RCC_OscConfig+0x264>)
    86be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    86c2:	6013      	str	r3, [r2, #0]
    86c4:	e00b      	b.n	86de <HAL_RCC_OscConfig+0xce>
    86c6:	4b6b      	ldr	r3, [pc, #428]	; (8874 <HAL_RCC_OscConfig+0x264>)
    86c8:	681b      	ldr	r3, [r3, #0]
    86ca:	4a6a      	ldr	r2, [pc, #424]	; (8874 <HAL_RCC_OscConfig+0x264>)
    86cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    86d0:	6013      	str	r3, [r2, #0]
    86d2:	4b68      	ldr	r3, [pc, #416]	; (8874 <HAL_RCC_OscConfig+0x264>)
    86d4:	681b      	ldr	r3, [r3, #0]
    86d6:	4a67      	ldr	r2, [pc, #412]	; (8874 <HAL_RCC_OscConfig+0x264>)
    86d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    86dc:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
    86de:	687b      	ldr	r3, [r7, #4]
    86e0:	685b      	ldr	r3, [r3, #4]
    86e2:	2b00      	cmp	r3, #0
    86e4:	d013      	beq.n	870e <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    86e6:	f7ff fd47 	bl	8178 <HAL_GetTick>
    86ea:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    86ec:	e008      	b.n	8700 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
    86ee:	f7ff fd43 	bl	8178 <HAL_GetTick>
    86f2:	4602      	mov	r2, r0
    86f4:	693b      	ldr	r3, [r7, #16]
    86f6:	1ad3      	subs	r3, r2, r3
    86f8:	2b64      	cmp	r3, #100	; 0x64
    86fa:	d901      	bls.n	8700 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
    86fc:	2303      	movs	r3, #3
    86fe:	e1e1      	b.n	8ac4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    8700:	4b5c      	ldr	r3, [pc, #368]	; (8874 <HAL_RCC_OscConfig+0x264>)
    8702:	681b      	ldr	r3, [r3, #0]
    8704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8708:	2b00      	cmp	r3, #0
    870a:	d0f0      	beq.n	86ee <HAL_RCC_OscConfig+0xde>
    870c:	e014      	b.n	8738 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    870e:	f7ff fd33 	bl	8178 <HAL_GetTick>
    8712:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
    8714:	e008      	b.n	8728 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
    8716:	f7ff fd2f 	bl	8178 <HAL_GetTick>
    871a:	4602      	mov	r2, r0
    871c:	693b      	ldr	r3, [r7, #16]
    871e:	1ad3      	subs	r3, r2, r3
    8720:	2b64      	cmp	r3, #100	; 0x64
    8722:	d901      	bls.n	8728 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
    8724:	2303      	movs	r3, #3
    8726:	e1cd      	b.n	8ac4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
    8728:	4b52      	ldr	r3, [pc, #328]	; (8874 <HAL_RCC_OscConfig+0x264>)
    872a:	681b      	ldr	r3, [r3, #0]
    872c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8730:	2b00      	cmp	r3, #0
    8732:	d1f0      	bne.n	8716 <HAL_RCC_OscConfig+0x106>
    8734:	e000      	b.n	8738 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
    8736:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
    8738:	687b      	ldr	r3, [r7, #4]
    873a:	681b      	ldr	r3, [r3, #0]
    873c:	f003 0302 	and.w	r3, r3, #2
    8740:	2b00      	cmp	r3, #0
    8742:	d063      	beq.n	880c <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
    8744:	4b4b      	ldr	r3, [pc, #300]	; (8874 <HAL_RCC_OscConfig+0x264>)
    8746:	685b      	ldr	r3, [r3, #4]
    8748:	f003 030c 	and.w	r3, r3, #12
    874c:	2b00      	cmp	r3, #0
    874e:	d00b      	beq.n	8768 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    8750:	4b48      	ldr	r3, [pc, #288]	; (8874 <HAL_RCC_OscConfig+0x264>)
    8752:	685b      	ldr	r3, [r3, #4]
    8754:	f003 030c 	and.w	r3, r3, #12
    8758:	2b08      	cmp	r3, #8
    875a:	d11c      	bne.n	8796 <HAL_RCC_OscConfig+0x186>
    875c:	4b45      	ldr	r3, [pc, #276]	; (8874 <HAL_RCC_OscConfig+0x264>)
    875e:	685b      	ldr	r3, [r3, #4]
    8760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    8764:	2b00      	cmp	r3, #0
    8766:	d116      	bne.n	8796 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
    8768:	4b42      	ldr	r3, [pc, #264]	; (8874 <HAL_RCC_OscConfig+0x264>)
    876a:	681b      	ldr	r3, [r3, #0]
    876c:	f003 0302 	and.w	r3, r3, #2
    8770:	2b00      	cmp	r3, #0
    8772:	d005      	beq.n	8780 <HAL_RCC_OscConfig+0x170>
    8774:	687b      	ldr	r3, [r7, #4]
    8776:	691b      	ldr	r3, [r3, #16]
    8778:	2b01      	cmp	r3, #1
    877a:	d001      	beq.n	8780 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
    877c:	2301      	movs	r3, #1
    877e:	e1a1      	b.n	8ac4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
    8780:	4b3c      	ldr	r3, [pc, #240]	; (8874 <HAL_RCC_OscConfig+0x264>)
    8782:	681b      	ldr	r3, [r3, #0]
    8784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
    8788:	687b      	ldr	r3, [r7, #4]
    878a:	695b      	ldr	r3, [r3, #20]
    878c:	00db      	lsls	r3, r3, #3
    878e:	4939      	ldr	r1, [pc, #228]	; (8874 <HAL_RCC_OscConfig+0x264>)
    8790:	4313      	orrs	r3, r2
    8792:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
    8794:	e03a      	b.n	880c <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
    8796:	687b      	ldr	r3, [r7, #4]
    8798:	691b      	ldr	r3, [r3, #16]
    879a:	2b00      	cmp	r3, #0
    879c:	d020      	beq.n	87e0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
    879e:	4b36      	ldr	r3, [pc, #216]	; (8878 <HAL_RCC_OscConfig+0x268>)
    87a0:	2201      	movs	r2, #1
    87a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    87a4:	f7ff fce8 	bl	8178 <HAL_GetTick>
    87a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    87aa:	e008      	b.n	87be <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
    87ac:	f7ff fce4 	bl	8178 <HAL_GetTick>
    87b0:	4602      	mov	r2, r0
    87b2:	693b      	ldr	r3, [r7, #16]
    87b4:	1ad3      	subs	r3, r2, r3
    87b6:	2b02      	cmp	r3, #2
    87b8:	d901      	bls.n	87be <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
    87ba:	2303      	movs	r3, #3
    87bc:	e182      	b.n	8ac4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    87be:	4b2d      	ldr	r3, [pc, #180]	; (8874 <HAL_RCC_OscConfig+0x264>)
    87c0:	681b      	ldr	r3, [r3, #0]
    87c2:	f003 0302 	and.w	r3, r3, #2
    87c6:	2b00      	cmp	r3, #0
    87c8:	d0f0      	beq.n	87ac <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
    87ca:	4b2a      	ldr	r3, [pc, #168]	; (8874 <HAL_RCC_OscConfig+0x264>)
    87cc:	681b      	ldr	r3, [r3, #0]
    87ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
    87d2:	687b      	ldr	r3, [r7, #4]
    87d4:	695b      	ldr	r3, [r3, #20]
    87d6:	00db      	lsls	r3, r3, #3
    87d8:	4926      	ldr	r1, [pc, #152]	; (8874 <HAL_RCC_OscConfig+0x264>)
    87da:	4313      	orrs	r3, r2
    87dc:	600b      	str	r3, [r1, #0]
    87de:	e015      	b.n	880c <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
    87e0:	4b25      	ldr	r3, [pc, #148]	; (8878 <HAL_RCC_OscConfig+0x268>)
    87e2:	2200      	movs	r2, #0
    87e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    87e6:	f7ff fcc7 	bl	8178 <HAL_GetTick>
    87ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
    87ec:	e008      	b.n	8800 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
    87ee:	f7ff fcc3 	bl	8178 <HAL_GetTick>
    87f2:	4602      	mov	r2, r0
    87f4:	693b      	ldr	r3, [r7, #16]
    87f6:	1ad3      	subs	r3, r2, r3
    87f8:	2b02      	cmp	r3, #2
    87fa:	d901      	bls.n	8800 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
    87fc:	2303      	movs	r3, #3
    87fe:	e161      	b.n	8ac4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
    8800:	4b1c      	ldr	r3, [pc, #112]	; (8874 <HAL_RCC_OscConfig+0x264>)
    8802:	681b      	ldr	r3, [r3, #0]
    8804:	f003 0302 	and.w	r3, r3, #2
    8808:	2b00      	cmp	r3, #0
    880a:	d1f0      	bne.n	87ee <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
    880c:	687b      	ldr	r3, [r7, #4]
    880e:	681b      	ldr	r3, [r3, #0]
    8810:	f003 0308 	and.w	r3, r3, #8
    8814:	2b00      	cmp	r3, #0
    8816:	d039      	beq.n	888c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
    8818:	687b      	ldr	r3, [r7, #4]
    881a:	699b      	ldr	r3, [r3, #24]
    881c:	2b00      	cmp	r3, #0
    881e:	d019      	beq.n	8854 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
    8820:	4b16      	ldr	r3, [pc, #88]	; (887c <HAL_RCC_OscConfig+0x26c>)
    8822:	2201      	movs	r2, #1
    8824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
    8826:	f7ff fca7 	bl	8178 <HAL_GetTick>
    882a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
    882c:	e008      	b.n	8840 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
    882e:	f7ff fca3 	bl	8178 <HAL_GetTick>
    8832:	4602      	mov	r2, r0
    8834:	693b      	ldr	r3, [r7, #16]
    8836:	1ad3      	subs	r3, r2, r3
    8838:	2b02      	cmp	r3, #2
    883a:	d901      	bls.n	8840 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
    883c:	2303      	movs	r3, #3
    883e:	e141      	b.n	8ac4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
    8840:	4b0c      	ldr	r3, [pc, #48]	; (8874 <HAL_RCC_OscConfig+0x264>)
    8842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8844:	f003 0302 	and.w	r3, r3, #2
    8848:	2b00      	cmp	r3, #0
    884a:	d0f0      	beq.n	882e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
    884c:	2001      	movs	r0, #1
    884e:	f000 fae3 	bl	8e18 <RCC_Delay>
    8852:	e01b      	b.n	888c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
    8854:	4b09      	ldr	r3, [pc, #36]	; (887c <HAL_RCC_OscConfig+0x26c>)
    8856:	2200      	movs	r2, #0
    8858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
    885a:	f7ff fc8d 	bl	8178 <HAL_GetTick>
    885e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
    8860:	e00e      	b.n	8880 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
    8862:	f7ff fc89 	bl	8178 <HAL_GetTick>
    8866:	4602      	mov	r2, r0
    8868:	693b      	ldr	r3, [r7, #16]
    886a:	1ad3      	subs	r3, r2, r3
    886c:	2b02      	cmp	r3, #2
    886e:	d907      	bls.n	8880 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
    8870:	2303      	movs	r3, #3
    8872:	e127      	b.n	8ac4 <HAL_RCC_OscConfig+0x4b4>
    8874:	40021000 	.word	0x40021000
    8878:	42420000 	.word	0x42420000
    887c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
    8880:	4b92      	ldr	r3, [pc, #584]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8884:	f003 0302 	and.w	r3, r3, #2
    8888:	2b00      	cmp	r3, #0
    888a:	d1ea      	bne.n	8862 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
    888c:	687b      	ldr	r3, [r7, #4]
    888e:	681b      	ldr	r3, [r3, #0]
    8890:	f003 0304 	and.w	r3, r3, #4
    8894:	2b00      	cmp	r3, #0
    8896:	f000 80a6 	beq.w	89e6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
    889a:	2300      	movs	r3, #0
    889c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
    889e:	4b8b      	ldr	r3, [pc, #556]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    88a0:	69db      	ldr	r3, [r3, #28]
    88a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    88a6:	2b00      	cmp	r3, #0
    88a8:	d10d      	bne.n	88c6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
    88aa:	4b88      	ldr	r3, [pc, #544]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    88ac:	69db      	ldr	r3, [r3, #28]
    88ae:	4a87      	ldr	r2, [pc, #540]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    88b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    88b4:	61d3      	str	r3, [r2, #28]
    88b6:	4b85      	ldr	r3, [pc, #532]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    88b8:	69db      	ldr	r3, [r3, #28]
    88ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    88be:	60fb      	str	r3, [r7, #12]
    88c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
    88c2:	2301      	movs	r3, #1
    88c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    88c6:	4b82      	ldr	r3, [pc, #520]	; (8ad0 <HAL_RCC_OscConfig+0x4c0>)
    88c8:	681b      	ldr	r3, [r3, #0]
    88ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
    88ce:	2b00      	cmp	r3, #0
    88d0:	d118      	bne.n	8904 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
    88d2:	4b7f      	ldr	r3, [pc, #508]	; (8ad0 <HAL_RCC_OscConfig+0x4c0>)
    88d4:	681b      	ldr	r3, [r3, #0]
    88d6:	4a7e      	ldr	r2, [pc, #504]	; (8ad0 <HAL_RCC_OscConfig+0x4c0>)
    88d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    88dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
    88de:	f7ff fc4b 	bl	8178 <HAL_GetTick>
    88e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    88e4:	e008      	b.n	88f8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
    88e6:	f7ff fc47 	bl	8178 <HAL_GetTick>
    88ea:	4602      	mov	r2, r0
    88ec:	693b      	ldr	r3, [r7, #16]
    88ee:	1ad3      	subs	r3, r2, r3
    88f0:	2b64      	cmp	r3, #100	; 0x64
    88f2:	d901      	bls.n	88f8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
    88f4:	2303      	movs	r3, #3
    88f6:	e0e5      	b.n	8ac4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    88f8:	4b75      	ldr	r3, [pc, #468]	; (8ad0 <HAL_RCC_OscConfig+0x4c0>)
    88fa:	681b      	ldr	r3, [r3, #0]
    88fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8900:	2b00      	cmp	r3, #0
    8902:	d0f0      	beq.n	88e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    8904:	687b      	ldr	r3, [r7, #4]
    8906:	68db      	ldr	r3, [r3, #12]
    8908:	2b01      	cmp	r3, #1
    890a:	d106      	bne.n	891a <HAL_RCC_OscConfig+0x30a>
    890c:	4b6f      	ldr	r3, [pc, #444]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    890e:	6a1b      	ldr	r3, [r3, #32]
    8910:	4a6e      	ldr	r2, [pc, #440]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8912:	f043 0301 	orr.w	r3, r3, #1
    8916:	6213      	str	r3, [r2, #32]
    8918:	e02d      	b.n	8976 <HAL_RCC_OscConfig+0x366>
    891a:	687b      	ldr	r3, [r7, #4]
    891c:	68db      	ldr	r3, [r3, #12]
    891e:	2b00      	cmp	r3, #0
    8920:	d10c      	bne.n	893c <HAL_RCC_OscConfig+0x32c>
    8922:	4b6a      	ldr	r3, [pc, #424]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8924:	6a1b      	ldr	r3, [r3, #32]
    8926:	4a69      	ldr	r2, [pc, #420]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8928:	f023 0301 	bic.w	r3, r3, #1
    892c:	6213      	str	r3, [r2, #32]
    892e:	4b67      	ldr	r3, [pc, #412]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8930:	6a1b      	ldr	r3, [r3, #32]
    8932:	4a66      	ldr	r2, [pc, #408]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8934:	f023 0304 	bic.w	r3, r3, #4
    8938:	6213      	str	r3, [r2, #32]
    893a:	e01c      	b.n	8976 <HAL_RCC_OscConfig+0x366>
    893c:	687b      	ldr	r3, [r7, #4]
    893e:	68db      	ldr	r3, [r3, #12]
    8940:	2b05      	cmp	r3, #5
    8942:	d10c      	bne.n	895e <HAL_RCC_OscConfig+0x34e>
    8944:	4b61      	ldr	r3, [pc, #388]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8946:	6a1b      	ldr	r3, [r3, #32]
    8948:	4a60      	ldr	r2, [pc, #384]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    894a:	f043 0304 	orr.w	r3, r3, #4
    894e:	6213      	str	r3, [r2, #32]
    8950:	4b5e      	ldr	r3, [pc, #376]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8952:	6a1b      	ldr	r3, [r3, #32]
    8954:	4a5d      	ldr	r2, [pc, #372]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8956:	f043 0301 	orr.w	r3, r3, #1
    895a:	6213      	str	r3, [r2, #32]
    895c:	e00b      	b.n	8976 <HAL_RCC_OscConfig+0x366>
    895e:	4b5b      	ldr	r3, [pc, #364]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8960:	6a1b      	ldr	r3, [r3, #32]
    8962:	4a5a      	ldr	r2, [pc, #360]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8964:	f023 0301 	bic.w	r3, r3, #1
    8968:	6213      	str	r3, [r2, #32]
    896a:	4b58      	ldr	r3, [pc, #352]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    896c:	6a1b      	ldr	r3, [r3, #32]
    896e:	4a57      	ldr	r2, [pc, #348]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8970:	f023 0304 	bic.w	r3, r3, #4
    8974:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    8976:	687b      	ldr	r3, [r7, #4]
    8978:	68db      	ldr	r3, [r3, #12]
    897a:	2b00      	cmp	r3, #0
    897c:	d015      	beq.n	89aa <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
    897e:	f7ff fbfb 	bl	8178 <HAL_GetTick>
    8982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    8984:	e00a      	b.n	899c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
    8986:	f7ff fbf7 	bl	8178 <HAL_GetTick>
    898a:	4602      	mov	r2, r0
    898c:	693b      	ldr	r3, [r7, #16]
    898e:	1ad3      	subs	r3, r2, r3
    8990:	f241 3288 	movw	r2, #5000	; 0x1388
    8994:	4293      	cmp	r3, r2
    8996:	d901      	bls.n	899c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
    8998:	2303      	movs	r3, #3
    899a:	e093      	b.n	8ac4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    899c:	4b4b      	ldr	r3, [pc, #300]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    899e:	6a1b      	ldr	r3, [r3, #32]
    89a0:	f003 0302 	and.w	r3, r3, #2
    89a4:	2b00      	cmp	r3, #0
    89a6:	d0ee      	beq.n	8986 <HAL_RCC_OscConfig+0x376>
    89a8:	e014      	b.n	89d4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
    89aa:	f7ff fbe5 	bl	8178 <HAL_GetTick>
    89ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    89b0:	e00a      	b.n	89c8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
    89b2:	f7ff fbe1 	bl	8178 <HAL_GetTick>
    89b6:	4602      	mov	r2, r0
    89b8:	693b      	ldr	r3, [r7, #16]
    89ba:	1ad3      	subs	r3, r2, r3
    89bc:	f241 3288 	movw	r2, #5000	; 0x1388
    89c0:	4293      	cmp	r3, r2
    89c2:	d901      	bls.n	89c8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
    89c4:	2303      	movs	r3, #3
    89c6:	e07d      	b.n	8ac4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    89c8:	4b40      	ldr	r3, [pc, #256]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    89ca:	6a1b      	ldr	r3, [r3, #32]
    89cc:	f003 0302 	and.w	r3, r3, #2
    89d0:	2b00      	cmp	r3, #0
    89d2:	d1ee      	bne.n	89b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
    89d4:	7dfb      	ldrb	r3, [r7, #23]
    89d6:	2b01      	cmp	r3, #1
    89d8:	d105      	bne.n	89e6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    89da:	4b3c      	ldr	r3, [pc, #240]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    89dc:	69db      	ldr	r3, [r3, #28]
    89de:	4a3b      	ldr	r2, [pc, #236]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    89e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    89e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
    89e6:	687b      	ldr	r3, [r7, #4]
    89e8:	69db      	ldr	r3, [r3, #28]
    89ea:	2b00      	cmp	r3, #0
    89ec:	d069      	beq.n	8ac2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    89ee:	4b37      	ldr	r3, [pc, #220]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    89f0:	685b      	ldr	r3, [r3, #4]
    89f2:	f003 030c 	and.w	r3, r3, #12
    89f6:	2b08      	cmp	r3, #8
    89f8:	d061      	beq.n	8abe <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
    89fa:	687b      	ldr	r3, [r7, #4]
    89fc:	69db      	ldr	r3, [r3, #28]
    89fe:	2b02      	cmp	r3, #2
    8a00:	d146      	bne.n	8a90 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
    8a02:	4b34      	ldr	r3, [pc, #208]	; (8ad4 <HAL_RCC_OscConfig+0x4c4>)
    8a04:	2200      	movs	r2, #0
    8a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    8a08:	f7ff fbb6 	bl	8178 <HAL_GetTick>
    8a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
    8a0e:	e008      	b.n	8a22 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
    8a10:	f7ff fbb2 	bl	8178 <HAL_GetTick>
    8a14:	4602      	mov	r2, r0
    8a16:	693b      	ldr	r3, [r7, #16]
    8a18:	1ad3      	subs	r3, r2, r3
    8a1a:	2b02      	cmp	r3, #2
    8a1c:	d901      	bls.n	8a22 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
    8a1e:	2303      	movs	r3, #3
    8a20:	e050      	b.n	8ac4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
    8a22:	4b2a      	ldr	r3, [pc, #168]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8a24:	681b      	ldr	r3, [r3, #0]
    8a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    8a2a:	2b00      	cmp	r3, #0
    8a2c:	d1f0      	bne.n	8a10 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
    8a2e:	687b      	ldr	r3, [r7, #4]
    8a30:	6a1b      	ldr	r3, [r3, #32]
    8a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8a36:	d108      	bne.n	8a4a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
    8a38:	4b24      	ldr	r3, [pc, #144]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8a3a:	685b      	ldr	r3, [r3, #4]
    8a3c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
    8a40:	687b      	ldr	r3, [r7, #4]
    8a42:	689b      	ldr	r3, [r3, #8]
    8a44:	4921      	ldr	r1, [pc, #132]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8a46:	4313      	orrs	r3, r2
    8a48:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
    8a4a:	4b20      	ldr	r3, [pc, #128]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8a4c:	685b      	ldr	r3, [r3, #4]
    8a4e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
    8a52:	687b      	ldr	r3, [r7, #4]
    8a54:	6a19      	ldr	r1, [r3, #32]
    8a56:	687b      	ldr	r3, [r7, #4]
    8a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a5a:	430b      	orrs	r3, r1
    8a5c:	491b      	ldr	r1, [pc, #108]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8a5e:	4313      	orrs	r3, r2
    8a60:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
    8a62:	4b1c      	ldr	r3, [pc, #112]	; (8ad4 <HAL_RCC_OscConfig+0x4c4>)
    8a64:	2201      	movs	r2, #1
    8a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    8a68:	f7ff fb86 	bl	8178 <HAL_GetTick>
    8a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
    8a6e:	e008      	b.n	8a82 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
    8a70:	f7ff fb82 	bl	8178 <HAL_GetTick>
    8a74:	4602      	mov	r2, r0
    8a76:	693b      	ldr	r3, [r7, #16]
    8a78:	1ad3      	subs	r3, r2, r3
    8a7a:	2b02      	cmp	r3, #2
    8a7c:	d901      	bls.n	8a82 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
    8a7e:	2303      	movs	r3, #3
    8a80:	e020      	b.n	8ac4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
    8a82:	4b12      	ldr	r3, [pc, #72]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8a84:	681b      	ldr	r3, [r3, #0]
    8a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    8a8a:	2b00      	cmp	r3, #0
    8a8c:	d0f0      	beq.n	8a70 <HAL_RCC_OscConfig+0x460>
    8a8e:	e018      	b.n	8ac2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
    8a90:	4b10      	ldr	r3, [pc, #64]	; (8ad4 <HAL_RCC_OscConfig+0x4c4>)
    8a92:	2200      	movs	r2, #0
    8a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    8a96:	f7ff fb6f 	bl	8178 <HAL_GetTick>
    8a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
    8a9c:	e008      	b.n	8ab0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
    8a9e:	f7ff fb6b 	bl	8178 <HAL_GetTick>
    8aa2:	4602      	mov	r2, r0
    8aa4:	693b      	ldr	r3, [r7, #16]
    8aa6:	1ad3      	subs	r3, r2, r3
    8aa8:	2b02      	cmp	r3, #2
    8aaa:	d901      	bls.n	8ab0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
    8aac:	2303      	movs	r3, #3
    8aae:	e009      	b.n	8ac4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
    8ab0:	4b06      	ldr	r3, [pc, #24]	; (8acc <HAL_RCC_OscConfig+0x4bc>)
    8ab2:	681b      	ldr	r3, [r3, #0]
    8ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    8ab8:	2b00      	cmp	r3, #0
    8aba:	d1f0      	bne.n	8a9e <HAL_RCC_OscConfig+0x48e>
    8abc:	e001      	b.n	8ac2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
    8abe:	2301      	movs	r3, #1
    8ac0:	e000      	b.n	8ac4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
    8ac2:	2300      	movs	r3, #0
}
    8ac4:	4618      	mov	r0, r3
    8ac6:	3718      	adds	r7, #24
    8ac8:	46bd      	mov	sp, r7
    8aca:	bd80      	pop	{r7, pc}
    8acc:	40021000 	.word	0x40021000
    8ad0:	40007000 	.word	0x40007000
    8ad4:	42420060 	.word	0x42420060

00008ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
    8ad8:	b580      	push	{r7, lr}
    8ada:	b084      	sub	sp, #16
    8adc:	af00      	add	r7, sp, #0
    8ade:	6078      	str	r0, [r7, #4]
    8ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
    8ae2:	2300      	movs	r3, #0
    8ae4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
    8ae6:	4b7e      	ldr	r3, [pc, #504]	; (8ce0 <HAL_RCC_ClockConfig+0x208>)
    8ae8:	681b      	ldr	r3, [r3, #0]
    8aea:	f003 0307 	and.w	r3, r3, #7
    8aee:	683a      	ldr	r2, [r7, #0]
    8af0:	429a      	cmp	r2, r3
    8af2:	d910      	bls.n	8b16 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
    8af4:	4b7a      	ldr	r3, [pc, #488]	; (8ce0 <HAL_RCC_ClockConfig+0x208>)
    8af6:	681b      	ldr	r3, [r3, #0]
    8af8:	f023 0207 	bic.w	r2, r3, #7
    8afc:	4978      	ldr	r1, [pc, #480]	; (8ce0 <HAL_RCC_ClockConfig+0x208>)
    8afe:	683b      	ldr	r3, [r7, #0]
    8b00:	4313      	orrs	r3, r2
    8b02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    8b04:	4b76      	ldr	r3, [pc, #472]	; (8ce0 <HAL_RCC_ClockConfig+0x208>)
    8b06:	681b      	ldr	r3, [r3, #0]
    8b08:	f003 0307 	and.w	r3, r3, #7
    8b0c:	683a      	ldr	r2, [r7, #0]
    8b0e:	429a      	cmp	r2, r3
    8b10:	d001      	beq.n	8b16 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
    8b12:	2301      	movs	r3, #1
    8b14:	e0e0      	b.n	8cd8 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
    8b16:	687b      	ldr	r3, [r7, #4]
    8b18:	681b      	ldr	r3, [r3, #0]
    8b1a:	f003 0302 	and.w	r3, r3, #2
    8b1e:	2b00      	cmp	r3, #0
    8b20:	d020      	beq.n	8b64 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    8b22:	687b      	ldr	r3, [r7, #4]
    8b24:	681b      	ldr	r3, [r3, #0]
    8b26:	f003 0304 	and.w	r3, r3, #4
    8b2a:	2b00      	cmp	r3, #0
    8b2c:	d005      	beq.n	8b3a <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
    8b2e:	4b6d      	ldr	r3, [pc, #436]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8b30:	685b      	ldr	r3, [r3, #4]
    8b32:	4a6c      	ldr	r2, [pc, #432]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8b34:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
    8b38:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    8b3a:	687b      	ldr	r3, [r7, #4]
    8b3c:	681b      	ldr	r3, [r3, #0]
    8b3e:	f003 0308 	and.w	r3, r3, #8
    8b42:	2b00      	cmp	r3, #0
    8b44:	d005      	beq.n	8b52 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
    8b46:	4b67      	ldr	r3, [pc, #412]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8b48:	685b      	ldr	r3, [r3, #4]
    8b4a:	4a66      	ldr	r2, [pc, #408]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8b4c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
    8b50:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    8b52:	4b64      	ldr	r3, [pc, #400]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8b54:	685b      	ldr	r3, [r3, #4]
    8b56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
    8b5a:	687b      	ldr	r3, [r7, #4]
    8b5c:	689b      	ldr	r3, [r3, #8]
    8b5e:	4961      	ldr	r1, [pc, #388]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8b60:	4313      	orrs	r3, r2
    8b62:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    8b64:	687b      	ldr	r3, [r7, #4]
    8b66:	681b      	ldr	r3, [r3, #0]
    8b68:	f003 0301 	and.w	r3, r3, #1
    8b6c:	2b00      	cmp	r3, #0
    8b6e:	d06a      	beq.n	8c46 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    8b70:	687b      	ldr	r3, [r7, #4]
    8b72:	685b      	ldr	r3, [r3, #4]
    8b74:	2b01      	cmp	r3, #1
    8b76:	d107      	bne.n	8b88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    8b78:	4b5a      	ldr	r3, [pc, #360]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8b7a:	681b      	ldr	r3, [r3, #0]
    8b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8b80:	2b00      	cmp	r3, #0
    8b82:	d115      	bne.n	8bb0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
    8b84:	2301      	movs	r3, #1
    8b86:	e0a7      	b.n	8cd8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    8b88:	687b      	ldr	r3, [r7, #4]
    8b8a:	685b      	ldr	r3, [r3, #4]
    8b8c:	2b02      	cmp	r3, #2
    8b8e:	d107      	bne.n	8ba0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
    8b90:	4b54      	ldr	r3, [pc, #336]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8b92:	681b      	ldr	r3, [r3, #0]
    8b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    8b98:	2b00      	cmp	r3, #0
    8b9a:	d109      	bne.n	8bb0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
    8b9c:	2301      	movs	r3, #1
    8b9e:	e09b      	b.n	8cd8 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    8ba0:	4b50      	ldr	r3, [pc, #320]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8ba2:	681b      	ldr	r3, [r3, #0]
    8ba4:	f003 0302 	and.w	r3, r3, #2
    8ba8:	2b00      	cmp	r3, #0
    8baa:	d101      	bne.n	8bb0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
    8bac:	2301      	movs	r3, #1
    8bae:	e093      	b.n	8cd8 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    8bb0:	4b4c      	ldr	r3, [pc, #304]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8bb2:	685b      	ldr	r3, [r3, #4]
    8bb4:	f023 0203 	bic.w	r2, r3, #3
    8bb8:	687b      	ldr	r3, [r7, #4]
    8bba:	685b      	ldr	r3, [r3, #4]
    8bbc:	4949      	ldr	r1, [pc, #292]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8bbe:	4313      	orrs	r3, r2
    8bc0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    8bc2:	f7ff fad9 	bl	8178 <HAL_GetTick>
    8bc6:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    8bc8:	687b      	ldr	r3, [r7, #4]
    8bca:	685b      	ldr	r3, [r3, #4]
    8bcc:	2b01      	cmp	r3, #1
    8bce:	d112      	bne.n	8bf6 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
    8bd0:	e00a      	b.n	8be8 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
    8bd2:	f7ff fad1 	bl	8178 <HAL_GetTick>
    8bd6:	4602      	mov	r2, r0
    8bd8:	68fb      	ldr	r3, [r7, #12]
    8bda:	1ad3      	subs	r3, r2, r3
    8bdc:	f241 3288 	movw	r2, #5000	; 0x1388
    8be0:	4293      	cmp	r3, r2
    8be2:	d901      	bls.n	8be8 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
    8be4:	2303      	movs	r3, #3
    8be6:	e077      	b.n	8cd8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
    8be8:	4b3e      	ldr	r3, [pc, #248]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8bea:	685b      	ldr	r3, [r3, #4]
    8bec:	f003 030c 	and.w	r3, r3, #12
    8bf0:	2b04      	cmp	r3, #4
    8bf2:	d1ee      	bne.n	8bd2 <HAL_RCC_ClockConfig+0xfa>
    8bf4:	e027      	b.n	8c46 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    8bf6:	687b      	ldr	r3, [r7, #4]
    8bf8:	685b      	ldr	r3, [r3, #4]
    8bfa:	2b02      	cmp	r3, #2
    8bfc:	d11d      	bne.n	8c3a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    8bfe:	e00a      	b.n	8c16 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
    8c00:	f7ff faba 	bl	8178 <HAL_GetTick>
    8c04:	4602      	mov	r2, r0
    8c06:	68fb      	ldr	r3, [r7, #12]
    8c08:	1ad3      	subs	r3, r2, r3
    8c0a:	f241 3288 	movw	r2, #5000	; 0x1388
    8c0e:	4293      	cmp	r3, r2
    8c10:	d901      	bls.n	8c16 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
    8c12:	2303      	movs	r3, #3
    8c14:	e060      	b.n	8cd8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    8c16:	4b33      	ldr	r3, [pc, #204]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8c18:	685b      	ldr	r3, [r3, #4]
    8c1a:	f003 030c 	and.w	r3, r3, #12
    8c1e:	2b08      	cmp	r3, #8
    8c20:	d1ee      	bne.n	8c00 <HAL_RCC_ClockConfig+0x128>
    8c22:	e010      	b.n	8c46 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
    8c24:	f7ff faa8 	bl	8178 <HAL_GetTick>
    8c28:	4602      	mov	r2, r0
    8c2a:	68fb      	ldr	r3, [r7, #12]
    8c2c:	1ad3      	subs	r3, r2, r3
    8c2e:	f241 3288 	movw	r2, #5000	; 0x1388
    8c32:	4293      	cmp	r3, r2
    8c34:	d901      	bls.n	8c3a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
    8c36:	2303      	movs	r3, #3
    8c38:	e04e      	b.n	8cd8 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
    8c3a:	4b2a      	ldr	r3, [pc, #168]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8c3c:	685b      	ldr	r3, [r3, #4]
    8c3e:	f003 030c 	and.w	r3, r3, #12
    8c42:	2b00      	cmp	r3, #0
    8c44:	d1ee      	bne.n	8c24 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
    8c46:	4b26      	ldr	r3, [pc, #152]	; (8ce0 <HAL_RCC_ClockConfig+0x208>)
    8c48:	681b      	ldr	r3, [r3, #0]
    8c4a:	f003 0307 	and.w	r3, r3, #7
    8c4e:	683a      	ldr	r2, [r7, #0]
    8c50:	429a      	cmp	r2, r3
    8c52:	d210      	bcs.n	8c76 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
    8c54:	4b22      	ldr	r3, [pc, #136]	; (8ce0 <HAL_RCC_ClockConfig+0x208>)
    8c56:	681b      	ldr	r3, [r3, #0]
    8c58:	f023 0207 	bic.w	r2, r3, #7
    8c5c:	4920      	ldr	r1, [pc, #128]	; (8ce0 <HAL_RCC_ClockConfig+0x208>)
    8c5e:	683b      	ldr	r3, [r7, #0]
    8c60:	4313      	orrs	r3, r2
    8c62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    8c64:	4b1e      	ldr	r3, [pc, #120]	; (8ce0 <HAL_RCC_ClockConfig+0x208>)
    8c66:	681b      	ldr	r3, [r3, #0]
    8c68:	f003 0307 	and.w	r3, r3, #7
    8c6c:	683a      	ldr	r2, [r7, #0]
    8c6e:	429a      	cmp	r2, r3
    8c70:	d001      	beq.n	8c76 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
    8c72:	2301      	movs	r3, #1
    8c74:	e030      	b.n	8cd8 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    8c76:	687b      	ldr	r3, [r7, #4]
    8c78:	681b      	ldr	r3, [r3, #0]
    8c7a:	f003 0304 	and.w	r3, r3, #4
    8c7e:	2b00      	cmp	r3, #0
    8c80:	d008      	beq.n	8c94 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
    8c82:	4b18      	ldr	r3, [pc, #96]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8c84:	685b      	ldr	r3, [r3, #4]
    8c86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
    8c8a:	687b      	ldr	r3, [r7, #4]
    8c8c:	68db      	ldr	r3, [r3, #12]
    8c8e:	4915      	ldr	r1, [pc, #84]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8c90:	4313      	orrs	r3, r2
    8c92:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    8c94:	687b      	ldr	r3, [r7, #4]
    8c96:	681b      	ldr	r3, [r3, #0]
    8c98:	f003 0308 	and.w	r3, r3, #8
    8c9c:	2b00      	cmp	r3, #0
    8c9e:	d009      	beq.n	8cb4 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
    8ca0:	4b10      	ldr	r3, [pc, #64]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8ca2:	685b      	ldr	r3, [r3, #4]
    8ca4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
    8ca8:	687b      	ldr	r3, [r7, #4]
    8caa:	691b      	ldr	r3, [r3, #16]
    8cac:	00db      	lsls	r3, r3, #3
    8cae:	490d      	ldr	r1, [pc, #52]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8cb0:	4313      	orrs	r3, r2
    8cb2:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
    8cb4:	f000 f81c 	bl	8cf0 <HAL_RCC_GetSysClockFreq>
    8cb8:	4601      	mov	r1, r0
    8cba:	4b0a      	ldr	r3, [pc, #40]	; (8ce4 <HAL_RCC_ClockConfig+0x20c>)
    8cbc:	685b      	ldr	r3, [r3, #4]
    8cbe:	091b      	lsrs	r3, r3, #4
    8cc0:	f003 030f 	and.w	r3, r3, #15
    8cc4:	4a08      	ldr	r2, [pc, #32]	; (8ce8 <HAL_RCC_ClockConfig+0x210>)
    8cc6:	5cd3      	ldrb	r3, [r2, r3]
    8cc8:	fa21 f303 	lsr.w	r3, r1, r3
    8ccc:	4a07      	ldr	r2, [pc, #28]	; (8cec <HAL_RCC_ClockConfig+0x214>)
    8cce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
    8cd0:	2000      	movs	r0, #0
    8cd2:	f7ff fa21 	bl	8118 <HAL_InitTick>
  
  return HAL_OK;
    8cd6:	2300      	movs	r3, #0
}
    8cd8:	4618      	mov	r0, r3
    8cda:	3710      	adds	r7, #16
    8cdc:	46bd      	mov	sp, r7
    8cde:	bd80      	pop	{r7, pc}
    8ce0:	40022000 	.word	0x40022000
    8ce4:	40021000 	.word	0x40021000
    8ce8:	0000b8f4 	.word	0x0000b8f4
    8cec:	0001bb04 	.word	0x0001bb04

00008cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
    8cf0:	b490      	push	{r4, r7}
    8cf2:	b08a      	sub	sp, #40	; 0x28
    8cf4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
    8cf6:	4b2a      	ldr	r3, [pc, #168]	; (8da0 <HAL_RCC_GetSysClockFreq+0xb0>)
    8cf8:	1d3c      	adds	r4, r7, #4
    8cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    8cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
    8d00:	4b28      	ldr	r3, [pc, #160]	; (8da4 <HAL_RCC_GetSysClockFreq+0xb4>)
    8d02:	881b      	ldrh	r3, [r3, #0]
    8d04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
    8d06:	2300      	movs	r3, #0
    8d08:	61fb      	str	r3, [r7, #28]
    8d0a:	2300      	movs	r3, #0
    8d0c:	61bb      	str	r3, [r7, #24]
    8d0e:	2300      	movs	r3, #0
    8d10:	627b      	str	r3, [r7, #36]	; 0x24
    8d12:	2300      	movs	r3, #0
    8d14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
    8d16:	2300      	movs	r3, #0
    8d18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
    8d1a:	4b23      	ldr	r3, [pc, #140]	; (8da8 <HAL_RCC_GetSysClockFreq+0xb8>)
    8d1c:	685b      	ldr	r3, [r3, #4]
    8d1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
    8d20:	69fb      	ldr	r3, [r7, #28]
    8d22:	f003 030c 	and.w	r3, r3, #12
    8d26:	2b04      	cmp	r3, #4
    8d28:	d002      	beq.n	8d30 <HAL_RCC_GetSysClockFreq+0x40>
    8d2a:	2b08      	cmp	r3, #8
    8d2c:	d003      	beq.n	8d36 <HAL_RCC_GetSysClockFreq+0x46>
    8d2e:	e02d      	b.n	8d8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
    8d30:	4b1e      	ldr	r3, [pc, #120]	; (8dac <HAL_RCC_GetSysClockFreq+0xbc>)
    8d32:	623b      	str	r3, [r7, #32]
      break;
    8d34:	e02d      	b.n	8d92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
    8d36:	69fb      	ldr	r3, [r7, #28]
    8d38:	0c9b      	lsrs	r3, r3, #18
    8d3a:	f003 030f 	and.w	r3, r3, #15
    8d3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
    8d42:	4413      	add	r3, r2
    8d44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
    8d48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
    8d4a:	69fb      	ldr	r3, [r7, #28]
    8d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    8d50:	2b00      	cmp	r3, #0
    8d52:	d013      	beq.n	8d7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
    8d54:	4b14      	ldr	r3, [pc, #80]	; (8da8 <HAL_RCC_GetSysClockFreq+0xb8>)
    8d56:	685b      	ldr	r3, [r3, #4]
    8d58:	0c5b      	lsrs	r3, r3, #17
    8d5a:	f003 0301 	and.w	r3, r3, #1
    8d5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
    8d62:	4413      	add	r3, r2
    8d64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
    8d68:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
    8d6a:	697b      	ldr	r3, [r7, #20]
    8d6c:	4a0f      	ldr	r2, [pc, #60]	; (8dac <HAL_RCC_GetSysClockFreq+0xbc>)
    8d6e:	fb02 f203 	mul.w	r2, r2, r3
    8d72:	69bb      	ldr	r3, [r7, #24]
    8d74:	fbb2 f3f3 	udiv	r3, r2, r3
    8d78:	627b      	str	r3, [r7, #36]	; 0x24
    8d7a:	e004      	b.n	8d86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
    8d7c:	697b      	ldr	r3, [r7, #20]
    8d7e:	4a0c      	ldr	r2, [pc, #48]	; (8db0 <HAL_RCC_GetSysClockFreq+0xc0>)
    8d80:	fb02 f303 	mul.w	r3, r2, r3
    8d84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
    8d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d88:	623b      	str	r3, [r7, #32]
      break;
    8d8a:	e002      	b.n	8d92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
    8d8c:	4b07      	ldr	r3, [pc, #28]	; (8dac <HAL_RCC_GetSysClockFreq+0xbc>)
    8d8e:	623b      	str	r3, [r7, #32]
      break;
    8d90:	bf00      	nop
    }
  }
  return sysclockfreq;
    8d92:	6a3b      	ldr	r3, [r7, #32]
}
    8d94:	4618      	mov	r0, r3
    8d96:	3728      	adds	r7, #40	; 0x28
    8d98:	46bd      	mov	sp, r7
    8d9a:	bc90      	pop	{r4, r7}
    8d9c:	4770      	bx	lr
    8d9e:	bf00      	nop
    8da0:	0000b8e0 	.word	0x0000b8e0
    8da4:	0000b8f0 	.word	0x0000b8f0
    8da8:	40021000 	.word	0x40021000
    8dac:	007a1200 	.word	0x007a1200
    8db0:	003d0900 	.word	0x003d0900

00008db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
    8db4:	b480      	push	{r7}
    8db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
    8db8:	4b02      	ldr	r3, [pc, #8]	; (8dc4 <HAL_RCC_GetHCLKFreq+0x10>)
    8dba:	681b      	ldr	r3, [r3, #0]
}
    8dbc:	4618      	mov	r0, r3
    8dbe:	46bd      	mov	sp, r7
    8dc0:	bc80      	pop	{r7}
    8dc2:	4770      	bx	lr
    8dc4:	0001bb04 	.word	0x0001bb04

00008dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
    8dc8:	b580      	push	{r7, lr}
    8dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
    8dcc:	f7ff fff2 	bl	8db4 <HAL_RCC_GetHCLKFreq>
    8dd0:	4601      	mov	r1, r0
    8dd2:	4b05      	ldr	r3, [pc, #20]	; (8de8 <HAL_RCC_GetPCLK1Freq+0x20>)
    8dd4:	685b      	ldr	r3, [r3, #4]
    8dd6:	0a1b      	lsrs	r3, r3, #8
    8dd8:	f003 0307 	and.w	r3, r3, #7
    8ddc:	4a03      	ldr	r2, [pc, #12]	; (8dec <HAL_RCC_GetPCLK1Freq+0x24>)
    8dde:	5cd3      	ldrb	r3, [r2, r3]
    8de0:	fa21 f303 	lsr.w	r3, r1, r3
}    
    8de4:	4618      	mov	r0, r3
    8de6:	bd80      	pop	{r7, pc}
    8de8:	40021000 	.word	0x40021000
    8dec:	0000b904 	.word	0x0000b904

00008df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
    8df0:	b580      	push	{r7, lr}
    8df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
    8df4:	f7ff ffde 	bl	8db4 <HAL_RCC_GetHCLKFreq>
    8df8:	4601      	mov	r1, r0
    8dfa:	4b05      	ldr	r3, [pc, #20]	; (8e10 <HAL_RCC_GetPCLK2Freq+0x20>)
    8dfc:	685b      	ldr	r3, [r3, #4]
    8dfe:	0adb      	lsrs	r3, r3, #11
    8e00:	f003 0307 	and.w	r3, r3, #7
    8e04:	4a03      	ldr	r2, [pc, #12]	; (8e14 <HAL_RCC_GetPCLK2Freq+0x24>)
    8e06:	5cd3      	ldrb	r3, [r2, r3]
    8e08:	fa21 f303 	lsr.w	r3, r1, r3
} 
    8e0c:	4618      	mov	r0, r3
    8e0e:	bd80      	pop	{r7, pc}
    8e10:	40021000 	.word	0x40021000
    8e14:	0000b904 	.word	0x0000b904

00008e18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
    8e18:	b480      	push	{r7}
    8e1a:	b085      	sub	sp, #20
    8e1c:	af00      	add	r7, sp, #0
    8e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
    8e20:	4b0a      	ldr	r3, [pc, #40]	; (8e4c <RCC_Delay+0x34>)
    8e22:	681b      	ldr	r3, [r3, #0]
    8e24:	4a0a      	ldr	r2, [pc, #40]	; (8e50 <RCC_Delay+0x38>)
    8e26:	fba2 2303 	umull	r2, r3, r2, r3
    8e2a:	0a5b      	lsrs	r3, r3, #9
    8e2c:	687a      	ldr	r2, [r7, #4]
    8e2e:	fb02 f303 	mul.w	r3, r2, r3
    8e32:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    8e34:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
    8e36:	68fb      	ldr	r3, [r7, #12]
    8e38:	1e5a      	subs	r2, r3, #1
    8e3a:	60fa      	str	r2, [r7, #12]
    8e3c:	2b00      	cmp	r3, #0
    8e3e:	d1f9      	bne.n	8e34 <RCC_Delay+0x1c>
}
    8e40:	bf00      	nop
    8e42:	3714      	adds	r7, #20
    8e44:	46bd      	mov	sp, r7
    8e46:	bc80      	pop	{r7}
    8e48:	4770      	bx	lr
    8e4a:	bf00      	nop
    8e4c:	0001bb04 	.word	0x0001bb04
    8e50:	10624dd3 	.word	0x10624dd3

00008e54 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
    8e54:	b580      	push	{r7, lr}
    8e56:	b082      	sub	sp, #8
    8e58:	af00      	add	r7, sp, #0
    8e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
    8e5c:	687b      	ldr	r3, [r7, #4]
    8e5e:	2b00      	cmp	r3, #0
    8e60:	d101      	bne.n	8e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
    8e62:	2301      	movs	r3, #1
    8e64:	e03f      	b.n	8ee6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
    8e66:	687b      	ldr	r3, [r7, #4]
    8e68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
    8e6c:	b2db      	uxtb	r3, r3
    8e6e:	2b00      	cmp	r3, #0
    8e70:	d106      	bne.n	8e80 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
    8e72:	687b      	ldr	r3, [r7, #4]
    8e74:	2200      	movs	r2, #0
    8e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
    8e7a:	6878      	ldr	r0, [r7, #4]
    8e7c:	f000 fd64 	bl	9948 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
    8e80:	687b      	ldr	r3, [r7, #4]
    8e82:	2224      	movs	r2, #36	; 0x24
    8e84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
    8e88:	687b      	ldr	r3, [r7, #4]
    8e8a:	681b      	ldr	r3, [r3, #0]
    8e8c:	68da      	ldr	r2, [r3, #12]
    8e8e:	687b      	ldr	r3, [r7, #4]
    8e90:	681b      	ldr	r3, [r3, #0]
    8e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    8e96:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
    8e98:	6878      	ldr	r0, [r7, #4]
    8e9a:	f000 f829 	bl	8ef0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
    8e9e:	687b      	ldr	r3, [r7, #4]
    8ea0:	681b      	ldr	r3, [r3, #0]
    8ea2:	691a      	ldr	r2, [r3, #16]
    8ea4:	687b      	ldr	r3, [r7, #4]
    8ea6:	681b      	ldr	r3, [r3, #0]
    8ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
    8eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
    8eae:	687b      	ldr	r3, [r7, #4]
    8eb0:	681b      	ldr	r3, [r3, #0]
    8eb2:	695a      	ldr	r2, [r3, #20]
    8eb4:	687b      	ldr	r3, [r7, #4]
    8eb6:	681b      	ldr	r3, [r3, #0]
    8eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
    8ebc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
    8ebe:	687b      	ldr	r3, [r7, #4]
    8ec0:	681b      	ldr	r3, [r3, #0]
    8ec2:	68da      	ldr	r2, [r3, #12]
    8ec4:	687b      	ldr	r3, [r7, #4]
    8ec6:	681b      	ldr	r3, [r3, #0]
    8ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    8ecc:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
    8ece:	687b      	ldr	r3, [r7, #4]
    8ed0:	2200      	movs	r2, #0
    8ed2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
    8ed4:	687b      	ldr	r3, [r7, #4]
    8ed6:	2220      	movs	r2, #32
    8ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
    8edc:	687b      	ldr	r3, [r7, #4]
    8ede:	2220      	movs	r2, #32
    8ee0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
    8ee4:	2300      	movs	r3, #0
}
    8ee6:	4618      	mov	r0, r3
    8ee8:	3708      	adds	r7, #8
    8eea:	46bd      	mov	sp, r7
    8eec:	bd80      	pop	{r7, pc}
	...

00008ef0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
    8ef0:	b5b0      	push	{r4, r5, r7, lr}
    8ef2:	b084      	sub	sp, #16
    8ef4:	af00      	add	r7, sp, #0
    8ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
    8ef8:	2300      	movs	r3, #0
    8efa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
    8efc:	687b      	ldr	r3, [r7, #4]
    8efe:	681b      	ldr	r3, [r3, #0]
    8f00:	691b      	ldr	r3, [r3, #16]
    8f02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
    8f06:	687b      	ldr	r3, [r7, #4]
    8f08:	68da      	ldr	r2, [r3, #12]
    8f0a:	687b      	ldr	r3, [r7, #4]
    8f0c:	681b      	ldr	r3, [r3, #0]
    8f0e:	430a      	orrs	r2, r1
    8f10:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
    8f12:	687b      	ldr	r3, [r7, #4]
    8f14:	689a      	ldr	r2, [r3, #8]
    8f16:	687b      	ldr	r3, [r7, #4]
    8f18:	691b      	ldr	r3, [r3, #16]
    8f1a:	431a      	orrs	r2, r3
    8f1c:	687b      	ldr	r3, [r7, #4]
    8f1e:	695b      	ldr	r3, [r3, #20]
    8f20:	4313      	orrs	r3, r2
    8f22:	68fa      	ldr	r2, [r7, #12]
    8f24:	4313      	orrs	r3, r2
    8f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
    8f28:	687b      	ldr	r3, [r7, #4]
    8f2a:	681b      	ldr	r3, [r3, #0]
    8f2c:	68db      	ldr	r3, [r3, #12]
    8f2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
    8f32:	f023 030c 	bic.w	r3, r3, #12
    8f36:	687a      	ldr	r2, [r7, #4]
    8f38:	6812      	ldr	r2, [r2, #0]
    8f3a:	68f9      	ldr	r1, [r7, #12]
    8f3c:	430b      	orrs	r3, r1
    8f3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
    8f40:	687b      	ldr	r3, [r7, #4]
    8f42:	681b      	ldr	r3, [r3, #0]
    8f44:	695b      	ldr	r3, [r3, #20]
    8f46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
    8f4a:	687b      	ldr	r3, [r7, #4]
    8f4c:	699a      	ldr	r2, [r3, #24]
    8f4e:	687b      	ldr	r3, [r7, #4]
    8f50:	681b      	ldr	r3, [r3, #0]
    8f52:	430a      	orrs	r2, r1
    8f54:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
    8f56:	687b      	ldr	r3, [r7, #4]
    8f58:	681b      	ldr	r3, [r3, #0]
    8f5a:	4a6f      	ldr	r2, [pc, #444]	; (9118 <UART_SetConfig+0x228>)
    8f5c:	4293      	cmp	r3, r2
    8f5e:	d16b      	bne.n	9038 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    8f60:	f7ff ff46 	bl	8df0 <HAL_RCC_GetPCLK2Freq>
    8f64:	4602      	mov	r2, r0
    8f66:	4613      	mov	r3, r2
    8f68:	009b      	lsls	r3, r3, #2
    8f6a:	4413      	add	r3, r2
    8f6c:	009a      	lsls	r2, r3, #2
    8f6e:	441a      	add	r2, r3
    8f70:	687b      	ldr	r3, [r7, #4]
    8f72:	685b      	ldr	r3, [r3, #4]
    8f74:	009b      	lsls	r3, r3, #2
    8f76:	fbb2 f3f3 	udiv	r3, r2, r3
    8f7a:	4a68      	ldr	r2, [pc, #416]	; (911c <UART_SetConfig+0x22c>)
    8f7c:	fba2 2303 	umull	r2, r3, r2, r3
    8f80:	095b      	lsrs	r3, r3, #5
    8f82:	011c      	lsls	r4, r3, #4
    8f84:	f7ff ff34 	bl	8df0 <HAL_RCC_GetPCLK2Freq>
    8f88:	4602      	mov	r2, r0
    8f8a:	4613      	mov	r3, r2
    8f8c:	009b      	lsls	r3, r3, #2
    8f8e:	4413      	add	r3, r2
    8f90:	009a      	lsls	r2, r3, #2
    8f92:	441a      	add	r2, r3
    8f94:	687b      	ldr	r3, [r7, #4]
    8f96:	685b      	ldr	r3, [r3, #4]
    8f98:	009b      	lsls	r3, r3, #2
    8f9a:	fbb2 f5f3 	udiv	r5, r2, r3
    8f9e:	f7ff ff27 	bl	8df0 <HAL_RCC_GetPCLK2Freq>
    8fa2:	4602      	mov	r2, r0
    8fa4:	4613      	mov	r3, r2
    8fa6:	009b      	lsls	r3, r3, #2
    8fa8:	4413      	add	r3, r2
    8faa:	009a      	lsls	r2, r3, #2
    8fac:	441a      	add	r2, r3
    8fae:	687b      	ldr	r3, [r7, #4]
    8fb0:	685b      	ldr	r3, [r3, #4]
    8fb2:	009b      	lsls	r3, r3, #2
    8fb4:	fbb2 f3f3 	udiv	r3, r2, r3
    8fb8:	4a58      	ldr	r2, [pc, #352]	; (911c <UART_SetConfig+0x22c>)
    8fba:	fba2 2303 	umull	r2, r3, r2, r3
    8fbe:	095b      	lsrs	r3, r3, #5
    8fc0:	2264      	movs	r2, #100	; 0x64
    8fc2:	fb02 f303 	mul.w	r3, r2, r3
    8fc6:	1aeb      	subs	r3, r5, r3
    8fc8:	011b      	lsls	r3, r3, #4
    8fca:	3332      	adds	r3, #50	; 0x32
    8fcc:	4a53      	ldr	r2, [pc, #332]	; (911c <UART_SetConfig+0x22c>)
    8fce:	fba2 2303 	umull	r2, r3, r2, r3
    8fd2:	095b      	lsrs	r3, r3, #5
    8fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8fd8:	441c      	add	r4, r3
    8fda:	f7ff ff09 	bl	8df0 <HAL_RCC_GetPCLK2Freq>
    8fde:	4602      	mov	r2, r0
    8fe0:	4613      	mov	r3, r2
    8fe2:	009b      	lsls	r3, r3, #2
    8fe4:	4413      	add	r3, r2
    8fe6:	009a      	lsls	r2, r3, #2
    8fe8:	441a      	add	r2, r3
    8fea:	687b      	ldr	r3, [r7, #4]
    8fec:	685b      	ldr	r3, [r3, #4]
    8fee:	009b      	lsls	r3, r3, #2
    8ff0:	fbb2 f5f3 	udiv	r5, r2, r3
    8ff4:	f7ff fefc 	bl	8df0 <HAL_RCC_GetPCLK2Freq>
    8ff8:	4602      	mov	r2, r0
    8ffa:	4613      	mov	r3, r2
    8ffc:	009b      	lsls	r3, r3, #2
    8ffe:	4413      	add	r3, r2
    9000:	009a      	lsls	r2, r3, #2
    9002:	441a      	add	r2, r3
    9004:	687b      	ldr	r3, [r7, #4]
    9006:	685b      	ldr	r3, [r3, #4]
    9008:	009b      	lsls	r3, r3, #2
    900a:	fbb2 f3f3 	udiv	r3, r2, r3
    900e:	4a43      	ldr	r2, [pc, #268]	; (911c <UART_SetConfig+0x22c>)
    9010:	fba2 2303 	umull	r2, r3, r2, r3
    9014:	095b      	lsrs	r3, r3, #5
    9016:	2264      	movs	r2, #100	; 0x64
    9018:	fb02 f303 	mul.w	r3, r2, r3
    901c:	1aeb      	subs	r3, r5, r3
    901e:	011b      	lsls	r3, r3, #4
    9020:	3332      	adds	r3, #50	; 0x32
    9022:	4a3e      	ldr	r2, [pc, #248]	; (911c <UART_SetConfig+0x22c>)
    9024:	fba2 2303 	umull	r2, r3, r2, r3
    9028:	095b      	lsrs	r3, r3, #5
    902a:	f003 020f 	and.w	r2, r3, #15
    902e:	687b      	ldr	r3, [r7, #4]
    9030:	681b      	ldr	r3, [r3, #0]
    9032:	4422      	add	r2, r4
    9034:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
    9036:	e06a      	b.n	910e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    9038:	f7ff fec6 	bl	8dc8 <HAL_RCC_GetPCLK1Freq>
    903c:	4602      	mov	r2, r0
    903e:	4613      	mov	r3, r2
    9040:	009b      	lsls	r3, r3, #2
    9042:	4413      	add	r3, r2
    9044:	009a      	lsls	r2, r3, #2
    9046:	441a      	add	r2, r3
    9048:	687b      	ldr	r3, [r7, #4]
    904a:	685b      	ldr	r3, [r3, #4]
    904c:	009b      	lsls	r3, r3, #2
    904e:	fbb2 f3f3 	udiv	r3, r2, r3
    9052:	4a32      	ldr	r2, [pc, #200]	; (911c <UART_SetConfig+0x22c>)
    9054:	fba2 2303 	umull	r2, r3, r2, r3
    9058:	095b      	lsrs	r3, r3, #5
    905a:	011c      	lsls	r4, r3, #4
    905c:	f7ff feb4 	bl	8dc8 <HAL_RCC_GetPCLK1Freq>
    9060:	4602      	mov	r2, r0
    9062:	4613      	mov	r3, r2
    9064:	009b      	lsls	r3, r3, #2
    9066:	4413      	add	r3, r2
    9068:	009a      	lsls	r2, r3, #2
    906a:	441a      	add	r2, r3
    906c:	687b      	ldr	r3, [r7, #4]
    906e:	685b      	ldr	r3, [r3, #4]
    9070:	009b      	lsls	r3, r3, #2
    9072:	fbb2 f5f3 	udiv	r5, r2, r3
    9076:	f7ff fea7 	bl	8dc8 <HAL_RCC_GetPCLK1Freq>
    907a:	4602      	mov	r2, r0
    907c:	4613      	mov	r3, r2
    907e:	009b      	lsls	r3, r3, #2
    9080:	4413      	add	r3, r2
    9082:	009a      	lsls	r2, r3, #2
    9084:	441a      	add	r2, r3
    9086:	687b      	ldr	r3, [r7, #4]
    9088:	685b      	ldr	r3, [r3, #4]
    908a:	009b      	lsls	r3, r3, #2
    908c:	fbb2 f3f3 	udiv	r3, r2, r3
    9090:	4a22      	ldr	r2, [pc, #136]	; (911c <UART_SetConfig+0x22c>)
    9092:	fba2 2303 	umull	r2, r3, r2, r3
    9096:	095b      	lsrs	r3, r3, #5
    9098:	2264      	movs	r2, #100	; 0x64
    909a:	fb02 f303 	mul.w	r3, r2, r3
    909e:	1aeb      	subs	r3, r5, r3
    90a0:	011b      	lsls	r3, r3, #4
    90a2:	3332      	adds	r3, #50	; 0x32
    90a4:	4a1d      	ldr	r2, [pc, #116]	; (911c <UART_SetConfig+0x22c>)
    90a6:	fba2 2303 	umull	r2, r3, r2, r3
    90aa:	095b      	lsrs	r3, r3, #5
    90ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    90b0:	441c      	add	r4, r3
    90b2:	f7ff fe89 	bl	8dc8 <HAL_RCC_GetPCLK1Freq>
    90b6:	4602      	mov	r2, r0
    90b8:	4613      	mov	r3, r2
    90ba:	009b      	lsls	r3, r3, #2
    90bc:	4413      	add	r3, r2
    90be:	009a      	lsls	r2, r3, #2
    90c0:	441a      	add	r2, r3
    90c2:	687b      	ldr	r3, [r7, #4]
    90c4:	685b      	ldr	r3, [r3, #4]
    90c6:	009b      	lsls	r3, r3, #2
    90c8:	fbb2 f5f3 	udiv	r5, r2, r3
    90cc:	f7ff fe7c 	bl	8dc8 <HAL_RCC_GetPCLK1Freq>
    90d0:	4602      	mov	r2, r0
    90d2:	4613      	mov	r3, r2
    90d4:	009b      	lsls	r3, r3, #2
    90d6:	4413      	add	r3, r2
    90d8:	009a      	lsls	r2, r3, #2
    90da:	441a      	add	r2, r3
    90dc:	687b      	ldr	r3, [r7, #4]
    90de:	685b      	ldr	r3, [r3, #4]
    90e0:	009b      	lsls	r3, r3, #2
    90e2:	fbb2 f3f3 	udiv	r3, r2, r3
    90e6:	4a0d      	ldr	r2, [pc, #52]	; (911c <UART_SetConfig+0x22c>)
    90e8:	fba2 2303 	umull	r2, r3, r2, r3
    90ec:	095b      	lsrs	r3, r3, #5
    90ee:	2264      	movs	r2, #100	; 0x64
    90f0:	fb02 f303 	mul.w	r3, r2, r3
    90f4:	1aeb      	subs	r3, r5, r3
    90f6:	011b      	lsls	r3, r3, #4
    90f8:	3332      	adds	r3, #50	; 0x32
    90fa:	4a08      	ldr	r2, [pc, #32]	; (911c <UART_SetConfig+0x22c>)
    90fc:	fba2 2303 	umull	r2, r3, r2, r3
    9100:	095b      	lsrs	r3, r3, #5
    9102:	f003 020f 	and.w	r2, r3, #15
    9106:	687b      	ldr	r3, [r7, #4]
    9108:	681b      	ldr	r3, [r3, #0]
    910a:	4422      	add	r2, r4
    910c:	609a      	str	r2, [r3, #8]
}
    910e:	bf00      	nop
    9110:	3710      	adds	r7, #16
    9112:	46bd      	mov	sp, r7
    9114:	bdb0      	pop	{r4, r5, r7, pc}
    9116:	bf00      	nop
    9118:	40013800 	.word	0x40013800
    911c:	51eb851f 	.word	0x51eb851f

00009120 <fft>:
   [7]   Let w.im = -sin(2*PI*m/N)
   [8]   Let v[m] = ve[m] + w*vo[m]
   [9]   Let v[m+N/2] = ve[m] - w*vo[m]
 */
 void fft( complex *v, int n, complex *tmp )
{
    9120:	b5b0      	push	{r4, r5, r7, lr}
    9122:	b08c      	sub	sp, #48	; 0x30
    9124:	af00      	add	r7, sp, #0
    9126:	60f8      	str	r0, [r7, #12]
    9128:	60b9      	str	r1, [r7, #8]
    912a:	607a      	str	r2, [r7, #4]
  if(n>1) {			/* otherwise, do nothing and return */
    912c:	68bb      	ldr	r3, [r7, #8]
    912e:	2b01      	cmp	r3, #1
    9130:	f340 8118 	ble.w	9364 <fft+0x244>
    int k,m;    complex z, w, *vo, *ve;
    ve = tmp; vo = tmp+n/2;
    9134:	687b      	ldr	r3, [r7, #4]
    9136:	627b      	str	r3, [r7, #36]	; 0x24
    9138:	68bb      	ldr	r3, [r7, #8]
    913a:	0fda      	lsrs	r2, r3, #31
    913c:	4413      	add	r3, r2
    913e:	105b      	asrs	r3, r3, #1
    9140:	00db      	lsls	r3, r3, #3
    9142:	687a      	ldr	r2, [r7, #4]
    9144:	4413      	add	r3, r2
    9146:	623b      	str	r3, [r7, #32]

    for(k=0; k<n/2; k++) {
    9148:	2300      	movs	r3, #0
    914a:	62fb      	str	r3, [r7, #44]	; 0x2c
    914c:	e01e      	b.n	918c <fft+0x6c>
      ve[k] = v[2*k];
    914e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9150:	011b      	lsls	r3, r3, #4
    9152:	461a      	mov	r2, r3
    9154:	68fb      	ldr	r3, [r7, #12]
    9156:	1899      	adds	r1, r3, r2
    9158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    915a:	00db      	lsls	r3, r3, #3
    915c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    915e:	4413      	add	r3, r2
    9160:	460a      	mov	r2, r1
    9162:	e892 0003 	ldmia.w	r2, {r0, r1}
    9166:	e883 0003 	stmia.w	r3, {r0, r1}
      vo[k] = v[2*k+1];
    916a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    916c:	011b      	lsls	r3, r3, #4
    916e:	3308      	adds	r3, #8
    9170:	68fa      	ldr	r2, [r7, #12]
    9172:	18d1      	adds	r1, r2, r3
    9174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9176:	00db      	lsls	r3, r3, #3
    9178:	6a3a      	ldr	r2, [r7, #32]
    917a:	4413      	add	r3, r2
    917c:	460a      	mov	r2, r1
    917e:	e892 0003 	ldmia.w	r2, {r0, r1}
    9182:	e883 0003 	stmia.w	r3, {r0, r1}
    for(k=0; k<n/2; k++) {
    9186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9188:	3301      	adds	r3, #1
    918a:	62fb      	str	r3, [r7, #44]	; 0x2c
    918c:	68bb      	ldr	r3, [r7, #8]
    918e:	0fda      	lsrs	r2, r3, #31
    9190:	4413      	add	r3, r2
    9192:	105b      	asrs	r3, r3, #1
    9194:	461a      	mov	r2, r3
    9196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9198:	4293      	cmp	r3, r2
    919a:	dbd8      	blt.n	914e <fft+0x2e>
    }

    fft( ve, n/2, v );		/* FFT on even-indexed elements of v[] */
    919c:	68bb      	ldr	r3, [r7, #8]
    919e:	0fda      	lsrs	r2, r3, #31
    91a0:	4413      	add	r3, r2
    91a2:	105b      	asrs	r3, r3, #1
    91a4:	68fa      	ldr	r2, [r7, #12]
    91a6:	4619      	mov	r1, r3
    91a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    91aa:	f7ff ffb9 	bl	9120 <fft>
    fft( vo, n/2, v );		/* FFT on odd-indexed elements of v[] */
    91ae:	68bb      	ldr	r3, [r7, #8]
    91b0:	0fda      	lsrs	r2, r3, #31
    91b2:	4413      	add	r3, r2
    91b4:	105b      	asrs	r3, r3, #1
    91b6:	68fa      	ldr	r2, [r7, #12]
    91b8:	4619      	mov	r1, r3
    91ba:	6a38      	ldr	r0, [r7, #32]
    91bc:	f7ff ffb0 	bl	9120 <fft>
    for(m=0; m<n/2; m++) {
    91c0:	2300      	movs	r3, #0
    91c2:	62bb      	str	r3, [r7, #40]	; 0x28
    91c4:	e0c4      	b.n	9350 <fft+0x230>
      w.Re = cos(2*PI*m/(double)n);
    91c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    91c8:	f001 fda8 	bl	ad1c <__aeabi_i2d>
    91cc:	a368      	add	r3, pc, #416	; (adr r3, 9370 <fft+0x250>)
    91ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    91d2:	f001 fe0d 	bl	adf0 <__aeabi_dmul>
    91d6:	4603      	mov	r3, r0
    91d8:	460c      	mov	r4, r1
    91da:	4625      	mov	r5, r4
    91dc:	461c      	mov	r4, r3
    91de:	68b8      	ldr	r0, [r7, #8]
    91e0:	f001 fd9c 	bl	ad1c <__aeabi_i2d>
    91e4:	4602      	mov	r2, r0
    91e6:	460b      	mov	r3, r1
    91e8:	4620      	mov	r0, r4
    91ea:	4629      	mov	r1, r5
    91ec:	f001 ff2a 	bl	b044 <__aeabi_ddiv>
    91f0:	4603      	mov	r3, r0
    91f2:	460c      	mov	r4, r1
    91f4:	4618      	mov	r0, r3
    91f6:	4621      	mov	r1, r4
    91f8:	f000 fc1e 	bl	9a38 <cos>
    91fc:	4603      	mov	r3, r0
    91fe:	460c      	mov	r4, r1
    9200:	4618      	mov	r0, r3
    9202:	4621      	mov	r1, r4
    9204:	f002 f8b6 	bl	b374 <__aeabi_d2f>
    9208:	4603      	mov	r3, r0
    920a:	613b      	str	r3, [r7, #16]
      w.Im = -sin(2*PI*m/(double)n);
    920c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    920e:	f001 fd85 	bl	ad1c <__aeabi_i2d>
    9212:	a357      	add	r3, pc, #348	; (adr r3, 9370 <fft+0x250>)
    9214:	e9d3 2300 	ldrd	r2, r3, [r3]
    9218:	f001 fdea 	bl	adf0 <__aeabi_dmul>
    921c:	4603      	mov	r3, r0
    921e:	460c      	mov	r4, r1
    9220:	4625      	mov	r5, r4
    9222:	461c      	mov	r4, r3
    9224:	68b8      	ldr	r0, [r7, #8]
    9226:	f001 fd79 	bl	ad1c <__aeabi_i2d>
    922a:	4602      	mov	r2, r0
    922c:	460b      	mov	r3, r1
    922e:	4620      	mov	r0, r4
    9230:	4629      	mov	r1, r5
    9232:	f001 ff07 	bl	b044 <__aeabi_ddiv>
    9236:	4603      	mov	r3, r0
    9238:	460c      	mov	r4, r1
    923a:	4618      	mov	r0, r3
    923c:	4621      	mov	r1, r4
    923e:	f000 fc31 	bl	9aa4 <sin>
    9242:	4603      	mov	r3, r0
    9244:	460c      	mov	r4, r1
    9246:	4618      	mov	r0, r3
    9248:	4621      	mov	r1, r4
    924a:	f002 f893 	bl	b374 <__aeabi_d2f>
    924e:	4603      	mov	r3, r0
    9250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    9254:	617b      	str	r3, [r7, #20]
      z.Re = w.Re*vo[m].Re - w.Im*vo[m].Im;	/* Re(w*vo[m]) */
    9256:	6938      	ldr	r0, [r7, #16]
    9258:	6abb      	ldr	r3, [r7, #40]	; 0x28
    925a:	00db      	lsls	r3, r3, #3
    925c:	6a3a      	ldr	r2, [r7, #32]
    925e:	4413      	add	r3, r2
    9260:	681b      	ldr	r3, [r3, #0]
    9262:	4619      	mov	r1, r3
    9264:	f002 f9e4 	bl	b630 <__aeabi_fmul>
    9268:	4603      	mov	r3, r0
    926a:	461c      	mov	r4, r3
    926c:	6978      	ldr	r0, [r7, #20]
    926e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9270:	00db      	lsls	r3, r3, #3
    9272:	6a3a      	ldr	r2, [r7, #32]
    9274:	4413      	add	r3, r2
    9276:	685b      	ldr	r3, [r3, #4]
    9278:	4619      	mov	r1, r3
    927a:	f002 f9d9 	bl	b630 <__aeabi_fmul>
    927e:	4603      	mov	r3, r0
    9280:	4619      	mov	r1, r3
    9282:	4620      	mov	r0, r4
    9284:	f002 f8ca 	bl	b41c <__aeabi_fsub>
    9288:	4603      	mov	r3, r0
    928a:	61bb      	str	r3, [r7, #24]
      z.Im = w.Re*vo[m].Im + w.Im*vo[m].Re;	/* Im(w*vo[m]) */
    928c:	6938      	ldr	r0, [r7, #16]
    928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9290:	00db      	lsls	r3, r3, #3
    9292:	6a3a      	ldr	r2, [r7, #32]
    9294:	4413      	add	r3, r2
    9296:	685b      	ldr	r3, [r3, #4]
    9298:	4619      	mov	r1, r3
    929a:	f002 f9c9 	bl	b630 <__aeabi_fmul>
    929e:	4603      	mov	r3, r0
    92a0:	461c      	mov	r4, r3
    92a2:	6978      	ldr	r0, [r7, #20]
    92a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    92a6:	00db      	lsls	r3, r3, #3
    92a8:	6a3a      	ldr	r2, [r7, #32]
    92aa:	4413      	add	r3, r2
    92ac:	681b      	ldr	r3, [r3, #0]
    92ae:	4619      	mov	r1, r3
    92b0:	f002 f9be 	bl	b630 <__aeabi_fmul>
    92b4:	4603      	mov	r3, r0
    92b6:	4619      	mov	r1, r3
    92b8:	4620      	mov	r0, r4
    92ba:	f002 f8b1 	bl	b420 <__addsf3>
    92be:	4603      	mov	r3, r0
    92c0:	61fb      	str	r3, [r7, #28]
      v[  m  ].Re = ve[m].Re + z.Re;
    92c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    92c4:	00db      	lsls	r3, r3, #3
    92c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    92c8:	4413      	add	r3, r2
    92ca:	6818      	ldr	r0, [r3, #0]
    92cc:	69b9      	ldr	r1, [r7, #24]
    92ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    92d0:	00db      	lsls	r3, r3, #3
    92d2:	68fa      	ldr	r2, [r7, #12]
    92d4:	18d4      	adds	r4, r2, r3
    92d6:	f002 f8a3 	bl	b420 <__addsf3>
    92da:	4603      	mov	r3, r0
    92dc:	6023      	str	r3, [r4, #0]
      v[  m  ].Im = ve[m].Im + z.Im;
    92de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    92e0:	00db      	lsls	r3, r3, #3
    92e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    92e4:	4413      	add	r3, r2
    92e6:	6858      	ldr	r0, [r3, #4]
    92e8:	69f9      	ldr	r1, [r7, #28]
    92ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    92ec:	00db      	lsls	r3, r3, #3
    92ee:	68fa      	ldr	r2, [r7, #12]
    92f0:	18d4      	adds	r4, r2, r3
    92f2:	f002 f895 	bl	b420 <__addsf3>
    92f6:	4603      	mov	r3, r0
    92f8:	6063      	str	r3, [r4, #4]
      v[m+n/2].Re = ve[m].Re - z.Re;
    92fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    92fc:	00db      	lsls	r3, r3, #3
    92fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9300:	4413      	add	r3, r2
    9302:	6818      	ldr	r0, [r3, #0]
    9304:	69b9      	ldr	r1, [r7, #24]
    9306:	68bb      	ldr	r3, [r7, #8]
    9308:	0fda      	lsrs	r2, r3, #31
    930a:	4413      	add	r3, r2
    930c:	105b      	asrs	r3, r3, #1
    930e:	461a      	mov	r2, r3
    9310:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9312:	4413      	add	r3, r2
    9314:	00db      	lsls	r3, r3, #3
    9316:	68fa      	ldr	r2, [r7, #12]
    9318:	18d4      	adds	r4, r2, r3
    931a:	f002 f87f 	bl	b41c <__aeabi_fsub>
    931e:	4603      	mov	r3, r0
    9320:	6023      	str	r3, [r4, #0]
      v[m+n/2].Im = ve[m].Im - z.Im;
    9322:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9324:	00db      	lsls	r3, r3, #3
    9326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9328:	4413      	add	r3, r2
    932a:	6858      	ldr	r0, [r3, #4]
    932c:	69f9      	ldr	r1, [r7, #28]
    932e:	68bb      	ldr	r3, [r7, #8]
    9330:	0fda      	lsrs	r2, r3, #31
    9332:	4413      	add	r3, r2
    9334:	105b      	asrs	r3, r3, #1
    9336:	461a      	mov	r2, r3
    9338:	6abb      	ldr	r3, [r7, #40]	; 0x28
    933a:	4413      	add	r3, r2
    933c:	00db      	lsls	r3, r3, #3
    933e:	68fa      	ldr	r2, [r7, #12]
    9340:	18d4      	adds	r4, r2, r3
    9342:	f002 f86b 	bl	b41c <__aeabi_fsub>
    9346:	4603      	mov	r3, r0
    9348:	6063      	str	r3, [r4, #4]
    for(m=0; m<n/2; m++) {
    934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    934c:	3301      	adds	r3, #1
    934e:	62bb      	str	r3, [r7, #40]	; 0x28
    9350:	68bb      	ldr	r3, [r7, #8]
    9352:	0fda      	lsrs	r2, r3, #31
    9354:	4413      	add	r3, r2
    9356:	105b      	asrs	r3, r3, #1
    9358:	461a      	mov	r2, r3
    935a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    935c:	4293      	cmp	r3, r2
    935e:	f6ff af32 	blt.w	91c6 <fft+0xa6>
    }
  }
  return;
    9362:	bf00      	nop
    9364:	bf00      	nop
}
    9366:	3730      	adds	r7, #48	; 0x30
    9368:	46bd      	mov	sp, r7
    936a:	bdb0      	pop	{r4, r5, r7, pc}
    936c:	f3af 8000 	nop.w
    9370:	54442d18 	.word	0x54442d18
    9374:	401921fb 	.word	0x401921fb

00009378 <ifft>:
   [8]   Let v[m] = ve[m] + w*vo[m]
   [9]   Let v[m+N/2] = ve[m] - w*vo[m]
 */

 void ifft( complex *v, int n, complex *tmp )
{
    9378:	b5b0      	push	{r4, r5, r7, lr}
    937a:	b08c      	sub	sp, #48	; 0x30
    937c:	af00      	add	r7, sp, #0
    937e:	60f8      	str	r0, [r7, #12]
    9380:	60b9      	str	r1, [r7, #8]
    9382:	607a      	str	r2, [r7, #4]
  if(n>1) {			/* otherwise, do nothing and return */
    9384:	68bb      	ldr	r3, [r7, #8]
    9386:	2b01      	cmp	r3, #1
    9388:	f340 8116 	ble.w	95b8 <ifft+0x240>
    int k,m;    complex z, w, *vo, *ve;
    ve = tmp; vo = tmp+n/2;
    938c:	687b      	ldr	r3, [r7, #4]
    938e:	627b      	str	r3, [r7, #36]	; 0x24
    9390:	68bb      	ldr	r3, [r7, #8]
    9392:	0fda      	lsrs	r2, r3, #31
    9394:	4413      	add	r3, r2
    9396:	105b      	asrs	r3, r3, #1
    9398:	00db      	lsls	r3, r3, #3
    939a:	687a      	ldr	r2, [r7, #4]
    939c:	4413      	add	r3, r2
    939e:	623b      	str	r3, [r7, #32]
    for(k=0; k<n/2; k++) {
    93a0:	2300      	movs	r3, #0
    93a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    93a4:	e01e      	b.n	93e4 <ifft+0x6c>
      ve[k] = v[2*k];
    93a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    93a8:	011b      	lsls	r3, r3, #4
    93aa:	461a      	mov	r2, r3
    93ac:	68fb      	ldr	r3, [r7, #12]
    93ae:	1899      	adds	r1, r3, r2
    93b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    93b2:	00db      	lsls	r3, r3, #3
    93b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    93b6:	4413      	add	r3, r2
    93b8:	460a      	mov	r2, r1
    93ba:	e892 0003 	ldmia.w	r2, {r0, r1}
    93be:	e883 0003 	stmia.w	r3, {r0, r1}
      vo[k] = v[2*k+1];
    93c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    93c4:	011b      	lsls	r3, r3, #4
    93c6:	3308      	adds	r3, #8
    93c8:	68fa      	ldr	r2, [r7, #12]
    93ca:	18d1      	adds	r1, r2, r3
    93cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    93ce:	00db      	lsls	r3, r3, #3
    93d0:	6a3a      	ldr	r2, [r7, #32]
    93d2:	4413      	add	r3, r2
    93d4:	460a      	mov	r2, r1
    93d6:	e892 0003 	ldmia.w	r2, {r0, r1}
    93da:	e883 0003 	stmia.w	r3, {r0, r1}
    for(k=0; k<n/2; k++) {
    93de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    93e0:	3301      	adds	r3, #1
    93e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    93e4:	68bb      	ldr	r3, [r7, #8]
    93e6:	0fda      	lsrs	r2, r3, #31
    93e8:	4413      	add	r3, r2
    93ea:	105b      	asrs	r3, r3, #1
    93ec:	461a      	mov	r2, r3
    93ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    93f0:	4293      	cmp	r3, r2
    93f2:	dbd8      	blt.n	93a6 <ifft+0x2e>
    }
    ifft( ve, n/2, v );		/* FFT on even-indexed elements of v[] */
    93f4:	68bb      	ldr	r3, [r7, #8]
    93f6:	0fda      	lsrs	r2, r3, #31
    93f8:	4413      	add	r3, r2
    93fa:	105b      	asrs	r3, r3, #1
    93fc:	68fa      	ldr	r2, [r7, #12]
    93fe:	4619      	mov	r1, r3
    9400:	6a78      	ldr	r0, [r7, #36]	; 0x24
    9402:	f7ff ffb9 	bl	9378 <ifft>
    ifft( vo, n/2, v );		/* FFT on odd-indexed elements of v[] */
    9406:	68bb      	ldr	r3, [r7, #8]
    9408:	0fda      	lsrs	r2, r3, #31
    940a:	4413      	add	r3, r2
    940c:	105b      	asrs	r3, r3, #1
    940e:	68fa      	ldr	r2, [r7, #12]
    9410:	4619      	mov	r1, r3
    9412:	6a38      	ldr	r0, [r7, #32]
    9414:	f7ff ffb0 	bl	9378 <ifft>
    for(m=0; m<n/2; m++) {
    9418:	2300      	movs	r3, #0
    941a:	62bb      	str	r3, [r7, #40]	; 0x28
    941c:	e0c2      	b.n	95a4 <ifft+0x22c>
      w.Re = cos(2*PI*m/(double)n);
    941e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    9420:	f001 fc7c 	bl	ad1c <__aeabi_i2d>
    9424:	a366      	add	r3, pc, #408	; (adr r3, 95c0 <ifft+0x248>)
    9426:	e9d3 2300 	ldrd	r2, r3, [r3]
    942a:	f001 fce1 	bl	adf0 <__aeabi_dmul>
    942e:	4603      	mov	r3, r0
    9430:	460c      	mov	r4, r1
    9432:	4625      	mov	r5, r4
    9434:	461c      	mov	r4, r3
    9436:	68b8      	ldr	r0, [r7, #8]
    9438:	f001 fc70 	bl	ad1c <__aeabi_i2d>
    943c:	4602      	mov	r2, r0
    943e:	460b      	mov	r3, r1
    9440:	4620      	mov	r0, r4
    9442:	4629      	mov	r1, r5
    9444:	f001 fdfe 	bl	b044 <__aeabi_ddiv>
    9448:	4603      	mov	r3, r0
    944a:	460c      	mov	r4, r1
    944c:	4618      	mov	r0, r3
    944e:	4621      	mov	r1, r4
    9450:	f000 faf2 	bl	9a38 <cos>
    9454:	4603      	mov	r3, r0
    9456:	460c      	mov	r4, r1
    9458:	4618      	mov	r0, r3
    945a:	4621      	mov	r1, r4
    945c:	f001 ff8a 	bl	b374 <__aeabi_d2f>
    9460:	4603      	mov	r3, r0
    9462:	613b      	str	r3, [r7, #16]
      w.Im = sin(2*PI*m/(double)n);
    9464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    9466:	f001 fc59 	bl	ad1c <__aeabi_i2d>
    946a:	a355      	add	r3, pc, #340	; (adr r3, 95c0 <ifft+0x248>)
    946c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9470:	f001 fcbe 	bl	adf0 <__aeabi_dmul>
    9474:	4603      	mov	r3, r0
    9476:	460c      	mov	r4, r1
    9478:	4625      	mov	r5, r4
    947a:	461c      	mov	r4, r3
    947c:	68b8      	ldr	r0, [r7, #8]
    947e:	f001 fc4d 	bl	ad1c <__aeabi_i2d>
    9482:	4602      	mov	r2, r0
    9484:	460b      	mov	r3, r1
    9486:	4620      	mov	r0, r4
    9488:	4629      	mov	r1, r5
    948a:	f001 fddb 	bl	b044 <__aeabi_ddiv>
    948e:	4603      	mov	r3, r0
    9490:	460c      	mov	r4, r1
    9492:	4618      	mov	r0, r3
    9494:	4621      	mov	r1, r4
    9496:	f000 fb05 	bl	9aa4 <sin>
    949a:	4603      	mov	r3, r0
    949c:	460c      	mov	r4, r1
    949e:	4618      	mov	r0, r3
    94a0:	4621      	mov	r1, r4
    94a2:	f001 ff67 	bl	b374 <__aeabi_d2f>
    94a6:	4603      	mov	r3, r0
    94a8:	617b      	str	r3, [r7, #20]
      z.Re = w.Re*vo[m].Re - w.Im*vo[m].Im;	/* Re(w*vo[m]) */
    94aa:	6938      	ldr	r0, [r7, #16]
    94ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94ae:	00db      	lsls	r3, r3, #3
    94b0:	6a3a      	ldr	r2, [r7, #32]
    94b2:	4413      	add	r3, r2
    94b4:	681b      	ldr	r3, [r3, #0]
    94b6:	4619      	mov	r1, r3
    94b8:	f002 f8ba 	bl	b630 <__aeabi_fmul>
    94bc:	4603      	mov	r3, r0
    94be:	461c      	mov	r4, r3
    94c0:	6978      	ldr	r0, [r7, #20]
    94c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94c4:	00db      	lsls	r3, r3, #3
    94c6:	6a3a      	ldr	r2, [r7, #32]
    94c8:	4413      	add	r3, r2
    94ca:	685b      	ldr	r3, [r3, #4]
    94cc:	4619      	mov	r1, r3
    94ce:	f002 f8af 	bl	b630 <__aeabi_fmul>
    94d2:	4603      	mov	r3, r0
    94d4:	4619      	mov	r1, r3
    94d6:	4620      	mov	r0, r4
    94d8:	f001 ffa0 	bl	b41c <__aeabi_fsub>
    94dc:	4603      	mov	r3, r0
    94de:	61bb      	str	r3, [r7, #24]
      z.Im = w.Re*vo[m].Im + w.Im*vo[m].Re;	/* Im(w*vo[m]) */
    94e0:	6938      	ldr	r0, [r7, #16]
    94e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94e4:	00db      	lsls	r3, r3, #3
    94e6:	6a3a      	ldr	r2, [r7, #32]
    94e8:	4413      	add	r3, r2
    94ea:	685b      	ldr	r3, [r3, #4]
    94ec:	4619      	mov	r1, r3
    94ee:	f002 f89f 	bl	b630 <__aeabi_fmul>
    94f2:	4603      	mov	r3, r0
    94f4:	461c      	mov	r4, r3
    94f6:	6978      	ldr	r0, [r7, #20]
    94f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    94fa:	00db      	lsls	r3, r3, #3
    94fc:	6a3a      	ldr	r2, [r7, #32]
    94fe:	4413      	add	r3, r2
    9500:	681b      	ldr	r3, [r3, #0]
    9502:	4619      	mov	r1, r3
    9504:	f002 f894 	bl	b630 <__aeabi_fmul>
    9508:	4603      	mov	r3, r0
    950a:	4619      	mov	r1, r3
    950c:	4620      	mov	r0, r4
    950e:	f001 ff87 	bl	b420 <__addsf3>
    9512:	4603      	mov	r3, r0
    9514:	61fb      	str	r3, [r7, #28]
      v[  m  ].Re = ve[m].Re + z.Re;
    9516:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9518:	00db      	lsls	r3, r3, #3
    951a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    951c:	4413      	add	r3, r2
    951e:	6818      	ldr	r0, [r3, #0]
    9520:	69b9      	ldr	r1, [r7, #24]
    9522:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9524:	00db      	lsls	r3, r3, #3
    9526:	68fa      	ldr	r2, [r7, #12]
    9528:	18d4      	adds	r4, r2, r3
    952a:	f001 ff79 	bl	b420 <__addsf3>
    952e:	4603      	mov	r3, r0
    9530:	6023      	str	r3, [r4, #0]
      v[  m  ].Im = ve[m].Im + z.Im;
    9532:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9534:	00db      	lsls	r3, r3, #3
    9536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9538:	4413      	add	r3, r2
    953a:	6858      	ldr	r0, [r3, #4]
    953c:	69f9      	ldr	r1, [r7, #28]
    953e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9540:	00db      	lsls	r3, r3, #3
    9542:	68fa      	ldr	r2, [r7, #12]
    9544:	18d4      	adds	r4, r2, r3
    9546:	f001 ff6b 	bl	b420 <__addsf3>
    954a:	4603      	mov	r3, r0
    954c:	6063      	str	r3, [r4, #4]
      v[m+n/2].Re = ve[m].Re - z.Re;
    954e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9550:	00db      	lsls	r3, r3, #3
    9552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9554:	4413      	add	r3, r2
    9556:	6818      	ldr	r0, [r3, #0]
    9558:	69b9      	ldr	r1, [r7, #24]
    955a:	68bb      	ldr	r3, [r7, #8]
    955c:	0fda      	lsrs	r2, r3, #31
    955e:	4413      	add	r3, r2
    9560:	105b      	asrs	r3, r3, #1
    9562:	461a      	mov	r2, r3
    9564:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9566:	4413      	add	r3, r2
    9568:	00db      	lsls	r3, r3, #3
    956a:	68fa      	ldr	r2, [r7, #12]
    956c:	18d4      	adds	r4, r2, r3
    956e:	f001 ff55 	bl	b41c <__aeabi_fsub>
    9572:	4603      	mov	r3, r0
    9574:	6023      	str	r3, [r4, #0]
      v[m+n/2].Im = ve[m].Im - z.Im;
    9576:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9578:	00db      	lsls	r3, r3, #3
    957a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    957c:	4413      	add	r3, r2
    957e:	6858      	ldr	r0, [r3, #4]
    9580:	69f9      	ldr	r1, [r7, #28]
    9582:	68bb      	ldr	r3, [r7, #8]
    9584:	0fda      	lsrs	r2, r3, #31
    9586:	4413      	add	r3, r2
    9588:	105b      	asrs	r3, r3, #1
    958a:	461a      	mov	r2, r3
    958c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    958e:	4413      	add	r3, r2
    9590:	00db      	lsls	r3, r3, #3
    9592:	68fa      	ldr	r2, [r7, #12]
    9594:	18d4      	adds	r4, r2, r3
    9596:	f001 ff41 	bl	b41c <__aeabi_fsub>
    959a:	4603      	mov	r3, r0
    959c:	6063      	str	r3, [r4, #4]
    for(m=0; m<n/2; m++) {
    959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95a0:	3301      	adds	r3, #1
    95a2:	62bb      	str	r3, [r7, #40]	; 0x28
    95a4:	68bb      	ldr	r3, [r7, #8]
    95a6:	0fda      	lsrs	r2, r3, #31
    95a8:	4413      	add	r3, r2
    95aa:	105b      	asrs	r3, r3, #1
    95ac:	461a      	mov	r2, r3
    95ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95b0:	4293      	cmp	r3, r2
    95b2:	f6ff af34 	blt.w	941e <ifft+0xa6>
    }
  }
  return;
    95b6:	bf00      	nop
    95b8:	bf00      	nop
}
    95ba:	3730      	adds	r7, #48	; 0x30
    95bc:	46bd      	mov	sp, r7
    95be:	bdb0      	pop	{r4, r5, r7, pc}
    95c0:	54442d18 	.word	0x54442d18
    95c4:	401921fb 	.word	0x401921fb

000095c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
    95c8:	b590      	push	{r4, r7, lr}
    95ca:	b0b3      	sub	sp, #204	; 0xcc
    95cc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
    95ce:	f7fe fd8d 	bl	80ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
    95d2:	f000 f8ef 	bl	97b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
    95d6:	f000 f95d 	bl	9894 <MX_GPIO_Init>
  MX_USART1_UART_Init();
    95da:	f000 f931 	bl	9840 <MX_USART1_UART_Init>

    complex v[N], v1[N], scratch[N];
    int k;

    /* Fill v[] with a function of known FFT: */
    for(k=0; k<N; k++) {
    95de:	2300      	movs	r3, #0
    95e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    95e4:	e0b6      	b.n	9754 <main+0x18c>
      v[k].Re = 0.125*cos(2*PI*k/(double)N);
    95e6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
    95ea:	f001 fb97 	bl	ad1c <__aeabi_i2d>
    95ee:	a36a      	add	r3, pc, #424	; (adr r3, 9798 <main+0x1d0>)
    95f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    95f4:	f001 fbfc 	bl	adf0 <__aeabi_dmul>
    95f8:	4603      	mov	r3, r0
    95fa:	460c      	mov	r4, r1
    95fc:	4618      	mov	r0, r3
    95fe:	4621      	mov	r1, r4
    9600:	f04f 0200 	mov.w	r2, #0
    9604:	4b6a      	ldr	r3, [pc, #424]	; (97b0 <main+0x1e8>)
    9606:	f001 fd1d 	bl	b044 <__aeabi_ddiv>
    960a:	4603      	mov	r3, r0
    960c:	460c      	mov	r4, r1
    960e:	4618      	mov	r0, r3
    9610:	4621      	mov	r1, r4
    9612:	f000 fa11 	bl	9a38 <cos>
    9616:	f04f 0200 	mov.w	r2, #0
    961a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    961e:	f001 fbe7 	bl	adf0 <__aeabi_dmul>
    9622:	4603      	mov	r3, r0
    9624:	460c      	mov	r4, r1
    9626:	4618      	mov	r0, r3
    9628:	4621      	mov	r1, r4
    962a:	f001 fea3 	bl	b374 <__aeabi_d2f>
    962e:	4602      	mov	r2, r0
    9630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    9634:	00db      	lsls	r3, r3, #3
    9636:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
    963a:	440b      	add	r3, r1
    963c:	f843 2c44 	str.w	r2, [r3, #-68]
      v[k].Im = 0.125*sin(2*PI*k/(double)N);
    9640:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
    9644:	f001 fb6a 	bl	ad1c <__aeabi_i2d>
    9648:	a353      	add	r3, pc, #332	; (adr r3, 9798 <main+0x1d0>)
    964a:	e9d3 2300 	ldrd	r2, r3, [r3]
    964e:	f001 fbcf 	bl	adf0 <__aeabi_dmul>
    9652:	4603      	mov	r3, r0
    9654:	460c      	mov	r4, r1
    9656:	4618      	mov	r0, r3
    9658:	4621      	mov	r1, r4
    965a:	f04f 0200 	mov.w	r2, #0
    965e:	4b54      	ldr	r3, [pc, #336]	; (97b0 <main+0x1e8>)
    9660:	f001 fcf0 	bl	b044 <__aeabi_ddiv>
    9664:	4603      	mov	r3, r0
    9666:	460c      	mov	r4, r1
    9668:	4618      	mov	r0, r3
    966a:	4621      	mov	r1, r4
    966c:	f000 fa1a 	bl	9aa4 <sin>
    9670:	f04f 0200 	mov.w	r2, #0
    9674:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    9678:	f001 fbba 	bl	adf0 <__aeabi_dmul>
    967c:	4603      	mov	r3, r0
    967e:	460c      	mov	r4, r1
    9680:	4618      	mov	r0, r3
    9682:	4621      	mov	r1, r4
    9684:	f001 fe76 	bl	b374 <__aeabi_d2f>
    9688:	4602      	mov	r2, r0
    968a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    968e:	00db      	lsls	r3, r3, #3
    9690:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
    9694:	440b      	add	r3, r1
    9696:	f843 2c40 	str.w	r2, [r3, #-64]
      v1[k].Re =  0.3*cos(2*PI*k/(double)N);
    969a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
    969e:	f001 fb3d 	bl	ad1c <__aeabi_i2d>
    96a2:	a33d      	add	r3, pc, #244	; (adr r3, 9798 <main+0x1d0>)
    96a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    96a8:	f001 fba2 	bl	adf0 <__aeabi_dmul>
    96ac:	4603      	mov	r3, r0
    96ae:	460c      	mov	r4, r1
    96b0:	4618      	mov	r0, r3
    96b2:	4621      	mov	r1, r4
    96b4:	f04f 0200 	mov.w	r2, #0
    96b8:	4b3d      	ldr	r3, [pc, #244]	; (97b0 <main+0x1e8>)
    96ba:	f001 fcc3 	bl	b044 <__aeabi_ddiv>
    96be:	4603      	mov	r3, r0
    96c0:	460c      	mov	r4, r1
    96c2:	4618      	mov	r0, r3
    96c4:	4621      	mov	r1, r4
    96c6:	f000 f9b7 	bl	9a38 <cos>
    96ca:	a335      	add	r3, pc, #212	; (adr r3, 97a0 <main+0x1d8>)
    96cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    96d0:	f001 fb8e 	bl	adf0 <__aeabi_dmul>
    96d4:	4603      	mov	r3, r0
    96d6:	460c      	mov	r4, r1
    96d8:	4618      	mov	r0, r3
    96da:	4621      	mov	r1, r4
    96dc:	f001 fe4a 	bl	b374 <__aeabi_d2f>
    96e0:	4602      	mov	r2, r0
    96e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    96e6:	00db      	lsls	r3, r3, #3
    96e8:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
    96ec:	440b      	add	r3, r1
    96ee:	f843 2c84 	str.w	r2, [r3, #-132]
      v1[k].Im = -0.3*sin(2*PI*k/(double)N);
    96f2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
    96f6:	f001 fb11 	bl	ad1c <__aeabi_i2d>
    96fa:	a327      	add	r3, pc, #156	; (adr r3, 9798 <main+0x1d0>)
    96fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    9700:	f001 fb76 	bl	adf0 <__aeabi_dmul>
    9704:	4603      	mov	r3, r0
    9706:	460c      	mov	r4, r1
    9708:	4618      	mov	r0, r3
    970a:	4621      	mov	r1, r4
    970c:	f04f 0200 	mov.w	r2, #0
    9710:	4b27      	ldr	r3, [pc, #156]	; (97b0 <main+0x1e8>)
    9712:	f001 fc97 	bl	b044 <__aeabi_ddiv>
    9716:	4603      	mov	r3, r0
    9718:	460c      	mov	r4, r1
    971a:	4618      	mov	r0, r3
    971c:	4621      	mov	r1, r4
    971e:	f000 f9c1 	bl	9aa4 <sin>
    9722:	a321      	add	r3, pc, #132	; (adr r3, 97a8 <main+0x1e0>)
    9724:	e9d3 2300 	ldrd	r2, r3, [r3]
    9728:	f001 fb62 	bl	adf0 <__aeabi_dmul>
    972c:	4603      	mov	r3, r0
    972e:	460c      	mov	r4, r1
    9730:	4618      	mov	r0, r3
    9732:	4621      	mov	r1, r4
    9734:	f001 fe1e 	bl	b374 <__aeabi_d2f>
    9738:	4602      	mov	r2, r0
    973a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    973e:	00db      	lsls	r3, r3, #3
    9740:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
    9744:	440b      	add	r3, r1
    9746:	f843 2c80 	str.w	r2, [r3, #-128]
    for(k=0; k<N; k++) {
    974a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    974e:	3301      	adds	r3, #1
    9750:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    9754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    9758:	2b07      	cmp	r3, #7
    975a:	f77f af44 	ble.w	95e6 <main+0x1e>
    }

      /* FFT, iFFT of v[]: */
      fft( v, N, scratch );
    975e:	1d3a      	adds	r2, r7, #4
    9760:	f107 0384 	add.w	r3, r7, #132	; 0x84
    9764:	2108      	movs	r1, #8
    9766:	4618      	mov	r0, r3
    9768:	f7ff fcda 	bl	9120 <fft>
      ifft( v, N, scratch );
    976c:	1d3a      	adds	r2, r7, #4
    976e:	f107 0384 	add.w	r3, r7, #132	; 0x84
    9772:	2108      	movs	r1, #8
    9774:	4618      	mov	r0, r3
    9776:	f7ff fdff 	bl	9378 <ifft>

      /* FFT, iFFT of v1[]: */
      fft( v1, N, scratch );
    977a:	1d3a      	adds	r2, r7, #4
    977c:	f107 0344 	add.w	r3, r7, #68	; 0x44
    9780:	2108      	movs	r1, #8
    9782:	4618      	mov	r0, r3
    9784:	f7ff fccc 	bl	9120 <fft>
      ifft( v1, N, scratch );
    9788:	1d3a      	adds	r2, r7, #4
    978a:	f107 0344 	add.w	r3, r7, #68	; 0x44
    978e:	2108      	movs	r1, #8
    9790:	4618      	mov	r0, r3
    9792:	f7ff fdf1 	bl	9378 <ifft>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    9796:	e7fe      	b.n	9796 <main+0x1ce>
    9798:	54442d18 	.word	0x54442d18
    979c:	401921fb 	.word	0x401921fb
    97a0:	33333333 	.word	0x33333333
    97a4:	3fd33333 	.word	0x3fd33333
    97a8:	33333333 	.word	0x33333333
    97ac:	bfd33333 	.word	0xbfd33333
    97b0:	40200000 	.word	0x40200000

000097b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
    97b4:	b580      	push	{r7, lr}
    97b6:	b090      	sub	sp, #64	; 0x40
    97b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    97ba:	f107 0318 	add.w	r3, r7, #24
    97be:	2228      	movs	r2, #40	; 0x28
    97c0:	2100      	movs	r1, #0
    97c2:	4618      	mov	r0, r3
    97c4:	f000 f930 	bl	9a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    97c8:	1d3b      	adds	r3, r7, #4
    97ca:	2200      	movs	r2, #0
    97cc:	601a      	str	r2, [r3, #0]
    97ce:	605a      	str	r2, [r3, #4]
    97d0:	609a      	str	r2, [r3, #8]
    97d2:	60da      	str	r2, [r3, #12]
    97d4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    97d6:	2301      	movs	r3, #1
    97d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    97da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    97de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    97e0:	2300      	movs	r3, #0
    97e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    97e4:	2301      	movs	r3, #1
    97e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    97e8:	2302      	movs	r3, #2
    97ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    97ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    97f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
    97f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
    97f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    97f8:	f107 0318 	add.w	r3, r7, #24
    97fc:	4618      	mov	r0, r3
    97fe:	f7fe ff07 	bl	8610 <HAL_RCC_OscConfig>
    9802:	4603      	mov	r3, r0
    9804:	2b00      	cmp	r3, #0
    9806:	d001      	beq.n	980c <SystemClock_Config+0x58>
  {
    Error_Handler();
    9808:	f000 f866 	bl	98d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    980c:	230f      	movs	r3, #15
    980e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    9810:	2302      	movs	r3, #2
    9812:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    9814:	2300      	movs	r3, #0
    9816:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    9818:	f44f 6380 	mov.w	r3, #1024	; 0x400
    981c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
    981e:	2300      	movs	r3, #0
    9820:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
    9822:	1d3b      	adds	r3, r7, #4
    9824:	2102      	movs	r1, #2
    9826:	4618      	mov	r0, r3
    9828:	f7ff f956 	bl	8ad8 <HAL_RCC_ClockConfig>
    982c:	4603      	mov	r3, r0
    982e:	2b00      	cmp	r3, #0
    9830:	d001      	beq.n	9836 <SystemClock_Config+0x82>
  {
    Error_Handler();
    9832:	f000 f851 	bl	98d8 <Error_Handler>
  }
}
    9836:	bf00      	nop
    9838:	3740      	adds	r7, #64	; 0x40
    983a:	46bd      	mov	sp, r7
    983c:	bd80      	pop	{r7, pc}
	...

00009840 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
    9840:	b580      	push	{r7, lr}
    9842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
    9844:	4b11      	ldr	r3, [pc, #68]	; (988c <MX_USART1_UART_Init+0x4c>)
    9846:	4a12      	ldr	r2, [pc, #72]	; (9890 <MX_USART1_UART_Init+0x50>)
    9848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
    984a:	4b10      	ldr	r3, [pc, #64]	; (988c <MX_USART1_UART_Init+0x4c>)
    984c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    9850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
    9852:	4b0e      	ldr	r3, [pc, #56]	; (988c <MX_USART1_UART_Init+0x4c>)
    9854:	2200      	movs	r2, #0
    9856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
    9858:	4b0c      	ldr	r3, [pc, #48]	; (988c <MX_USART1_UART_Init+0x4c>)
    985a:	2200      	movs	r2, #0
    985c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
    985e:	4b0b      	ldr	r3, [pc, #44]	; (988c <MX_USART1_UART_Init+0x4c>)
    9860:	2200      	movs	r2, #0
    9862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
    9864:	4b09      	ldr	r3, [pc, #36]	; (988c <MX_USART1_UART_Init+0x4c>)
    9866:	220c      	movs	r2, #12
    9868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    986a:	4b08      	ldr	r3, [pc, #32]	; (988c <MX_USART1_UART_Init+0x4c>)
    986c:	2200      	movs	r2, #0
    986e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
    9870:	4b06      	ldr	r3, [pc, #24]	; (988c <MX_USART1_UART_Init+0x4c>)
    9872:	2200      	movs	r2, #0
    9874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
    9876:	4805      	ldr	r0, [pc, #20]	; (988c <MX_USART1_UART_Init+0x4c>)
    9878:	f7ff faec 	bl	8e54 <HAL_UART_Init>
    987c:	4603      	mov	r3, r0
    987e:	2b00      	cmp	r3, #0
    9880:	d001      	beq.n	9886 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
    9882:	f000 f829 	bl	98d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
    9886:	bf00      	nop
    9888:	bd80      	pop	{r7, pc}
    988a:	bf00      	nop
    988c:	0001bb88 	.word	0x0001bb88
    9890:	40013800 	.word	0x40013800

00009894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
    9894:	b480      	push	{r7}
    9896:	b083      	sub	sp, #12
    9898:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
    989a:	4b0e      	ldr	r3, [pc, #56]	; (98d4 <MX_GPIO_Init+0x40>)
    989c:	699b      	ldr	r3, [r3, #24]
    989e:	4a0d      	ldr	r2, [pc, #52]	; (98d4 <MX_GPIO_Init+0x40>)
    98a0:	f043 0320 	orr.w	r3, r3, #32
    98a4:	6193      	str	r3, [r2, #24]
    98a6:	4b0b      	ldr	r3, [pc, #44]	; (98d4 <MX_GPIO_Init+0x40>)
    98a8:	699b      	ldr	r3, [r3, #24]
    98aa:	f003 0320 	and.w	r3, r3, #32
    98ae:	607b      	str	r3, [r7, #4]
    98b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
    98b2:	4b08      	ldr	r3, [pc, #32]	; (98d4 <MX_GPIO_Init+0x40>)
    98b4:	699b      	ldr	r3, [r3, #24]
    98b6:	4a07      	ldr	r2, [pc, #28]	; (98d4 <MX_GPIO_Init+0x40>)
    98b8:	f043 0304 	orr.w	r3, r3, #4
    98bc:	6193      	str	r3, [r2, #24]
    98be:	4b05      	ldr	r3, [pc, #20]	; (98d4 <MX_GPIO_Init+0x40>)
    98c0:	699b      	ldr	r3, [r3, #24]
    98c2:	f003 0304 	and.w	r3, r3, #4
    98c6:	603b      	str	r3, [r7, #0]
    98c8:	683b      	ldr	r3, [r7, #0]

}
    98ca:	bf00      	nop
    98cc:	370c      	adds	r7, #12
    98ce:	46bd      	mov	sp, r7
    98d0:	bc80      	pop	{r7}
    98d2:	4770      	bx	lr
    98d4:	40021000 	.word	0x40021000

000098d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
    98d8:	b480      	push	{r7}
    98da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
    98dc:	bf00      	nop
    98de:	46bd      	mov	sp, r7
    98e0:	bc80      	pop	{r7}
    98e2:	4770      	bx	lr

000098e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
    98e4:	b480      	push	{r7}
    98e6:	b085      	sub	sp, #20
    98e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
    98ea:	4b15      	ldr	r3, [pc, #84]	; (9940 <HAL_MspInit+0x5c>)
    98ec:	699b      	ldr	r3, [r3, #24]
    98ee:	4a14      	ldr	r2, [pc, #80]	; (9940 <HAL_MspInit+0x5c>)
    98f0:	f043 0301 	orr.w	r3, r3, #1
    98f4:	6193      	str	r3, [r2, #24]
    98f6:	4b12      	ldr	r3, [pc, #72]	; (9940 <HAL_MspInit+0x5c>)
    98f8:	699b      	ldr	r3, [r3, #24]
    98fa:	f003 0301 	and.w	r3, r3, #1
    98fe:	60bb      	str	r3, [r7, #8]
    9900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
    9902:	4b0f      	ldr	r3, [pc, #60]	; (9940 <HAL_MspInit+0x5c>)
    9904:	69db      	ldr	r3, [r3, #28]
    9906:	4a0e      	ldr	r2, [pc, #56]	; (9940 <HAL_MspInit+0x5c>)
    9908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    990c:	61d3      	str	r3, [r2, #28]
    990e:	4b0c      	ldr	r3, [pc, #48]	; (9940 <HAL_MspInit+0x5c>)
    9910:	69db      	ldr	r3, [r3, #28]
    9912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    9916:	607b      	str	r3, [r7, #4]
    9918:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
    991a:	4b0a      	ldr	r3, [pc, #40]	; (9944 <HAL_MspInit+0x60>)
    991c:	685b      	ldr	r3, [r3, #4]
    991e:	60fb      	str	r3, [r7, #12]
    9920:	68fb      	ldr	r3, [r7, #12]
    9922:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    9926:	60fb      	str	r3, [r7, #12]
    9928:	68fb      	ldr	r3, [r7, #12]
    992a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    992e:	60fb      	str	r3, [r7, #12]
    9930:	4a04      	ldr	r2, [pc, #16]	; (9944 <HAL_MspInit+0x60>)
    9932:	68fb      	ldr	r3, [r7, #12]
    9934:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
    9936:	bf00      	nop
    9938:	3714      	adds	r7, #20
    993a:	46bd      	mov	sp, r7
    993c:	bc80      	pop	{r7}
    993e:	4770      	bx	lr
    9940:	40021000 	.word	0x40021000
    9944:	40010000 	.word	0x40010000

00009948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
    9948:	b580      	push	{r7, lr}
    994a:	b088      	sub	sp, #32
    994c:	af00      	add	r7, sp, #0
    994e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
    9950:	f107 0310 	add.w	r3, r7, #16
    9954:	2200      	movs	r2, #0
    9956:	601a      	str	r2, [r3, #0]
    9958:	605a      	str	r2, [r3, #4]
    995a:	609a      	str	r2, [r3, #8]
    995c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
    995e:	687b      	ldr	r3, [r7, #4]
    9960:	681b      	ldr	r3, [r3, #0]
    9962:	4a1c      	ldr	r2, [pc, #112]	; (99d4 <HAL_UART_MspInit+0x8c>)
    9964:	4293      	cmp	r3, r2
    9966:	d131      	bne.n	99cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
    9968:	4b1b      	ldr	r3, [pc, #108]	; (99d8 <HAL_UART_MspInit+0x90>)
    996a:	699b      	ldr	r3, [r3, #24]
    996c:	4a1a      	ldr	r2, [pc, #104]	; (99d8 <HAL_UART_MspInit+0x90>)
    996e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    9972:	6193      	str	r3, [r2, #24]
    9974:	4b18      	ldr	r3, [pc, #96]	; (99d8 <HAL_UART_MspInit+0x90>)
    9976:	699b      	ldr	r3, [r3, #24]
    9978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    997c:	60fb      	str	r3, [r7, #12]
    997e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
    9980:	4b15      	ldr	r3, [pc, #84]	; (99d8 <HAL_UART_MspInit+0x90>)
    9982:	699b      	ldr	r3, [r3, #24]
    9984:	4a14      	ldr	r2, [pc, #80]	; (99d8 <HAL_UART_MspInit+0x90>)
    9986:	f043 0304 	orr.w	r3, r3, #4
    998a:	6193      	str	r3, [r2, #24]
    998c:	4b12      	ldr	r3, [pc, #72]	; (99d8 <HAL_UART_MspInit+0x90>)
    998e:	699b      	ldr	r3, [r3, #24]
    9990:	f003 0304 	and.w	r3, r3, #4
    9994:	60bb      	str	r3, [r7, #8]
    9996:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    9998:	f44f 7300 	mov.w	r3, #512	; 0x200
    999c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    999e:	2302      	movs	r3, #2
    99a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    99a2:	2303      	movs	r3, #3
    99a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    99a6:	f107 0310 	add.w	r3, r7, #16
    99aa:	4619      	mov	r1, r3
    99ac:	480b      	ldr	r0, [pc, #44]	; (99dc <HAL_UART_MspInit+0x94>)
    99ae:	f7fe fcd1 	bl	8354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    99b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    99b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    99b8:	2300      	movs	r3, #0
    99ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    99bc:	2300      	movs	r3, #0
    99be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    99c0:	f107 0310 	add.w	r3, r7, #16
    99c4:	4619      	mov	r1, r3
    99c6:	4805      	ldr	r0, [pc, #20]	; (99dc <HAL_UART_MspInit+0x94>)
    99c8:	f7fe fcc4 	bl	8354 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
    99cc:	bf00      	nop
    99ce:	3720      	adds	r7, #32
    99d0:	46bd      	mov	sp, r7
    99d2:	bd80      	pop	{r7, pc}
    99d4:	40013800 	.word	0x40013800
    99d8:	40021000 	.word	0x40021000
    99dc:	40010800 	.word	0x40010800

000099e0 <__libc_init_array>:
    99e0:	b570      	push	{r4, r5, r6, lr}
    99e2:	2500      	movs	r5, #0
    99e4:	4e0c      	ldr	r6, [pc, #48]	; (9a18 <__libc_init_array+0x38>)
    99e6:	4c0d      	ldr	r4, [pc, #52]	; (9a1c <__libc_init_array+0x3c>)
    99e8:	1ba4      	subs	r4, r4, r6
    99ea:	10a4      	asrs	r4, r4, #2
    99ec:	42a5      	cmp	r5, r4
    99ee:	d109      	bne.n	9a04 <__libc_init_array+0x24>
    99f0:	f7fe fb06 	bl	8000 <_init>
    99f4:	2500      	movs	r5, #0
    99f6:	4e0a      	ldr	r6, [pc, #40]	; (9a20 <__libc_init_array+0x40>)
    99f8:	4c0a      	ldr	r4, [pc, #40]	; (9a24 <__libc_init_array+0x44>)
    99fa:	1ba4      	subs	r4, r4, r6
    99fc:	10a4      	asrs	r4, r4, #2
    99fe:	42a5      	cmp	r5, r4
    9a00:	d105      	bne.n	9a0e <__libc_init_array+0x2e>
    9a02:	bd70      	pop	{r4, r5, r6, pc}
    9a04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    9a08:	4798      	blx	r3
    9a0a:	3501      	adds	r5, #1
    9a0c:	e7ee      	b.n	99ec <__libc_init_array+0xc>
    9a0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    9a12:	4798      	blx	r3
    9a14:	3501      	adds	r5, #1
    9a16:	e7f2      	b.n	99fe <__libc_init_array+0x1e>
    9a18:	0001baf4 	.word	0x0001baf4
    9a1c:	0001baf4 	.word	0x0001baf4
    9a20:	0001baf4 	.word	0x0001baf4
    9a24:	0001baf8 	.word	0x0001baf8

00009a28 <memset>:
    9a28:	4603      	mov	r3, r0
    9a2a:	4402      	add	r2, r0
    9a2c:	4293      	cmp	r3, r2
    9a2e:	d100      	bne.n	9a32 <memset+0xa>
    9a30:	4770      	bx	lr
    9a32:	f803 1b01 	strb.w	r1, [r3], #1
    9a36:	e7f9      	b.n	9a2c <memset+0x4>

00009a38 <cos>:
    9a38:	b530      	push	{r4, r5, lr}
    9a3a:	4a18      	ldr	r2, [pc, #96]	; (9a9c <cos+0x64>)
    9a3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    9a40:	4293      	cmp	r3, r2
    9a42:	b087      	sub	sp, #28
    9a44:	dc04      	bgt.n	9a50 <cos+0x18>
    9a46:	2200      	movs	r2, #0
    9a48:	2300      	movs	r3, #0
    9a4a:	f000 fa55 	bl	9ef8 <__kernel_cos>
    9a4e:	e006      	b.n	9a5e <cos+0x26>
    9a50:	4a13      	ldr	r2, [pc, #76]	; (9aa0 <cos+0x68>)
    9a52:	4293      	cmp	r3, r2
    9a54:	dd05      	ble.n	9a62 <cos+0x2a>
    9a56:	4602      	mov	r2, r0
    9a58:	460b      	mov	r3, r1
    9a5a:	f001 f811 	bl	aa80 <__aeabi_dsub>
    9a5e:	b007      	add	sp, #28
    9a60:	bd30      	pop	{r4, r5, pc}
    9a62:	aa02      	add	r2, sp, #8
    9a64:	f000 f858 	bl	9b18 <__ieee754_rem_pio2>
    9a68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9a6c:	f000 0403 	and.w	r4, r0, #3
    9a70:	2c01      	cmp	r4, #1
    9a72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9a76:	d008      	beq.n	9a8a <cos+0x52>
    9a78:	2c02      	cmp	r4, #2
    9a7a:	d00c      	beq.n	9a96 <cos+0x5e>
    9a7c:	2c00      	cmp	r4, #0
    9a7e:	d0e4      	beq.n	9a4a <cos+0x12>
    9a80:	2401      	movs	r4, #1
    9a82:	9400      	str	r4, [sp, #0]
    9a84:	f000 fe40 	bl	a708 <__kernel_sin>
    9a88:	e7e9      	b.n	9a5e <cos+0x26>
    9a8a:	9400      	str	r4, [sp, #0]
    9a8c:	f000 fe3c 	bl	a708 <__kernel_sin>
    9a90:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    9a94:	e7e3      	b.n	9a5e <cos+0x26>
    9a96:	f000 fa2f 	bl	9ef8 <__kernel_cos>
    9a9a:	e7f9      	b.n	9a90 <cos+0x58>
    9a9c:	3fe921fb 	.word	0x3fe921fb
    9aa0:	7fefffff 	.word	0x7fefffff

00009aa4 <sin>:
    9aa4:	b530      	push	{r4, r5, lr}
    9aa6:	4a1a      	ldr	r2, [pc, #104]	; (9b10 <sin+0x6c>)
    9aa8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    9aac:	4293      	cmp	r3, r2
    9aae:	b087      	sub	sp, #28
    9ab0:	dc06      	bgt.n	9ac0 <sin+0x1c>
    9ab2:	2300      	movs	r3, #0
    9ab4:	2200      	movs	r2, #0
    9ab6:	9300      	str	r3, [sp, #0]
    9ab8:	2300      	movs	r3, #0
    9aba:	f000 fe25 	bl	a708 <__kernel_sin>
    9abe:	e006      	b.n	9ace <sin+0x2a>
    9ac0:	4a14      	ldr	r2, [pc, #80]	; (9b14 <sin+0x70>)
    9ac2:	4293      	cmp	r3, r2
    9ac4:	dd05      	ble.n	9ad2 <sin+0x2e>
    9ac6:	4602      	mov	r2, r0
    9ac8:	460b      	mov	r3, r1
    9aca:	f000 ffd9 	bl	aa80 <__aeabi_dsub>
    9ace:	b007      	add	sp, #28
    9ad0:	bd30      	pop	{r4, r5, pc}
    9ad2:	aa02      	add	r2, sp, #8
    9ad4:	f000 f820 	bl	9b18 <__ieee754_rem_pio2>
    9ad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    9adc:	f000 0403 	and.w	r4, r0, #3
    9ae0:	2c01      	cmp	r4, #1
    9ae2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9ae6:	d005      	beq.n	9af4 <sin+0x50>
    9ae8:	2c02      	cmp	r4, #2
    9aea:	d006      	beq.n	9afa <sin+0x56>
    9aec:	b964      	cbnz	r4, 9b08 <sin+0x64>
    9aee:	2401      	movs	r4, #1
    9af0:	9400      	str	r4, [sp, #0]
    9af2:	e7e2      	b.n	9aba <sin+0x16>
    9af4:	f000 fa00 	bl	9ef8 <__kernel_cos>
    9af8:	e7e9      	b.n	9ace <sin+0x2a>
    9afa:	2401      	movs	r4, #1
    9afc:	9400      	str	r4, [sp, #0]
    9afe:	f000 fe03 	bl	a708 <__kernel_sin>
    9b02:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    9b06:	e7e2      	b.n	9ace <sin+0x2a>
    9b08:	f000 f9f6 	bl	9ef8 <__kernel_cos>
    9b0c:	e7f9      	b.n	9b02 <sin+0x5e>
    9b0e:	bf00      	nop
    9b10:	3fe921fb 	.word	0x3fe921fb
    9b14:	7fefffff 	.word	0x7fefffff

00009b18 <__ieee754_rem_pio2>:
    9b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b1c:	4614      	mov	r4, r2
    9b1e:	4ac2      	ldr	r2, [pc, #776]	; (9e28 <__ieee754_rem_pio2+0x310>)
    9b20:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
    9b24:	4592      	cmp	sl, r2
    9b26:	b08d      	sub	sp, #52	; 0x34
    9b28:	468b      	mov	fp, r1
    9b2a:	dc07      	bgt.n	9b3c <__ieee754_rem_pio2+0x24>
    9b2c:	2200      	movs	r2, #0
    9b2e:	2300      	movs	r3, #0
    9b30:	e9c4 0100 	strd	r0, r1, [r4]
    9b34:	e9c4 2302 	strd	r2, r3, [r4, #8]
    9b38:	2500      	movs	r5, #0
    9b3a:	e023      	b.n	9b84 <__ieee754_rem_pio2+0x6c>
    9b3c:	4abb      	ldr	r2, [pc, #748]	; (9e2c <__ieee754_rem_pio2+0x314>)
    9b3e:	4592      	cmp	sl, r2
    9b40:	dc71      	bgt.n	9c26 <__ieee754_rem_pio2+0x10e>
    9b42:	a3ab      	add	r3, pc, #684	; (adr r3, 9df0 <__ieee754_rem_pio2+0x2d8>)
    9b44:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b48:	2900      	cmp	r1, #0
    9b4a:	4db9      	ldr	r5, [pc, #740]	; (9e30 <__ieee754_rem_pio2+0x318>)
    9b4c:	dd36      	ble.n	9bbc <__ieee754_rem_pio2+0xa4>
    9b4e:	f000 ff97 	bl	aa80 <__aeabi_dsub>
    9b52:	45aa      	cmp	sl, r5
    9b54:	4606      	mov	r6, r0
    9b56:	460f      	mov	r7, r1
    9b58:	d018      	beq.n	9b8c <__ieee754_rem_pio2+0x74>
    9b5a:	a3a7      	add	r3, pc, #668	; (adr r3, 9df8 <__ieee754_rem_pio2+0x2e0>)
    9b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b60:	f000 ff8e 	bl	aa80 <__aeabi_dsub>
    9b64:	4602      	mov	r2, r0
    9b66:	460b      	mov	r3, r1
    9b68:	4630      	mov	r0, r6
    9b6a:	e9c4 2300 	strd	r2, r3, [r4]
    9b6e:	4639      	mov	r1, r7
    9b70:	f000 ff86 	bl	aa80 <__aeabi_dsub>
    9b74:	a3a0      	add	r3, pc, #640	; (adr r3, 9df8 <__ieee754_rem_pio2+0x2e0>)
    9b76:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b7a:	f000 ff81 	bl	aa80 <__aeabi_dsub>
    9b7e:	2501      	movs	r5, #1
    9b80:	e9c4 0102 	strd	r0, r1, [r4, #8]
    9b84:	4628      	mov	r0, r5
    9b86:	b00d      	add	sp, #52	; 0x34
    9b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9b8c:	a39c      	add	r3, pc, #624	; (adr r3, 9e00 <__ieee754_rem_pio2+0x2e8>)
    9b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b92:	f000 ff75 	bl	aa80 <__aeabi_dsub>
    9b96:	a39c      	add	r3, pc, #624	; (adr r3, 9e08 <__ieee754_rem_pio2+0x2f0>)
    9b98:	e9d3 2300 	ldrd	r2, r3, [r3]
    9b9c:	4606      	mov	r6, r0
    9b9e:	460f      	mov	r7, r1
    9ba0:	f000 ff6e 	bl	aa80 <__aeabi_dsub>
    9ba4:	4602      	mov	r2, r0
    9ba6:	460b      	mov	r3, r1
    9ba8:	4630      	mov	r0, r6
    9baa:	e9c4 2300 	strd	r2, r3, [r4]
    9bae:	4639      	mov	r1, r7
    9bb0:	f000 ff66 	bl	aa80 <__aeabi_dsub>
    9bb4:	a394      	add	r3, pc, #592	; (adr r3, 9e08 <__ieee754_rem_pio2+0x2f0>)
    9bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bba:	e7de      	b.n	9b7a <__ieee754_rem_pio2+0x62>
    9bbc:	f000 ff62 	bl	aa84 <__adddf3>
    9bc0:	45aa      	cmp	sl, r5
    9bc2:	4606      	mov	r6, r0
    9bc4:	460f      	mov	r7, r1
    9bc6:	d016      	beq.n	9bf6 <__ieee754_rem_pio2+0xde>
    9bc8:	a38b      	add	r3, pc, #556	; (adr r3, 9df8 <__ieee754_rem_pio2+0x2e0>)
    9bca:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bce:	f000 ff59 	bl	aa84 <__adddf3>
    9bd2:	4602      	mov	r2, r0
    9bd4:	460b      	mov	r3, r1
    9bd6:	4630      	mov	r0, r6
    9bd8:	e9c4 2300 	strd	r2, r3, [r4]
    9bdc:	4639      	mov	r1, r7
    9bde:	f000 ff4f 	bl	aa80 <__aeabi_dsub>
    9be2:	a385      	add	r3, pc, #532	; (adr r3, 9df8 <__ieee754_rem_pio2+0x2e0>)
    9be4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9be8:	f000 ff4c 	bl	aa84 <__adddf3>
    9bec:	f04f 35ff 	mov.w	r5, #4294967295
    9bf0:	e9c4 0102 	strd	r0, r1, [r4, #8]
    9bf4:	e7c6      	b.n	9b84 <__ieee754_rem_pio2+0x6c>
    9bf6:	a382      	add	r3, pc, #520	; (adr r3, 9e00 <__ieee754_rem_pio2+0x2e8>)
    9bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
    9bfc:	f000 ff42 	bl	aa84 <__adddf3>
    9c00:	a381      	add	r3, pc, #516	; (adr r3, 9e08 <__ieee754_rem_pio2+0x2f0>)
    9c02:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c06:	4606      	mov	r6, r0
    9c08:	460f      	mov	r7, r1
    9c0a:	f000 ff3b 	bl	aa84 <__adddf3>
    9c0e:	4602      	mov	r2, r0
    9c10:	460b      	mov	r3, r1
    9c12:	4630      	mov	r0, r6
    9c14:	e9c4 2300 	strd	r2, r3, [r4]
    9c18:	4639      	mov	r1, r7
    9c1a:	f000 ff31 	bl	aa80 <__aeabi_dsub>
    9c1e:	a37a      	add	r3, pc, #488	; (adr r3, 9e08 <__ieee754_rem_pio2+0x2f0>)
    9c20:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c24:	e7e0      	b.n	9be8 <__ieee754_rem_pio2+0xd0>
    9c26:	4a83      	ldr	r2, [pc, #524]	; (9e34 <__ieee754_rem_pio2+0x31c>)
    9c28:	4592      	cmp	sl, r2
    9c2a:	f300 80d2 	bgt.w	9dd2 <__ieee754_rem_pio2+0x2ba>
    9c2e:	f000 fe21 	bl	a874 <fabs>
    9c32:	a377      	add	r3, pc, #476	; (adr r3, 9e10 <__ieee754_rem_pio2+0x2f8>)
    9c34:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c38:	4606      	mov	r6, r0
    9c3a:	460f      	mov	r7, r1
    9c3c:	f001 f8d8 	bl	adf0 <__aeabi_dmul>
    9c40:	2200      	movs	r2, #0
    9c42:	4b7d      	ldr	r3, [pc, #500]	; (9e38 <__ieee754_rem_pio2+0x320>)
    9c44:	f000 ff1e 	bl	aa84 <__adddf3>
    9c48:	f001 fb6c 	bl	b324 <__aeabi_d2iz>
    9c4c:	4605      	mov	r5, r0
    9c4e:	f001 f865 	bl	ad1c <__aeabi_i2d>
    9c52:	a367      	add	r3, pc, #412	; (adr r3, 9df0 <__ieee754_rem_pio2+0x2d8>)
    9c54:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c58:	e9cd 0102 	strd	r0, r1, [sp, #8]
    9c5c:	f001 f8c8 	bl	adf0 <__aeabi_dmul>
    9c60:	4602      	mov	r2, r0
    9c62:	460b      	mov	r3, r1
    9c64:	4630      	mov	r0, r6
    9c66:	4639      	mov	r1, r7
    9c68:	f000 ff0a 	bl	aa80 <__aeabi_dsub>
    9c6c:	a362      	add	r3, pc, #392	; (adr r3, 9df8 <__ieee754_rem_pio2+0x2e0>)
    9c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9c72:	4606      	mov	r6, r0
    9c74:	460f      	mov	r7, r1
    9c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9c7a:	f001 f8b9 	bl	adf0 <__aeabi_dmul>
    9c7e:	2d1f      	cmp	r5, #31
    9c80:	4680      	mov	r8, r0
    9c82:	4689      	mov	r9, r1
    9c84:	dc0e      	bgt.n	9ca4 <__ieee754_rem_pio2+0x18c>
    9c86:	4b6d      	ldr	r3, [pc, #436]	; (9e3c <__ieee754_rem_pio2+0x324>)
    9c88:	1e6a      	subs	r2, r5, #1
    9c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9c8e:	4553      	cmp	r3, sl
    9c90:	d008      	beq.n	9ca4 <__ieee754_rem_pio2+0x18c>
    9c92:	4642      	mov	r2, r8
    9c94:	464b      	mov	r3, r9
    9c96:	4630      	mov	r0, r6
    9c98:	4639      	mov	r1, r7
    9c9a:	f000 fef1 	bl	aa80 <__aeabi_dsub>
    9c9e:	e9c4 0100 	strd	r0, r1, [r4]
    9ca2:	e011      	b.n	9cc8 <__ieee754_rem_pio2+0x1b0>
    9ca4:	464b      	mov	r3, r9
    9ca6:	4642      	mov	r2, r8
    9ca8:	4630      	mov	r0, r6
    9caa:	4639      	mov	r1, r7
    9cac:	f000 fee8 	bl	aa80 <__aeabi_dsub>
    9cb0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
    9cb4:	f3c1 530a 	ubfx	r3, r1, #20, #11
    9cb8:	ebaa 0303 	sub.w	r3, sl, r3
    9cbc:	2b10      	cmp	r3, #16
    9cbe:	dc1f      	bgt.n	9d00 <__ieee754_rem_pio2+0x1e8>
    9cc0:	4602      	mov	r2, r0
    9cc2:	460b      	mov	r3, r1
    9cc4:	e9c4 2300 	strd	r2, r3, [r4]
    9cc8:	e9d4 2a00 	ldrd	r2, sl, [r4]
    9ccc:	4630      	mov	r0, r6
    9cce:	4653      	mov	r3, sl
    9cd0:	4639      	mov	r1, r7
    9cd2:	f000 fed5 	bl	aa80 <__aeabi_dsub>
    9cd6:	4642      	mov	r2, r8
    9cd8:	464b      	mov	r3, r9
    9cda:	f000 fed1 	bl	aa80 <__aeabi_dsub>
    9cde:	4602      	mov	r2, r0
    9ce0:	460b      	mov	r3, r1
    9ce2:	f1bb 0f00 	cmp.w	fp, #0
    9ce6:	e9c4 2302 	strd	r2, r3, [r4, #8]
    9cea:	f6bf af4b 	bge.w	9b84 <__ieee754_rem_pio2+0x6c>
    9cee:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
    9cf2:	e9c4 3001 	strd	r3, r0, [r4, #4]
    9cf6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    9cfa:	60e1      	str	r1, [r4, #12]
    9cfc:	426d      	negs	r5, r5
    9cfe:	e741      	b.n	9b84 <__ieee754_rem_pio2+0x6c>
    9d00:	a33f      	add	r3, pc, #252	; (adr r3, 9e00 <__ieee754_rem_pio2+0x2e8>)
    9d02:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9d0a:	f001 f871 	bl	adf0 <__aeabi_dmul>
    9d0e:	4680      	mov	r8, r0
    9d10:	4689      	mov	r9, r1
    9d12:	4602      	mov	r2, r0
    9d14:	460b      	mov	r3, r1
    9d16:	4630      	mov	r0, r6
    9d18:	4639      	mov	r1, r7
    9d1a:	f000 feb1 	bl	aa80 <__aeabi_dsub>
    9d1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    9d22:	4602      	mov	r2, r0
    9d24:	460b      	mov	r3, r1
    9d26:	4630      	mov	r0, r6
    9d28:	4639      	mov	r1, r7
    9d2a:	f000 fea9 	bl	aa80 <__aeabi_dsub>
    9d2e:	4642      	mov	r2, r8
    9d30:	464b      	mov	r3, r9
    9d32:	f000 fea5 	bl	aa80 <__aeabi_dsub>
    9d36:	a334      	add	r3, pc, #208	; (adr r3, 9e08 <__ieee754_rem_pio2+0x2f0>)
    9d38:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d3c:	4606      	mov	r6, r0
    9d3e:	460f      	mov	r7, r1
    9d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9d44:	f001 f854 	bl	adf0 <__aeabi_dmul>
    9d48:	4632      	mov	r2, r6
    9d4a:	463b      	mov	r3, r7
    9d4c:	f000 fe98 	bl	aa80 <__aeabi_dsub>
    9d50:	460b      	mov	r3, r1
    9d52:	4602      	mov	r2, r0
    9d54:	4680      	mov	r8, r0
    9d56:	4689      	mov	r9, r1
    9d58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9d5c:	f000 fe90 	bl	aa80 <__aeabi_dsub>
    9d60:	f3c1 530a 	ubfx	r3, r1, #20, #11
    9d64:	ebaa 0a03 	sub.w	sl, sl, r3
    9d68:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
    9d6c:	dc06      	bgt.n	9d7c <__ieee754_rem_pio2+0x264>
    9d6e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
    9d72:	4602      	mov	r2, r0
    9d74:	460b      	mov	r3, r1
    9d76:	e9c4 2300 	strd	r2, r3, [r4]
    9d7a:	e7a5      	b.n	9cc8 <__ieee754_rem_pio2+0x1b0>
    9d7c:	a326      	add	r3, pc, #152	; (adr r3, 9e18 <__ieee754_rem_pio2+0x300>)
    9d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    9d82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9d86:	f001 f833 	bl	adf0 <__aeabi_dmul>
    9d8a:	4680      	mov	r8, r0
    9d8c:	4689      	mov	r9, r1
    9d8e:	4602      	mov	r2, r0
    9d90:	460b      	mov	r3, r1
    9d92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9d96:	f000 fe73 	bl	aa80 <__aeabi_dsub>
    9d9a:	4602      	mov	r2, r0
    9d9c:	460b      	mov	r3, r1
    9d9e:	4606      	mov	r6, r0
    9da0:	460f      	mov	r7, r1
    9da2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    9da6:	f000 fe6b 	bl	aa80 <__aeabi_dsub>
    9daa:	4642      	mov	r2, r8
    9dac:	464b      	mov	r3, r9
    9dae:	f000 fe67 	bl	aa80 <__aeabi_dsub>
    9db2:	a31b      	add	r3, pc, #108	; (adr r3, 9e20 <__ieee754_rem_pio2+0x308>)
    9db4:	e9d3 2300 	ldrd	r2, r3, [r3]
    9db8:	4680      	mov	r8, r0
    9dba:	4689      	mov	r9, r1
    9dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    9dc0:	f001 f816 	bl	adf0 <__aeabi_dmul>
    9dc4:	4642      	mov	r2, r8
    9dc6:	464b      	mov	r3, r9
    9dc8:	f000 fe5a 	bl	aa80 <__aeabi_dsub>
    9dcc:	4680      	mov	r8, r0
    9dce:	4689      	mov	r9, r1
    9dd0:	e75f      	b.n	9c92 <__ieee754_rem_pio2+0x17a>
    9dd2:	4a1b      	ldr	r2, [pc, #108]	; (9e40 <__ieee754_rem_pio2+0x328>)
    9dd4:	4592      	cmp	sl, r2
    9dd6:	dd35      	ble.n	9e44 <__ieee754_rem_pio2+0x32c>
    9dd8:	4602      	mov	r2, r0
    9dda:	460b      	mov	r3, r1
    9ddc:	f000 fe50 	bl	aa80 <__aeabi_dsub>
    9de0:	e9c4 0102 	strd	r0, r1, [r4, #8]
    9de4:	e9c4 0100 	strd	r0, r1, [r4]
    9de8:	e6a6      	b.n	9b38 <__ieee754_rem_pio2+0x20>
    9dea:	bf00      	nop
    9dec:	f3af 8000 	nop.w
    9df0:	54400000 	.word	0x54400000
    9df4:	3ff921fb 	.word	0x3ff921fb
    9df8:	1a626331 	.word	0x1a626331
    9dfc:	3dd0b461 	.word	0x3dd0b461
    9e00:	1a600000 	.word	0x1a600000
    9e04:	3dd0b461 	.word	0x3dd0b461
    9e08:	2e037073 	.word	0x2e037073
    9e0c:	3ba3198a 	.word	0x3ba3198a
    9e10:	6dc9c883 	.word	0x6dc9c883
    9e14:	3fe45f30 	.word	0x3fe45f30
    9e18:	2e000000 	.word	0x2e000000
    9e1c:	3ba3198a 	.word	0x3ba3198a
    9e20:	252049c1 	.word	0x252049c1
    9e24:	397b839a 	.word	0x397b839a
    9e28:	3fe921fb 	.word	0x3fe921fb
    9e2c:	4002d97b 	.word	0x4002d97b
    9e30:	3ff921fb 	.word	0x3ff921fb
    9e34:	413921fb 	.word	0x413921fb
    9e38:	3fe00000 	.word	0x3fe00000
    9e3c:	0000b910 	.word	0x0000b910
    9e40:	7fefffff 	.word	0x7fefffff
    9e44:	ea4f 552a 	mov.w	r5, sl, asr #20
    9e48:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
    9e4c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
    9e50:	460f      	mov	r7, r1
    9e52:	4606      	mov	r6, r0
    9e54:	f001 fa66 	bl	b324 <__aeabi_d2iz>
    9e58:	f000 ff60 	bl	ad1c <__aeabi_i2d>
    9e5c:	4602      	mov	r2, r0
    9e5e:	460b      	mov	r3, r1
    9e60:	4630      	mov	r0, r6
    9e62:	4639      	mov	r1, r7
    9e64:	e9cd 2306 	strd	r2, r3, [sp, #24]
    9e68:	f000 fe0a 	bl	aa80 <__aeabi_dsub>
    9e6c:	2200      	movs	r2, #0
    9e6e:	4b20      	ldr	r3, [pc, #128]	; (9ef0 <__ieee754_rem_pio2+0x3d8>)
    9e70:	f000 ffbe 	bl	adf0 <__aeabi_dmul>
    9e74:	460f      	mov	r7, r1
    9e76:	4606      	mov	r6, r0
    9e78:	f001 fa54 	bl	b324 <__aeabi_d2iz>
    9e7c:	f000 ff4e 	bl	ad1c <__aeabi_i2d>
    9e80:	4602      	mov	r2, r0
    9e82:	460b      	mov	r3, r1
    9e84:	4630      	mov	r0, r6
    9e86:	4639      	mov	r1, r7
    9e88:	e9cd 2308 	strd	r2, r3, [sp, #32]
    9e8c:	f000 fdf8 	bl	aa80 <__aeabi_dsub>
    9e90:	2200      	movs	r2, #0
    9e92:	4b17      	ldr	r3, [pc, #92]	; (9ef0 <__ieee754_rem_pio2+0x3d8>)
    9e94:	f000 ffac 	bl	adf0 <__aeabi_dmul>
    9e98:	f04f 0803 	mov.w	r8, #3
    9e9c:	2600      	movs	r6, #0
    9e9e:	2700      	movs	r7, #0
    9ea0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    9ea4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
    9ea8:	4632      	mov	r2, r6
    9eaa:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
    9eae:	463b      	mov	r3, r7
    9eb0:	f108 3aff 	add.w	sl, r8, #4294967295
    9eb4:	f001 fa04 	bl	b2c0 <__aeabi_dcmpeq>
    9eb8:	b9b8      	cbnz	r0, 9eea <__ieee754_rem_pio2+0x3d2>
    9eba:	4b0e      	ldr	r3, [pc, #56]	; (9ef4 <__ieee754_rem_pio2+0x3dc>)
    9ebc:	462a      	mov	r2, r5
    9ebe:	9301      	str	r3, [sp, #4]
    9ec0:	2302      	movs	r3, #2
    9ec2:	4621      	mov	r1, r4
    9ec4:	9300      	str	r3, [sp, #0]
    9ec6:	a806      	add	r0, sp, #24
    9ec8:	4643      	mov	r3, r8
    9eca:	f000 f8d3 	bl	a074 <__kernel_rem_pio2>
    9ece:	f1bb 0f00 	cmp.w	fp, #0
    9ed2:	4605      	mov	r5, r0
    9ed4:	f6bf ae56 	bge.w	9b84 <__ieee754_rem_pio2+0x6c>
    9ed8:	6863      	ldr	r3, [r4, #4]
    9eda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    9ede:	6063      	str	r3, [r4, #4]
    9ee0:	68e3      	ldr	r3, [r4, #12]
    9ee2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    9ee6:	60e3      	str	r3, [r4, #12]
    9ee8:	e708      	b.n	9cfc <__ieee754_rem_pio2+0x1e4>
    9eea:	46d0      	mov	r8, sl
    9eec:	e7dc      	b.n	9ea8 <__ieee754_rem_pio2+0x390>
    9eee:	bf00      	nop
    9ef0:	41700000 	.word	0x41700000
    9ef4:	0000b990 	.word	0x0000b990

00009ef8 <__kernel_cos>:
    9ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9efc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
    9f00:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
    9f04:	4680      	mov	r8, r0
    9f06:	460f      	mov	r7, r1
    9f08:	e9cd 2300 	strd	r2, r3, [sp]
    9f0c:	da04      	bge.n	9f18 <__kernel_cos+0x20>
    9f0e:	f001 fa09 	bl	b324 <__aeabi_d2iz>
    9f12:	2800      	cmp	r0, #0
    9f14:	f000 8086 	beq.w	a024 <__kernel_cos+0x12c>
    9f18:	4642      	mov	r2, r8
    9f1a:	463b      	mov	r3, r7
    9f1c:	4640      	mov	r0, r8
    9f1e:	4639      	mov	r1, r7
    9f20:	f000 ff66 	bl	adf0 <__aeabi_dmul>
    9f24:	2200      	movs	r2, #0
    9f26:	4b4e      	ldr	r3, [pc, #312]	; (a060 <__kernel_cos+0x168>)
    9f28:	4604      	mov	r4, r0
    9f2a:	460d      	mov	r5, r1
    9f2c:	f000 ff60 	bl	adf0 <__aeabi_dmul>
    9f30:	a33f      	add	r3, pc, #252	; (adr r3, a030 <__kernel_cos+0x138>)
    9f32:	e9d3 2300 	ldrd	r2, r3, [r3]
    9f36:	4682      	mov	sl, r0
    9f38:	468b      	mov	fp, r1
    9f3a:	4620      	mov	r0, r4
    9f3c:	4629      	mov	r1, r5
    9f3e:	f000 ff57 	bl	adf0 <__aeabi_dmul>
    9f42:	a33d      	add	r3, pc, #244	; (adr r3, a038 <__kernel_cos+0x140>)
    9f44:	e9d3 2300 	ldrd	r2, r3, [r3]
    9f48:	f000 fd9c 	bl	aa84 <__adddf3>
    9f4c:	4622      	mov	r2, r4
    9f4e:	462b      	mov	r3, r5
    9f50:	f000 ff4e 	bl	adf0 <__aeabi_dmul>
    9f54:	a33a      	add	r3, pc, #232	; (adr r3, a040 <__kernel_cos+0x148>)
    9f56:	e9d3 2300 	ldrd	r2, r3, [r3]
    9f5a:	f000 fd91 	bl	aa80 <__aeabi_dsub>
    9f5e:	4622      	mov	r2, r4
    9f60:	462b      	mov	r3, r5
    9f62:	f000 ff45 	bl	adf0 <__aeabi_dmul>
    9f66:	a338      	add	r3, pc, #224	; (adr r3, a048 <__kernel_cos+0x150>)
    9f68:	e9d3 2300 	ldrd	r2, r3, [r3]
    9f6c:	f000 fd8a 	bl	aa84 <__adddf3>
    9f70:	4622      	mov	r2, r4
    9f72:	462b      	mov	r3, r5
    9f74:	f000 ff3c 	bl	adf0 <__aeabi_dmul>
    9f78:	a335      	add	r3, pc, #212	; (adr r3, a050 <__kernel_cos+0x158>)
    9f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    9f7e:	f000 fd7f 	bl	aa80 <__aeabi_dsub>
    9f82:	4622      	mov	r2, r4
    9f84:	462b      	mov	r3, r5
    9f86:	f000 ff33 	bl	adf0 <__aeabi_dmul>
    9f8a:	a333      	add	r3, pc, #204	; (adr r3, a058 <__kernel_cos+0x160>)
    9f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9f90:	f000 fd78 	bl	aa84 <__adddf3>
    9f94:	4622      	mov	r2, r4
    9f96:	462b      	mov	r3, r5
    9f98:	f000 ff2a 	bl	adf0 <__aeabi_dmul>
    9f9c:	4622      	mov	r2, r4
    9f9e:	462b      	mov	r3, r5
    9fa0:	f000 ff26 	bl	adf0 <__aeabi_dmul>
    9fa4:	e9dd 2300 	ldrd	r2, r3, [sp]
    9fa8:	4604      	mov	r4, r0
    9faa:	460d      	mov	r5, r1
    9fac:	4640      	mov	r0, r8
    9fae:	4639      	mov	r1, r7
    9fb0:	f000 ff1e 	bl	adf0 <__aeabi_dmul>
    9fb4:	460b      	mov	r3, r1
    9fb6:	4602      	mov	r2, r0
    9fb8:	4629      	mov	r1, r5
    9fba:	4620      	mov	r0, r4
    9fbc:	f000 fd60 	bl	aa80 <__aeabi_dsub>
    9fc0:	4b28      	ldr	r3, [pc, #160]	; (a064 <__kernel_cos+0x16c>)
    9fc2:	4680      	mov	r8, r0
    9fc4:	429e      	cmp	r6, r3
    9fc6:	4689      	mov	r9, r1
    9fc8:	dc0e      	bgt.n	9fe8 <__kernel_cos+0xf0>
    9fca:	4602      	mov	r2, r0
    9fcc:	460b      	mov	r3, r1
    9fce:	4650      	mov	r0, sl
    9fd0:	4659      	mov	r1, fp
    9fd2:	f000 fd55 	bl	aa80 <__aeabi_dsub>
    9fd6:	4602      	mov	r2, r0
    9fd8:	2000      	movs	r0, #0
    9fda:	460b      	mov	r3, r1
    9fdc:	4922      	ldr	r1, [pc, #136]	; (a068 <__kernel_cos+0x170>)
    9fde:	f000 fd4f 	bl	aa80 <__aeabi_dsub>
    9fe2:	b003      	add	sp, #12
    9fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fe8:	2400      	movs	r4, #0
    9fea:	4b20      	ldr	r3, [pc, #128]	; (a06c <__kernel_cos+0x174>)
    9fec:	4622      	mov	r2, r4
    9fee:	429e      	cmp	r6, r3
    9ff0:	bfcc      	ite	gt
    9ff2:	4d1f      	ldrgt	r5, [pc, #124]	; (a070 <__kernel_cos+0x178>)
    9ff4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
    9ff8:	462b      	mov	r3, r5
    9ffa:	2000      	movs	r0, #0
    9ffc:	491a      	ldr	r1, [pc, #104]	; (a068 <__kernel_cos+0x170>)
    9ffe:	f000 fd3f 	bl	aa80 <__aeabi_dsub>
    a002:	4622      	mov	r2, r4
    a004:	4606      	mov	r6, r0
    a006:	460f      	mov	r7, r1
    a008:	462b      	mov	r3, r5
    a00a:	4650      	mov	r0, sl
    a00c:	4659      	mov	r1, fp
    a00e:	f000 fd37 	bl	aa80 <__aeabi_dsub>
    a012:	4642      	mov	r2, r8
    a014:	464b      	mov	r3, r9
    a016:	f000 fd33 	bl	aa80 <__aeabi_dsub>
    a01a:	4602      	mov	r2, r0
    a01c:	460b      	mov	r3, r1
    a01e:	4630      	mov	r0, r6
    a020:	4639      	mov	r1, r7
    a022:	e7dc      	b.n	9fde <__kernel_cos+0xe6>
    a024:	2000      	movs	r0, #0
    a026:	4910      	ldr	r1, [pc, #64]	; (a068 <__kernel_cos+0x170>)
    a028:	e7db      	b.n	9fe2 <__kernel_cos+0xea>
    a02a:	bf00      	nop
    a02c:	f3af 8000 	nop.w
    a030:	be8838d4 	.word	0xbe8838d4
    a034:	bda8fae9 	.word	0xbda8fae9
    a038:	bdb4b1c4 	.word	0xbdb4b1c4
    a03c:	3e21ee9e 	.word	0x3e21ee9e
    a040:	809c52ad 	.word	0x809c52ad
    a044:	3e927e4f 	.word	0x3e927e4f
    a048:	19cb1590 	.word	0x19cb1590
    a04c:	3efa01a0 	.word	0x3efa01a0
    a050:	16c15177 	.word	0x16c15177
    a054:	3f56c16c 	.word	0x3f56c16c
    a058:	5555554c 	.word	0x5555554c
    a05c:	3fa55555 	.word	0x3fa55555
    a060:	3fe00000 	.word	0x3fe00000
    a064:	3fd33332 	.word	0x3fd33332
    a068:	3ff00000 	.word	0x3ff00000
    a06c:	3fe90000 	.word	0x3fe90000
    a070:	3fd20000 	.word	0x3fd20000

0000a074 <__kernel_rem_pio2>:
    a074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a078:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
    a07c:	9307      	str	r3, [sp, #28]
    a07e:	9104      	str	r1, [sp, #16]
    a080:	4bbf      	ldr	r3, [pc, #764]	; (a380 <__kernel_rem_pio2+0x30c>)
    a082:	99a2      	ldr	r1, [sp, #648]	; 0x288
    a084:	1ed4      	subs	r4, r2, #3
    a086:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    a08a:	2500      	movs	r5, #0
    a08c:	9302      	str	r3, [sp, #8]
    a08e:	9b07      	ldr	r3, [sp, #28]
    a090:	9008      	str	r0, [sp, #32]
    a092:	3b01      	subs	r3, #1
    a094:	9306      	str	r3, [sp, #24]
    a096:	2318      	movs	r3, #24
    a098:	fb94 f4f3 	sdiv	r4, r4, r3
    a09c:	f06f 0317 	mvn.w	r3, #23
    a0a0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    a0a4:	fb04 3303 	mla	r3, r4, r3, r3
    a0a8:	eb03 0a02 	add.w	sl, r3, r2
    a0ac:	9a06      	ldr	r2, [sp, #24]
    a0ae:	9b02      	ldr	r3, [sp, #8]
    a0b0:	1aa7      	subs	r7, r4, r2
    a0b2:	eb03 0802 	add.w	r8, r3, r2
    a0b6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    a0b8:	2200      	movs	r2, #0
    a0ba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
    a0be:	2300      	movs	r3, #0
    a0c0:	ae1e      	add	r6, sp, #120	; 0x78
    a0c2:	4545      	cmp	r5, r8
    a0c4:	dd14      	ble.n	a0f0 <__kernel_rem_pio2+0x7c>
    a0c6:	2600      	movs	r6, #0
    a0c8:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
    a0cc:	9b02      	ldr	r3, [sp, #8]
    a0ce:	429e      	cmp	r6, r3
    a0d0:	dc39      	bgt.n	a146 <__kernel_rem_pio2+0xd2>
    a0d2:	9b08      	ldr	r3, [sp, #32]
    a0d4:	f04f 0800 	mov.w	r8, #0
    a0d8:	3b08      	subs	r3, #8
    a0da:	9300      	str	r3, [sp, #0]
    a0dc:	9b07      	ldr	r3, [sp, #28]
    a0de:	f04f 0900 	mov.w	r9, #0
    a0e2:	199d      	adds	r5, r3, r6
    a0e4:	ab20      	add	r3, sp, #128	; 0x80
    a0e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    a0ea:	9305      	str	r3, [sp, #20]
    a0ec:	2700      	movs	r7, #0
    a0ee:	e023      	b.n	a138 <__kernel_rem_pio2+0xc4>
    a0f0:	42ef      	cmn	r7, r5
    a0f2:	d40b      	bmi.n	a10c <__kernel_rem_pio2+0x98>
    a0f4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
    a0f8:	e9cd 2300 	strd	r2, r3, [sp]
    a0fc:	f000 fe0e 	bl	ad1c <__aeabi_i2d>
    a100:	e9dd 2300 	ldrd	r2, r3, [sp]
    a104:	e9e6 0102 	strd	r0, r1, [r6, #8]!
    a108:	3501      	adds	r5, #1
    a10a:	e7da      	b.n	a0c2 <__kernel_rem_pio2+0x4e>
    a10c:	4610      	mov	r0, r2
    a10e:	4619      	mov	r1, r3
    a110:	e7f8      	b.n	a104 <__kernel_rem_pio2+0x90>
    a112:	9905      	ldr	r1, [sp, #20]
    a114:	9d00      	ldr	r5, [sp, #0]
    a116:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
    a11a:	9105      	str	r1, [sp, #20]
    a11c:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
    a120:	9500      	str	r5, [sp, #0]
    a122:	f000 fe65 	bl	adf0 <__aeabi_dmul>
    a126:	4602      	mov	r2, r0
    a128:	460b      	mov	r3, r1
    a12a:	4640      	mov	r0, r8
    a12c:	4649      	mov	r1, r9
    a12e:	f000 fca9 	bl	aa84 <__adddf3>
    a132:	4680      	mov	r8, r0
    a134:	4689      	mov	r9, r1
    a136:	3701      	adds	r7, #1
    a138:	9b06      	ldr	r3, [sp, #24]
    a13a:	429f      	cmp	r7, r3
    a13c:	dde9      	ble.n	a112 <__kernel_rem_pio2+0x9e>
    a13e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
    a142:	3601      	adds	r6, #1
    a144:	e7c2      	b.n	a0cc <__kernel_rem_pio2+0x58>
    a146:	9b02      	ldr	r3, [sp, #8]
    a148:	aa0c      	add	r2, sp, #48	; 0x30
    a14a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a14e:	930b      	str	r3, [sp, #44]	; 0x2c
    a150:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    a152:	9f02      	ldr	r7, [sp, #8]
    a154:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    a158:	930a      	str	r3, [sp, #40]	; 0x28
    a15a:	2600      	movs	r6, #0
    a15c:	ab98      	add	r3, sp, #608	; 0x260
    a15e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
    a162:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    a166:	f10b 3bff 	add.w	fp, fp, #4294967295
    a16a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
    a16e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
    a172:	ab98      	add	r3, sp, #608	; 0x260
    a174:	445b      	add	r3, fp
    a176:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
    a17a:	1bbb      	subs	r3, r7, r6
    a17c:	2b00      	cmp	r3, #0
    a17e:	dc71      	bgt.n	a264 <__kernel_rem_pio2+0x1f0>
    a180:	4652      	mov	r2, sl
    a182:	4640      	mov	r0, r8
    a184:	4649      	mov	r1, r9
    a186:	f000 fbff 	bl	a988 <scalbn>
    a18a:	2200      	movs	r2, #0
    a18c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    a190:	4604      	mov	r4, r0
    a192:	460d      	mov	r5, r1
    a194:	f000 fe2c 	bl	adf0 <__aeabi_dmul>
    a198:	f000 fb72 	bl	a880 <floor>
    a19c:	2200      	movs	r2, #0
    a19e:	4b79      	ldr	r3, [pc, #484]	; (a384 <__kernel_rem_pio2+0x310>)
    a1a0:	f000 fe26 	bl	adf0 <__aeabi_dmul>
    a1a4:	4602      	mov	r2, r0
    a1a6:	460b      	mov	r3, r1
    a1a8:	4620      	mov	r0, r4
    a1aa:	4629      	mov	r1, r5
    a1ac:	f000 fc68 	bl	aa80 <__aeabi_dsub>
    a1b0:	460d      	mov	r5, r1
    a1b2:	4604      	mov	r4, r0
    a1b4:	f001 f8b6 	bl	b324 <__aeabi_d2iz>
    a1b8:	9005      	str	r0, [sp, #20]
    a1ba:	f000 fdaf 	bl	ad1c <__aeabi_i2d>
    a1be:	4602      	mov	r2, r0
    a1c0:	460b      	mov	r3, r1
    a1c2:	4620      	mov	r0, r4
    a1c4:	4629      	mov	r1, r5
    a1c6:	f000 fc5b 	bl	aa80 <__aeabi_dsub>
    a1ca:	f1ba 0f00 	cmp.w	sl, #0
    a1ce:	4680      	mov	r8, r0
    a1d0:	4689      	mov	r9, r1
    a1d2:	dd6c      	ble.n	a2ae <__kernel_rem_pio2+0x23a>
    a1d4:	1e7a      	subs	r2, r7, #1
    a1d6:	ab0c      	add	r3, sp, #48	; 0x30
    a1d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    a1dc:	f1ca 0118 	rsb	r1, sl, #24
    a1e0:	9c05      	ldr	r4, [sp, #20]
    a1e2:	fa40 f301 	asr.w	r3, r0, r1
    a1e6:	441c      	add	r4, r3
    a1e8:	408b      	lsls	r3, r1
    a1ea:	1ac0      	subs	r0, r0, r3
    a1ec:	ab0c      	add	r3, sp, #48	; 0x30
    a1ee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    a1f2:	f1ca 0317 	rsb	r3, sl, #23
    a1f6:	9405      	str	r4, [sp, #20]
    a1f8:	fa40 f303 	asr.w	r3, r0, r3
    a1fc:	9300      	str	r3, [sp, #0]
    a1fe:	9b00      	ldr	r3, [sp, #0]
    a200:	2b00      	cmp	r3, #0
    a202:	dd62      	ble.n	a2ca <__kernel_rem_pio2+0x256>
    a204:	2200      	movs	r2, #0
    a206:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
    a20a:	4614      	mov	r4, r2
    a20c:	9b05      	ldr	r3, [sp, #20]
    a20e:	3301      	adds	r3, #1
    a210:	9305      	str	r3, [sp, #20]
    a212:	4297      	cmp	r7, r2
    a214:	f300 809f 	bgt.w	a356 <__kernel_rem_pio2+0x2e2>
    a218:	f1ba 0f00 	cmp.w	sl, #0
    a21c:	dd07      	ble.n	a22e <__kernel_rem_pio2+0x1ba>
    a21e:	f1ba 0f01 	cmp.w	sl, #1
    a222:	f000 80bb 	beq.w	a39c <__kernel_rem_pio2+0x328>
    a226:	f1ba 0f02 	cmp.w	sl, #2
    a22a:	f000 80c1 	beq.w	a3b0 <__kernel_rem_pio2+0x33c>
    a22e:	9b00      	ldr	r3, [sp, #0]
    a230:	2b02      	cmp	r3, #2
    a232:	d14a      	bne.n	a2ca <__kernel_rem_pio2+0x256>
    a234:	4642      	mov	r2, r8
    a236:	464b      	mov	r3, r9
    a238:	2000      	movs	r0, #0
    a23a:	4953      	ldr	r1, [pc, #332]	; (a388 <__kernel_rem_pio2+0x314>)
    a23c:	f000 fc20 	bl	aa80 <__aeabi_dsub>
    a240:	4680      	mov	r8, r0
    a242:	4689      	mov	r9, r1
    a244:	2c00      	cmp	r4, #0
    a246:	d040      	beq.n	a2ca <__kernel_rem_pio2+0x256>
    a248:	4652      	mov	r2, sl
    a24a:	2000      	movs	r0, #0
    a24c:	494e      	ldr	r1, [pc, #312]	; (a388 <__kernel_rem_pio2+0x314>)
    a24e:	f000 fb9b 	bl	a988 <scalbn>
    a252:	4602      	mov	r2, r0
    a254:	460b      	mov	r3, r1
    a256:	4640      	mov	r0, r8
    a258:	4649      	mov	r1, r9
    a25a:	f000 fc11 	bl	aa80 <__aeabi_dsub>
    a25e:	4680      	mov	r8, r0
    a260:	4689      	mov	r9, r1
    a262:	e032      	b.n	a2ca <__kernel_rem_pio2+0x256>
    a264:	2200      	movs	r2, #0
    a266:	4b49      	ldr	r3, [pc, #292]	; (a38c <__kernel_rem_pio2+0x318>)
    a268:	4640      	mov	r0, r8
    a26a:	4649      	mov	r1, r9
    a26c:	f000 fdc0 	bl	adf0 <__aeabi_dmul>
    a270:	f001 f858 	bl	b324 <__aeabi_d2iz>
    a274:	f000 fd52 	bl	ad1c <__aeabi_i2d>
    a278:	2200      	movs	r2, #0
    a27a:	4b45      	ldr	r3, [pc, #276]	; (a390 <__kernel_rem_pio2+0x31c>)
    a27c:	e9cd 0100 	strd	r0, r1, [sp]
    a280:	f000 fdb6 	bl	adf0 <__aeabi_dmul>
    a284:	4602      	mov	r2, r0
    a286:	460b      	mov	r3, r1
    a288:	4640      	mov	r0, r8
    a28a:	4649      	mov	r1, r9
    a28c:	f000 fbf8 	bl	aa80 <__aeabi_dsub>
    a290:	f001 f848 	bl	b324 <__aeabi_d2iz>
    a294:	ab0c      	add	r3, sp, #48	; 0x30
    a296:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    a29a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
    a29e:	e9dd 0100 	ldrd	r0, r1, [sp]
    a2a2:	f000 fbef 	bl	aa84 <__adddf3>
    a2a6:	3601      	adds	r6, #1
    a2a8:	4680      	mov	r8, r0
    a2aa:	4689      	mov	r9, r1
    a2ac:	e765      	b.n	a17a <__kernel_rem_pio2+0x106>
    a2ae:	d105      	bne.n	a2bc <__kernel_rem_pio2+0x248>
    a2b0:	1e7b      	subs	r3, r7, #1
    a2b2:	aa0c      	add	r2, sp, #48	; 0x30
    a2b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    a2b8:	15c3      	asrs	r3, r0, #23
    a2ba:	e79f      	b.n	a1fc <__kernel_rem_pio2+0x188>
    a2bc:	2200      	movs	r2, #0
    a2be:	4b35      	ldr	r3, [pc, #212]	; (a394 <__kernel_rem_pio2+0x320>)
    a2c0:	f001 f81c 	bl	b2fc <__aeabi_dcmpge>
    a2c4:	2800      	cmp	r0, #0
    a2c6:	d143      	bne.n	a350 <__kernel_rem_pio2+0x2dc>
    a2c8:	9000      	str	r0, [sp, #0]
    a2ca:	2200      	movs	r2, #0
    a2cc:	2300      	movs	r3, #0
    a2ce:	4640      	mov	r0, r8
    a2d0:	4649      	mov	r1, r9
    a2d2:	f000 fff5 	bl	b2c0 <__aeabi_dcmpeq>
    a2d6:	2800      	cmp	r0, #0
    a2d8:	f000 80c3 	beq.w	a462 <__kernel_rem_pio2+0x3ee>
    a2dc:	1e7c      	subs	r4, r7, #1
    a2de:	4623      	mov	r3, r4
    a2e0:	2200      	movs	r2, #0
    a2e2:	9902      	ldr	r1, [sp, #8]
    a2e4:	428b      	cmp	r3, r1
    a2e6:	da6a      	bge.n	a3be <__kernel_rem_pio2+0x34a>
    a2e8:	2a00      	cmp	r2, #0
    a2ea:	f000 8084 	beq.w	a3f6 <__kernel_rem_pio2+0x382>
    a2ee:	ab0c      	add	r3, sp, #48	; 0x30
    a2f0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    a2f4:	f1aa 0a18 	sub.w	sl, sl, #24
    a2f8:	2b00      	cmp	r3, #0
    a2fa:	f000 80b0 	beq.w	a45e <__kernel_rem_pio2+0x3ea>
    a2fe:	4652      	mov	r2, sl
    a300:	2000      	movs	r0, #0
    a302:	4921      	ldr	r1, [pc, #132]	; (a388 <__kernel_rem_pio2+0x314>)
    a304:	f000 fb40 	bl	a988 <scalbn>
    a308:	4625      	mov	r5, r4
    a30a:	4606      	mov	r6, r0
    a30c:	460f      	mov	r7, r1
    a30e:	f04f 0a00 	mov.w	sl, #0
    a312:	00e3      	lsls	r3, r4, #3
    a314:	aa98      	add	r2, sp, #608	; 0x260
    a316:	eb02 0803 	add.w	r8, r2, r3
    a31a:	f8df b070 	ldr.w	fp, [pc, #112]	; a38c <__kernel_rem_pio2+0x318>
    a31e:	9306      	str	r3, [sp, #24]
    a320:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
    a324:	2d00      	cmp	r5, #0
    a326:	f280 80d2 	bge.w	a4ce <__kernel_rem_pio2+0x45a>
    a32a:	2500      	movs	r5, #0
    a32c:	9a06      	ldr	r2, [sp, #24]
    a32e:	ab98      	add	r3, sp, #608	; 0x260
    a330:	189e      	adds	r6, r3, r2
    a332:	3ea8      	subs	r6, #168	; 0xa8
    a334:	1b63      	subs	r3, r4, r5
    a336:	2b00      	cmp	r3, #0
    a338:	f2c0 80f9 	blt.w	a52e <__kernel_rem_pio2+0x4ba>
    a33c:	f8df 9058 	ldr.w	r9, [pc, #88]	; a398 <__kernel_rem_pio2+0x324>
    a340:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
    a344:	f04f 0a00 	mov.w	sl, #0
    a348:	f04f 0b00 	mov.w	fp, #0
    a34c:	2700      	movs	r7, #0
    a34e:	e0e2      	b.n	a516 <__kernel_rem_pio2+0x4a2>
    a350:	2302      	movs	r3, #2
    a352:	9300      	str	r3, [sp, #0]
    a354:	e756      	b.n	a204 <__kernel_rem_pio2+0x190>
    a356:	ab0c      	add	r3, sp, #48	; 0x30
    a358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a35c:	b94c      	cbnz	r4, a372 <__kernel_rem_pio2+0x2fe>
    a35e:	b12b      	cbz	r3, a36c <__kernel_rem_pio2+0x2f8>
    a360:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
    a364:	a80c      	add	r0, sp, #48	; 0x30
    a366:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    a36a:	2301      	movs	r3, #1
    a36c:	3201      	adds	r2, #1
    a36e:	461c      	mov	r4, r3
    a370:	e74f      	b.n	a212 <__kernel_rem_pio2+0x19e>
    a372:	1acb      	subs	r3, r1, r3
    a374:	a80c      	add	r0, sp, #48	; 0x30
    a376:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    a37a:	4623      	mov	r3, r4
    a37c:	e7f6      	b.n	a36c <__kernel_rem_pio2+0x2f8>
    a37e:	bf00      	nop
    a380:	0000bad8 	.word	0x0000bad8
    a384:	40200000 	.word	0x40200000
    a388:	3ff00000 	.word	0x3ff00000
    a38c:	3e700000 	.word	0x3e700000
    a390:	41700000 	.word	0x41700000
    a394:	3fe00000 	.word	0x3fe00000
    a398:	0000ba90 	.word	0x0000ba90
    a39c:	1e7a      	subs	r2, r7, #1
    a39e:	ab0c      	add	r3, sp, #48	; 0x30
    a3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a3a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
    a3a8:	a90c      	add	r1, sp, #48	; 0x30
    a3aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    a3ae:	e73e      	b.n	a22e <__kernel_rem_pio2+0x1ba>
    a3b0:	1e7a      	subs	r2, r7, #1
    a3b2:	ab0c      	add	r3, sp, #48	; 0x30
    a3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a3b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
    a3bc:	e7f4      	b.n	a3a8 <__kernel_rem_pio2+0x334>
    a3be:	a90c      	add	r1, sp, #48	; 0x30
    a3c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    a3c4:	3b01      	subs	r3, #1
    a3c6:	430a      	orrs	r2, r1
    a3c8:	e78b      	b.n	a2e2 <__kernel_rem_pio2+0x26e>
    a3ca:	3401      	adds	r4, #1
    a3cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
    a3d0:	2a00      	cmp	r2, #0
    a3d2:	d0fa      	beq.n	a3ca <__kernel_rem_pio2+0x356>
    a3d4:	ab98      	add	r3, sp, #608	; 0x260
    a3d6:	449b      	add	fp, r3
    a3d8:	9b07      	ldr	r3, [sp, #28]
    a3da:	1c7e      	adds	r6, r7, #1
    a3dc:	19dd      	adds	r5, r3, r7
    a3de:	ab98      	add	r3, sp, #608	; 0x260
    a3e0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    a3e4:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
    a3e8:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
    a3ec:	443c      	add	r4, r7
    a3ee:	42b4      	cmp	r4, r6
    a3f0:	da04      	bge.n	a3fc <__kernel_rem_pio2+0x388>
    a3f2:	4627      	mov	r7, r4
    a3f4:	e6b1      	b.n	a15a <__kernel_rem_pio2+0xe6>
    a3f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a3f8:	2401      	movs	r4, #1
    a3fa:	e7e7      	b.n	a3cc <__kernel_rem_pio2+0x358>
    a3fc:	f105 0308 	add.w	r3, r5, #8
    a400:	9309      	str	r3, [sp, #36]	; 0x24
    a402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a404:	2700      	movs	r7, #0
    a406:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
    a40a:	f000 fc87 	bl	ad1c <__aeabi_i2d>
    a40e:	f04f 0800 	mov.w	r8, #0
    a412:	f04f 0900 	mov.w	r9, #0
    a416:	9b08      	ldr	r3, [sp, #32]
    a418:	e9c5 0102 	strd	r0, r1, [r5, #8]
    a41c:	3b08      	subs	r3, #8
    a41e:	9300      	str	r3, [sp, #0]
    a420:	f105 0310 	add.w	r3, r5, #16
    a424:	9305      	str	r3, [sp, #20]
    a426:	9b06      	ldr	r3, [sp, #24]
    a428:	429f      	cmp	r7, r3
    a42a:	dd04      	ble.n	a436 <__kernel_rem_pio2+0x3c2>
    a42c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
    a430:	3601      	adds	r6, #1
    a432:	9d09      	ldr	r5, [sp, #36]	; 0x24
    a434:	e7db      	b.n	a3ee <__kernel_rem_pio2+0x37a>
    a436:	9905      	ldr	r1, [sp, #20]
    a438:	9d00      	ldr	r5, [sp, #0]
    a43a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
    a43e:	9105      	str	r1, [sp, #20]
    a440:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
    a444:	9500      	str	r5, [sp, #0]
    a446:	f000 fcd3 	bl	adf0 <__aeabi_dmul>
    a44a:	4602      	mov	r2, r0
    a44c:	460b      	mov	r3, r1
    a44e:	4640      	mov	r0, r8
    a450:	4649      	mov	r1, r9
    a452:	f000 fb17 	bl	aa84 <__adddf3>
    a456:	3701      	adds	r7, #1
    a458:	4680      	mov	r8, r0
    a45a:	4689      	mov	r9, r1
    a45c:	e7e3      	b.n	a426 <__kernel_rem_pio2+0x3b2>
    a45e:	3c01      	subs	r4, #1
    a460:	e745      	b.n	a2ee <__kernel_rem_pio2+0x27a>
    a462:	f1ca 0200 	rsb	r2, sl, #0
    a466:	4640      	mov	r0, r8
    a468:	4649      	mov	r1, r9
    a46a:	f000 fa8d 	bl	a988 <scalbn>
    a46e:	2200      	movs	r2, #0
    a470:	4ba3      	ldr	r3, [pc, #652]	; (a700 <__kernel_rem_pio2+0x68c>)
    a472:	4604      	mov	r4, r0
    a474:	460d      	mov	r5, r1
    a476:	f000 ff41 	bl	b2fc <__aeabi_dcmpge>
    a47a:	b1f8      	cbz	r0, a4bc <__kernel_rem_pio2+0x448>
    a47c:	2200      	movs	r2, #0
    a47e:	4ba1      	ldr	r3, [pc, #644]	; (a704 <__kernel_rem_pio2+0x690>)
    a480:	4620      	mov	r0, r4
    a482:	4629      	mov	r1, r5
    a484:	f000 fcb4 	bl	adf0 <__aeabi_dmul>
    a488:	f000 ff4c 	bl	b324 <__aeabi_d2iz>
    a48c:	4606      	mov	r6, r0
    a48e:	f000 fc45 	bl	ad1c <__aeabi_i2d>
    a492:	2200      	movs	r2, #0
    a494:	4b9a      	ldr	r3, [pc, #616]	; (a700 <__kernel_rem_pio2+0x68c>)
    a496:	f000 fcab 	bl	adf0 <__aeabi_dmul>
    a49a:	460b      	mov	r3, r1
    a49c:	4602      	mov	r2, r0
    a49e:	4629      	mov	r1, r5
    a4a0:	4620      	mov	r0, r4
    a4a2:	f000 faed 	bl	aa80 <__aeabi_dsub>
    a4a6:	f000 ff3d 	bl	b324 <__aeabi_d2iz>
    a4aa:	1c7c      	adds	r4, r7, #1
    a4ac:	ab0c      	add	r3, sp, #48	; 0x30
    a4ae:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
    a4b2:	f10a 0a18 	add.w	sl, sl, #24
    a4b6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
    a4ba:	e720      	b.n	a2fe <__kernel_rem_pio2+0x28a>
    a4bc:	4620      	mov	r0, r4
    a4be:	4629      	mov	r1, r5
    a4c0:	f000 ff30 	bl	b324 <__aeabi_d2iz>
    a4c4:	ab0c      	add	r3, sp, #48	; 0x30
    a4c6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
    a4ca:	463c      	mov	r4, r7
    a4cc:	e717      	b.n	a2fe <__kernel_rem_pio2+0x28a>
    a4ce:	ab0c      	add	r3, sp, #48	; 0x30
    a4d0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    a4d4:	f000 fc22 	bl	ad1c <__aeabi_i2d>
    a4d8:	4632      	mov	r2, r6
    a4da:	463b      	mov	r3, r7
    a4dc:	f000 fc88 	bl	adf0 <__aeabi_dmul>
    a4e0:	4652      	mov	r2, sl
    a4e2:	e968 0102 	strd	r0, r1, [r8, #-8]!
    a4e6:	465b      	mov	r3, fp
    a4e8:	4630      	mov	r0, r6
    a4ea:	4639      	mov	r1, r7
    a4ec:	f000 fc80 	bl	adf0 <__aeabi_dmul>
    a4f0:	3d01      	subs	r5, #1
    a4f2:	4606      	mov	r6, r0
    a4f4:	460f      	mov	r7, r1
    a4f6:	e715      	b.n	a324 <__kernel_rem_pio2+0x2b0>
    a4f8:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
    a4fc:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
    a500:	f000 fc76 	bl	adf0 <__aeabi_dmul>
    a504:	4602      	mov	r2, r0
    a506:	460b      	mov	r3, r1
    a508:	4650      	mov	r0, sl
    a50a:	4659      	mov	r1, fp
    a50c:	f000 faba 	bl	aa84 <__adddf3>
    a510:	4682      	mov	sl, r0
    a512:	468b      	mov	fp, r1
    a514:	3701      	adds	r7, #1
    a516:	9b02      	ldr	r3, [sp, #8]
    a518:	429f      	cmp	r7, r3
    a51a:	dc01      	bgt.n	a520 <__kernel_rem_pio2+0x4ac>
    a51c:	42bd      	cmp	r5, r7
    a51e:	daeb      	bge.n	a4f8 <__kernel_rem_pio2+0x484>
    a520:	ab48      	add	r3, sp, #288	; 0x120
    a522:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    a526:	e9c3 ab00 	strd	sl, fp, [r3]
    a52a:	3501      	adds	r5, #1
    a52c:	e702      	b.n	a334 <__kernel_rem_pio2+0x2c0>
    a52e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
    a530:	2b03      	cmp	r3, #3
    a532:	d86c      	bhi.n	a60e <__kernel_rem_pio2+0x59a>
    a534:	e8df f003 	tbb	[pc, r3]
    a538:	022f2f59 	.word	0x022f2f59
    a53c:	9a06      	ldr	r2, [sp, #24]
    a53e:	ab48      	add	r3, sp, #288	; 0x120
    a540:	189d      	adds	r5, r3, r2
    a542:	46aa      	mov	sl, r5
    a544:	46a3      	mov	fp, r4
    a546:	f1bb 0f00 	cmp.w	fp, #0
    a54a:	f300 8087 	bgt.w	a65c <__kernel_rem_pio2+0x5e8>
    a54e:	46a2      	mov	sl, r4
    a550:	f1ba 0f01 	cmp.w	sl, #1
    a554:	f300 809f 	bgt.w	a696 <__kernel_rem_pio2+0x622>
    a558:	2700      	movs	r7, #0
    a55a:	463e      	mov	r6, r7
    a55c:	9d06      	ldr	r5, [sp, #24]
    a55e:	ab48      	add	r3, sp, #288	; 0x120
    a560:	3508      	adds	r5, #8
    a562:	441d      	add	r5, r3
    a564:	2c01      	cmp	r4, #1
    a566:	f300 80b3 	bgt.w	a6d0 <__kernel_rem_pio2+0x65c>
    a56a:	9b00      	ldr	r3, [sp, #0]
    a56c:	9d48      	ldr	r5, [sp, #288]	; 0x120
    a56e:	9849      	ldr	r0, [sp, #292]	; 0x124
    a570:	9c4a      	ldr	r4, [sp, #296]	; 0x128
    a572:	994b      	ldr	r1, [sp, #300]	; 0x12c
    a574:	2b00      	cmp	r3, #0
    a576:	f040 80b5 	bne.w	a6e4 <__kernel_rem_pio2+0x670>
    a57a:	4603      	mov	r3, r0
    a57c:	462a      	mov	r2, r5
    a57e:	9804      	ldr	r0, [sp, #16]
    a580:	e9c0 2300 	strd	r2, r3, [r0]
    a584:	4622      	mov	r2, r4
    a586:	460b      	mov	r3, r1
    a588:	e9c0 2302 	strd	r2, r3, [r0, #8]
    a58c:	463a      	mov	r2, r7
    a58e:	4633      	mov	r3, r6
    a590:	e9c0 2304 	strd	r2, r3, [r0, #16]
    a594:	e03b      	b.n	a60e <__kernel_rem_pio2+0x59a>
    a596:	f04f 0c00 	mov.w	ip, #0
    a59a:	4626      	mov	r6, r4
    a59c:	4667      	mov	r7, ip
    a59e:	9d06      	ldr	r5, [sp, #24]
    a5a0:	ab48      	add	r3, sp, #288	; 0x120
    a5a2:	3508      	adds	r5, #8
    a5a4:	441d      	add	r5, r3
    a5a6:	2e00      	cmp	r6, #0
    a5a8:	da42      	bge.n	a630 <__kernel_rem_pio2+0x5bc>
    a5aa:	9b00      	ldr	r3, [sp, #0]
    a5ac:	2b00      	cmp	r3, #0
    a5ae:	d049      	beq.n	a644 <__kernel_rem_pio2+0x5d0>
    a5b0:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
    a5b4:	4662      	mov	r2, ip
    a5b6:	460b      	mov	r3, r1
    a5b8:	9904      	ldr	r1, [sp, #16]
    a5ba:	2601      	movs	r6, #1
    a5bc:	e9c1 2300 	strd	r2, r3, [r1]
    a5c0:	a948      	add	r1, sp, #288	; 0x120
    a5c2:	463b      	mov	r3, r7
    a5c4:	e9d1 0100 	ldrd	r0, r1, [r1]
    a5c8:	f000 fa5a 	bl	aa80 <__aeabi_dsub>
    a5cc:	4684      	mov	ip, r0
    a5ce:	460f      	mov	r7, r1
    a5d0:	ad48      	add	r5, sp, #288	; 0x120
    a5d2:	42b4      	cmp	r4, r6
    a5d4:	da38      	bge.n	a648 <__kernel_rem_pio2+0x5d4>
    a5d6:	9b00      	ldr	r3, [sp, #0]
    a5d8:	b10b      	cbz	r3, a5de <__kernel_rem_pio2+0x56a>
    a5da:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
    a5de:	4662      	mov	r2, ip
    a5e0:	463b      	mov	r3, r7
    a5e2:	9904      	ldr	r1, [sp, #16]
    a5e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    a5e8:	e011      	b.n	a60e <__kernel_rem_pio2+0x59a>
    a5ea:	2700      	movs	r7, #0
    a5ec:	463d      	mov	r5, r7
    a5ee:	9b06      	ldr	r3, [sp, #24]
    a5f0:	aa98      	add	r2, sp, #608	; 0x260
    a5f2:	4413      	add	r3, r2
    a5f4:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
    a5f8:	2c00      	cmp	r4, #0
    a5fa:	da0f      	bge.n	a61c <__kernel_rem_pio2+0x5a8>
    a5fc:	9b00      	ldr	r3, [sp, #0]
    a5fe:	b10b      	cbz	r3, a604 <__kernel_rem_pio2+0x590>
    a600:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    a604:	463a      	mov	r2, r7
    a606:	462b      	mov	r3, r5
    a608:	9904      	ldr	r1, [sp, #16]
    a60a:	e9c1 2300 	strd	r2, r3, [r1]
    a60e:	9b05      	ldr	r3, [sp, #20]
    a610:	f003 0007 	and.w	r0, r3, #7
    a614:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
    a618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a61c:	4638      	mov	r0, r7
    a61e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
    a622:	4629      	mov	r1, r5
    a624:	f000 fa2e 	bl	aa84 <__adddf3>
    a628:	3c01      	subs	r4, #1
    a62a:	4607      	mov	r7, r0
    a62c:	460d      	mov	r5, r1
    a62e:	e7e3      	b.n	a5f8 <__kernel_rem_pio2+0x584>
    a630:	4660      	mov	r0, ip
    a632:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
    a636:	4639      	mov	r1, r7
    a638:	f000 fa24 	bl	aa84 <__adddf3>
    a63c:	3e01      	subs	r6, #1
    a63e:	4684      	mov	ip, r0
    a640:	460f      	mov	r7, r1
    a642:	e7b0      	b.n	a5a6 <__kernel_rem_pio2+0x532>
    a644:	4639      	mov	r1, r7
    a646:	e7b5      	b.n	a5b4 <__kernel_rem_pio2+0x540>
    a648:	4660      	mov	r0, ip
    a64a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
    a64e:	4639      	mov	r1, r7
    a650:	f000 fa18 	bl	aa84 <__adddf3>
    a654:	3601      	adds	r6, #1
    a656:	4684      	mov	ip, r0
    a658:	460f      	mov	r7, r1
    a65a:	e7ba      	b.n	a5d2 <__kernel_rem_pio2+0x55e>
    a65c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
    a660:	e9da 2302 	ldrd	r2, r3, [sl, #8]
    a664:	4640      	mov	r0, r8
    a666:	4649      	mov	r1, r9
    a668:	e9cd 2302 	strd	r2, r3, [sp, #8]
    a66c:	f000 fa0a 	bl	aa84 <__adddf3>
    a670:	4602      	mov	r2, r0
    a672:	460b      	mov	r3, r1
    a674:	4606      	mov	r6, r0
    a676:	460f      	mov	r7, r1
    a678:	4640      	mov	r0, r8
    a67a:	4649      	mov	r1, r9
    a67c:	f000 fa00 	bl	aa80 <__aeabi_dsub>
    a680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a684:	f000 f9fe 	bl	aa84 <__adddf3>
    a688:	f10b 3bff 	add.w	fp, fp, #4294967295
    a68c:	e9ca 0102 	strd	r0, r1, [sl, #8]
    a690:	e9ca 6700 	strd	r6, r7, [sl]
    a694:	e757      	b.n	a546 <__kernel_rem_pio2+0x4d2>
    a696:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
    a69a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
    a69e:	4630      	mov	r0, r6
    a6a0:	4639      	mov	r1, r7
    a6a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    a6a6:	f000 f9ed 	bl	aa84 <__adddf3>
    a6aa:	4602      	mov	r2, r0
    a6ac:	460b      	mov	r3, r1
    a6ae:	4680      	mov	r8, r0
    a6b0:	4689      	mov	r9, r1
    a6b2:	4630      	mov	r0, r6
    a6b4:	4639      	mov	r1, r7
    a6b6:	f000 f9e3 	bl	aa80 <__aeabi_dsub>
    a6ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a6be:	f000 f9e1 	bl	aa84 <__adddf3>
    a6c2:	f10a 3aff 	add.w	sl, sl, #4294967295
    a6c6:	e9c5 0102 	strd	r0, r1, [r5, #8]
    a6ca:	e9c5 8900 	strd	r8, r9, [r5]
    a6ce:	e73f      	b.n	a550 <__kernel_rem_pio2+0x4dc>
    a6d0:	4638      	mov	r0, r7
    a6d2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
    a6d6:	4631      	mov	r1, r6
    a6d8:	f000 f9d4 	bl	aa84 <__adddf3>
    a6dc:	3c01      	subs	r4, #1
    a6de:	4607      	mov	r7, r0
    a6e0:	460e      	mov	r6, r1
    a6e2:	e73f      	b.n	a564 <__kernel_rem_pio2+0x4f0>
    a6e4:	9b04      	ldr	r3, [sp, #16]
    a6e6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    a6ea:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    a6ee:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
    a6f2:	601d      	str	r5, [r3, #0]
    a6f4:	e9c3 0401 	strd	r0, r4, [r3, #4]
    a6f8:	e9c3 1703 	strd	r1, r7, [r3, #12]
    a6fc:	615e      	str	r6, [r3, #20]
    a6fe:	e786      	b.n	a60e <__kernel_rem_pio2+0x59a>
    a700:	41700000 	.word	0x41700000
    a704:	3e700000 	.word	0x3e700000

0000a708 <__kernel_sin>:
    a708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a70c:	b086      	sub	sp, #24
    a70e:	e9cd 2300 	strd	r2, r3, [sp]
    a712:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    a716:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
    a71a:	4682      	mov	sl, r0
    a71c:	460c      	mov	r4, r1
    a71e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    a720:	da03      	bge.n	a72a <__kernel_sin+0x22>
    a722:	f000 fdff 	bl	b324 <__aeabi_d2iz>
    a726:	2800      	cmp	r0, #0
    a728:	d050      	beq.n	a7cc <__kernel_sin+0xc4>
    a72a:	4652      	mov	r2, sl
    a72c:	4623      	mov	r3, r4
    a72e:	4650      	mov	r0, sl
    a730:	4621      	mov	r1, r4
    a732:	f000 fb5d 	bl	adf0 <__aeabi_dmul>
    a736:	4606      	mov	r6, r0
    a738:	460f      	mov	r7, r1
    a73a:	4602      	mov	r2, r0
    a73c:	460b      	mov	r3, r1
    a73e:	4650      	mov	r0, sl
    a740:	4621      	mov	r1, r4
    a742:	f000 fb55 	bl	adf0 <__aeabi_dmul>
    a746:	a33e      	add	r3, pc, #248	; (adr r3, a840 <__kernel_sin+0x138>)
    a748:	e9d3 2300 	ldrd	r2, r3, [r3]
    a74c:	4680      	mov	r8, r0
    a74e:	4689      	mov	r9, r1
    a750:	4630      	mov	r0, r6
    a752:	4639      	mov	r1, r7
    a754:	f000 fb4c 	bl	adf0 <__aeabi_dmul>
    a758:	a33b      	add	r3, pc, #236	; (adr r3, a848 <__kernel_sin+0x140>)
    a75a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a75e:	f000 f98f 	bl	aa80 <__aeabi_dsub>
    a762:	4632      	mov	r2, r6
    a764:	463b      	mov	r3, r7
    a766:	f000 fb43 	bl	adf0 <__aeabi_dmul>
    a76a:	a339      	add	r3, pc, #228	; (adr r3, a850 <__kernel_sin+0x148>)
    a76c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a770:	f000 f988 	bl	aa84 <__adddf3>
    a774:	4632      	mov	r2, r6
    a776:	463b      	mov	r3, r7
    a778:	f000 fb3a 	bl	adf0 <__aeabi_dmul>
    a77c:	a336      	add	r3, pc, #216	; (adr r3, a858 <__kernel_sin+0x150>)
    a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a782:	f000 f97d 	bl	aa80 <__aeabi_dsub>
    a786:	4632      	mov	r2, r6
    a788:	463b      	mov	r3, r7
    a78a:	f000 fb31 	bl	adf0 <__aeabi_dmul>
    a78e:	a334      	add	r3, pc, #208	; (adr r3, a860 <__kernel_sin+0x158>)
    a790:	e9d3 2300 	ldrd	r2, r3, [r3]
    a794:	f000 f976 	bl	aa84 <__adddf3>
    a798:	e9cd 0102 	strd	r0, r1, [sp, #8]
    a79c:	b9dd      	cbnz	r5, a7d6 <__kernel_sin+0xce>
    a79e:	4602      	mov	r2, r0
    a7a0:	460b      	mov	r3, r1
    a7a2:	4630      	mov	r0, r6
    a7a4:	4639      	mov	r1, r7
    a7a6:	f000 fb23 	bl	adf0 <__aeabi_dmul>
    a7aa:	a32f      	add	r3, pc, #188	; (adr r3, a868 <__kernel_sin+0x160>)
    a7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    a7b0:	f000 f966 	bl	aa80 <__aeabi_dsub>
    a7b4:	4642      	mov	r2, r8
    a7b6:	464b      	mov	r3, r9
    a7b8:	f000 fb1a 	bl	adf0 <__aeabi_dmul>
    a7bc:	4602      	mov	r2, r0
    a7be:	460b      	mov	r3, r1
    a7c0:	4650      	mov	r0, sl
    a7c2:	4621      	mov	r1, r4
    a7c4:	f000 f95e 	bl	aa84 <__adddf3>
    a7c8:	4682      	mov	sl, r0
    a7ca:	460c      	mov	r4, r1
    a7cc:	4650      	mov	r0, sl
    a7ce:	4621      	mov	r1, r4
    a7d0:	b006      	add	sp, #24
    a7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a7d6:	2200      	movs	r2, #0
    a7d8:	e9dd 0100 	ldrd	r0, r1, [sp]
    a7dc:	4b24      	ldr	r3, [pc, #144]	; (a870 <__kernel_sin+0x168>)
    a7de:	f000 fb07 	bl	adf0 <__aeabi_dmul>
    a7e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a7e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a7ea:	4640      	mov	r0, r8
    a7ec:	4649      	mov	r1, r9
    a7ee:	f000 faff 	bl	adf0 <__aeabi_dmul>
    a7f2:	4602      	mov	r2, r0
    a7f4:	460b      	mov	r3, r1
    a7f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    a7fa:	f000 f941 	bl	aa80 <__aeabi_dsub>
    a7fe:	4632      	mov	r2, r6
    a800:	463b      	mov	r3, r7
    a802:	f000 faf5 	bl	adf0 <__aeabi_dmul>
    a806:	e9dd 2300 	ldrd	r2, r3, [sp]
    a80a:	f000 f939 	bl	aa80 <__aeabi_dsub>
    a80e:	a316      	add	r3, pc, #88	; (adr r3, a868 <__kernel_sin+0x160>)
    a810:	e9d3 2300 	ldrd	r2, r3, [r3]
    a814:	4606      	mov	r6, r0
    a816:	460f      	mov	r7, r1
    a818:	4640      	mov	r0, r8
    a81a:	4649      	mov	r1, r9
    a81c:	f000 fae8 	bl	adf0 <__aeabi_dmul>
    a820:	4602      	mov	r2, r0
    a822:	460b      	mov	r3, r1
    a824:	4630      	mov	r0, r6
    a826:	4639      	mov	r1, r7
    a828:	f000 f92c 	bl	aa84 <__adddf3>
    a82c:	4602      	mov	r2, r0
    a82e:	460b      	mov	r3, r1
    a830:	4650      	mov	r0, sl
    a832:	4621      	mov	r1, r4
    a834:	f000 f924 	bl	aa80 <__aeabi_dsub>
    a838:	e7c6      	b.n	a7c8 <__kernel_sin+0xc0>
    a83a:	bf00      	nop
    a83c:	f3af 8000 	nop.w
    a840:	5acfd57c 	.word	0x5acfd57c
    a844:	3de5d93a 	.word	0x3de5d93a
    a848:	8a2b9ceb 	.word	0x8a2b9ceb
    a84c:	3e5ae5e6 	.word	0x3e5ae5e6
    a850:	57b1fe7d 	.word	0x57b1fe7d
    a854:	3ec71de3 	.word	0x3ec71de3
    a858:	19c161d5 	.word	0x19c161d5
    a85c:	3f2a01a0 	.word	0x3f2a01a0
    a860:	1110f8a6 	.word	0x1110f8a6
    a864:	3f811111 	.word	0x3f811111
    a868:	55555549 	.word	0x55555549
    a86c:	3fc55555 	.word	0x3fc55555
    a870:	3fe00000 	.word	0x3fe00000

0000a874 <fabs>:
    a874:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    a878:	4619      	mov	r1, r3
    a87a:	4770      	bx	lr
    a87c:	0000      	movs	r0, r0
	...

0000a880 <floor>:
    a880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a884:	f3c1 580a 	ubfx	r8, r1, #20, #11
    a888:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
    a88c:	2e13      	cmp	r6, #19
    a88e:	4607      	mov	r7, r0
    a890:	460b      	mov	r3, r1
    a892:	460c      	mov	r4, r1
    a894:	4605      	mov	r5, r0
    a896:	dc35      	bgt.n	a904 <floor+0x84>
    a898:	2e00      	cmp	r6, #0
    a89a:	da16      	bge.n	a8ca <floor+0x4a>
    a89c:	a336      	add	r3, pc, #216	; (adr r3, a978 <floor+0xf8>)
    a89e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a8a2:	f000 f8ef 	bl	aa84 <__adddf3>
    a8a6:	2200      	movs	r2, #0
    a8a8:	2300      	movs	r3, #0
    a8aa:	f000 fd31 	bl	b310 <__aeabi_dcmpgt>
    a8ae:	b148      	cbz	r0, a8c4 <floor+0x44>
    a8b0:	2c00      	cmp	r4, #0
    a8b2:	da5b      	bge.n	a96c <floor+0xec>
    a8b4:	2500      	movs	r5, #0
    a8b6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
    a8ba:	4a31      	ldr	r2, [pc, #196]	; (a980 <floor+0x100>)
    a8bc:	433b      	orrs	r3, r7
    a8be:	42ab      	cmp	r3, r5
    a8c0:	bf18      	it	ne
    a8c2:	4614      	movne	r4, r2
    a8c4:	4623      	mov	r3, r4
    a8c6:	462f      	mov	r7, r5
    a8c8:	e026      	b.n	a918 <floor+0x98>
    a8ca:	4a2e      	ldr	r2, [pc, #184]	; (a984 <floor+0x104>)
    a8cc:	fa42 f806 	asr.w	r8, r2, r6
    a8d0:	ea01 0208 	and.w	r2, r1, r8
    a8d4:	4302      	orrs	r2, r0
    a8d6:	d01f      	beq.n	a918 <floor+0x98>
    a8d8:	a327      	add	r3, pc, #156	; (adr r3, a978 <floor+0xf8>)
    a8da:	e9d3 2300 	ldrd	r2, r3, [r3]
    a8de:	f000 f8d1 	bl	aa84 <__adddf3>
    a8e2:	2200      	movs	r2, #0
    a8e4:	2300      	movs	r3, #0
    a8e6:	f000 fd13 	bl	b310 <__aeabi_dcmpgt>
    a8ea:	2800      	cmp	r0, #0
    a8ec:	d0ea      	beq.n	a8c4 <floor+0x44>
    a8ee:	2c00      	cmp	r4, #0
    a8f0:	bfbe      	ittt	lt
    a8f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
    a8f6:	fa43 f606 	asrlt.w	r6, r3, r6
    a8fa:	19a4      	addlt	r4, r4, r6
    a8fc:	ea24 0408 	bic.w	r4, r4, r8
    a900:	2500      	movs	r5, #0
    a902:	e7df      	b.n	a8c4 <floor+0x44>
    a904:	2e33      	cmp	r6, #51	; 0x33
    a906:	dd0b      	ble.n	a920 <floor+0xa0>
    a908:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    a90c:	d104      	bne.n	a918 <floor+0x98>
    a90e:	4602      	mov	r2, r0
    a910:	f000 f8b8 	bl	aa84 <__adddf3>
    a914:	4607      	mov	r7, r0
    a916:	460b      	mov	r3, r1
    a918:	4638      	mov	r0, r7
    a91a:	4619      	mov	r1, r3
    a91c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a920:	f04f 32ff 	mov.w	r2, #4294967295
    a924:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
    a928:	fa22 f808 	lsr.w	r8, r2, r8
    a92c:	ea18 0f00 	tst.w	r8, r0
    a930:	d0f2      	beq.n	a918 <floor+0x98>
    a932:	a311      	add	r3, pc, #68	; (adr r3, a978 <floor+0xf8>)
    a934:	e9d3 2300 	ldrd	r2, r3, [r3]
    a938:	f000 f8a4 	bl	aa84 <__adddf3>
    a93c:	2200      	movs	r2, #0
    a93e:	2300      	movs	r3, #0
    a940:	f000 fce6 	bl	b310 <__aeabi_dcmpgt>
    a944:	2800      	cmp	r0, #0
    a946:	d0bd      	beq.n	a8c4 <floor+0x44>
    a948:	2c00      	cmp	r4, #0
    a94a:	da02      	bge.n	a952 <floor+0xd2>
    a94c:	2e14      	cmp	r6, #20
    a94e:	d103      	bne.n	a958 <floor+0xd8>
    a950:	3401      	adds	r4, #1
    a952:	ea25 0508 	bic.w	r5, r5, r8
    a956:	e7b5      	b.n	a8c4 <floor+0x44>
    a958:	2301      	movs	r3, #1
    a95a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
    a95e:	fa03 f606 	lsl.w	r6, r3, r6
    a962:	4435      	add	r5, r6
    a964:	42bd      	cmp	r5, r7
    a966:	bf38      	it	cc
    a968:	18e4      	addcc	r4, r4, r3
    a96a:	e7f2      	b.n	a952 <floor+0xd2>
    a96c:	2500      	movs	r5, #0
    a96e:	462c      	mov	r4, r5
    a970:	e7a8      	b.n	a8c4 <floor+0x44>
    a972:	bf00      	nop
    a974:	f3af 8000 	nop.w
    a978:	8800759c 	.word	0x8800759c
    a97c:	7e37e43c 	.word	0x7e37e43c
    a980:	bff00000 	.word	0xbff00000
    a984:	000fffff 	.word	0x000fffff

0000a988 <scalbn>:
    a988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a98a:	4616      	mov	r6, r2
    a98c:	f3c1 520a 	ubfx	r2, r1, #20, #11
    a990:	4604      	mov	r4, r0
    a992:	460d      	mov	r5, r1
    a994:	460b      	mov	r3, r1
    a996:	b982      	cbnz	r2, a9ba <scalbn+0x32>
    a998:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    a99c:	4303      	orrs	r3, r0
    a99e:	d034      	beq.n	aa0a <scalbn+0x82>
    a9a0:	4b2d      	ldr	r3, [pc, #180]	; (aa58 <scalbn+0xd0>)
    a9a2:	2200      	movs	r2, #0
    a9a4:	f000 fa24 	bl	adf0 <__aeabi_dmul>
    a9a8:	4b2c      	ldr	r3, [pc, #176]	; (aa5c <scalbn+0xd4>)
    a9aa:	4604      	mov	r4, r0
    a9ac:	429e      	cmp	r6, r3
    a9ae:	460d      	mov	r5, r1
    a9b0:	da0d      	bge.n	a9ce <scalbn+0x46>
    a9b2:	a325      	add	r3, pc, #148	; (adr r3, aa48 <scalbn+0xc0>)
    a9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    a9b8:	e01c      	b.n	a9f4 <scalbn+0x6c>
    a9ba:	f240 77ff 	movw	r7, #2047	; 0x7ff
    a9be:	42ba      	cmp	r2, r7
    a9c0:	d109      	bne.n	a9d6 <scalbn+0x4e>
    a9c2:	4602      	mov	r2, r0
    a9c4:	f000 f85e 	bl	aa84 <__adddf3>
    a9c8:	4604      	mov	r4, r0
    a9ca:	460d      	mov	r5, r1
    a9cc:	e01d      	b.n	aa0a <scalbn+0x82>
    a9ce:	460b      	mov	r3, r1
    a9d0:	f3c1 520a 	ubfx	r2, r1, #20, #11
    a9d4:	3a36      	subs	r2, #54	; 0x36
    a9d6:	f240 71fe 	movw	r1, #2046	; 0x7fe
    a9da:	4432      	add	r2, r6
    a9dc:	428a      	cmp	r2, r1
    a9de:	dd0c      	ble.n	a9fa <scalbn+0x72>
    a9e0:	4622      	mov	r2, r4
    a9e2:	462b      	mov	r3, r5
    a9e4:	a11a      	add	r1, pc, #104	; (adr r1, aa50 <scalbn+0xc8>)
    a9e6:	e9d1 0100 	ldrd	r0, r1, [r1]
    a9ea:	f000 f83b 	bl	aa64 <copysign>
    a9ee:	a318      	add	r3, pc, #96	; (adr r3, aa50 <scalbn+0xc8>)
    a9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    a9f4:	f000 f9fc 	bl	adf0 <__aeabi_dmul>
    a9f8:	e7e6      	b.n	a9c8 <scalbn+0x40>
    a9fa:	2a00      	cmp	r2, #0
    a9fc:	dd08      	ble.n	aa10 <scalbn+0x88>
    a9fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    aa02:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    aa06:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
    aa0a:	4620      	mov	r0, r4
    aa0c:	4629      	mov	r1, r5
    aa0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa10:	f112 0f35 	cmn.w	r2, #53	; 0x35
    aa14:	da0b      	bge.n	aa2e <scalbn+0xa6>
    aa16:	f24c 3350 	movw	r3, #50000	; 0xc350
    aa1a:	429e      	cmp	r6, r3
    aa1c:	4622      	mov	r2, r4
    aa1e:	462b      	mov	r3, r5
    aa20:	dce0      	bgt.n	a9e4 <scalbn+0x5c>
    aa22:	a109      	add	r1, pc, #36	; (adr r1, aa48 <scalbn+0xc0>)
    aa24:	e9d1 0100 	ldrd	r0, r1, [r1]
    aa28:	f000 f81c 	bl	aa64 <copysign>
    aa2c:	e7c1      	b.n	a9b2 <scalbn+0x2a>
    aa2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    aa32:	3236      	adds	r2, #54	; 0x36
    aa34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    aa38:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
    aa3c:	4620      	mov	r0, r4
    aa3e:	4629      	mov	r1, r5
    aa40:	2200      	movs	r2, #0
    aa42:	4b07      	ldr	r3, [pc, #28]	; (aa60 <scalbn+0xd8>)
    aa44:	e7d6      	b.n	a9f4 <scalbn+0x6c>
    aa46:	bf00      	nop
    aa48:	c2f8f359 	.word	0xc2f8f359
    aa4c:	01a56e1f 	.word	0x01a56e1f
    aa50:	8800759c 	.word	0x8800759c
    aa54:	7e37e43c 	.word	0x7e37e43c
    aa58:	43500000 	.word	0x43500000
    aa5c:	ffff3cb0 	.word	0xffff3cb0
    aa60:	3c900000 	.word	0x3c900000

0000aa64 <copysign>:
    aa64:	b530      	push	{r4, r5, lr}
    aa66:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    aa6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
    aa6e:	ea42 0503 	orr.w	r5, r2, r3
    aa72:	4629      	mov	r1, r5
    aa74:	bd30      	pop	{r4, r5, pc}
	...

0000aa78 <__aeabi_drsub>:
    aa78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    aa7c:	e002      	b.n	aa84 <__adddf3>
    aa7e:	bf00      	nop

0000aa80 <__aeabi_dsub>:
    aa80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000aa84 <__adddf3>:
    aa84:	b530      	push	{r4, r5, lr}
    aa86:	ea4f 0441 	mov.w	r4, r1, lsl #1
    aa8a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    aa8e:	ea94 0f05 	teq	r4, r5
    aa92:	bf08      	it	eq
    aa94:	ea90 0f02 	teqeq	r0, r2
    aa98:	bf1f      	itttt	ne
    aa9a:	ea54 0c00 	orrsne.w	ip, r4, r0
    aa9e:	ea55 0c02 	orrsne.w	ip, r5, r2
    aaa2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    aaa6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    aaaa:	f000 80e2 	beq.w	ac72 <__adddf3+0x1ee>
    aaae:	ea4f 5454 	mov.w	r4, r4, lsr #21
    aab2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    aab6:	bfb8      	it	lt
    aab8:	426d      	neglt	r5, r5
    aaba:	dd0c      	ble.n	aad6 <__adddf3+0x52>
    aabc:	442c      	add	r4, r5
    aabe:	ea80 0202 	eor.w	r2, r0, r2
    aac2:	ea81 0303 	eor.w	r3, r1, r3
    aac6:	ea82 0000 	eor.w	r0, r2, r0
    aaca:	ea83 0101 	eor.w	r1, r3, r1
    aace:	ea80 0202 	eor.w	r2, r0, r2
    aad2:	ea81 0303 	eor.w	r3, r1, r3
    aad6:	2d36      	cmp	r5, #54	; 0x36
    aad8:	bf88      	it	hi
    aada:	bd30      	pophi	{r4, r5, pc}
    aadc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    aae0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    aae4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    aae8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    aaec:	d002      	beq.n	aaf4 <__adddf3+0x70>
    aaee:	4240      	negs	r0, r0
    aaf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    aaf4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    aaf8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    aafc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    ab00:	d002      	beq.n	ab08 <__adddf3+0x84>
    ab02:	4252      	negs	r2, r2
    ab04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ab08:	ea94 0f05 	teq	r4, r5
    ab0c:	f000 80a7 	beq.w	ac5e <__adddf3+0x1da>
    ab10:	f1a4 0401 	sub.w	r4, r4, #1
    ab14:	f1d5 0e20 	rsbs	lr, r5, #32
    ab18:	db0d      	blt.n	ab36 <__adddf3+0xb2>
    ab1a:	fa02 fc0e 	lsl.w	ip, r2, lr
    ab1e:	fa22 f205 	lsr.w	r2, r2, r5
    ab22:	1880      	adds	r0, r0, r2
    ab24:	f141 0100 	adc.w	r1, r1, #0
    ab28:	fa03 f20e 	lsl.w	r2, r3, lr
    ab2c:	1880      	adds	r0, r0, r2
    ab2e:	fa43 f305 	asr.w	r3, r3, r5
    ab32:	4159      	adcs	r1, r3
    ab34:	e00e      	b.n	ab54 <__adddf3+0xd0>
    ab36:	f1a5 0520 	sub.w	r5, r5, #32
    ab3a:	f10e 0e20 	add.w	lr, lr, #32
    ab3e:	2a01      	cmp	r2, #1
    ab40:	fa03 fc0e 	lsl.w	ip, r3, lr
    ab44:	bf28      	it	cs
    ab46:	f04c 0c02 	orrcs.w	ip, ip, #2
    ab4a:	fa43 f305 	asr.w	r3, r3, r5
    ab4e:	18c0      	adds	r0, r0, r3
    ab50:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    ab54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ab58:	d507      	bpl.n	ab6a <__adddf3+0xe6>
    ab5a:	f04f 0e00 	mov.w	lr, #0
    ab5e:	f1dc 0c00 	rsbs	ip, ip, #0
    ab62:	eb7e 0000 	sbcs.w	r0, lr, r0
    ab66:	eb6e 0101 	sbc.w	r1, lr, r1
    ab6a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    ab6e:	d31b      	bcc.n	aba8 <__adddf3+0x124>
    ab70:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    ab74:	d30c      	bcc.n	ab90 <__adddf3+0x10c>
    ab76:	0849      	lsrs	r1, r1, #1
    ab78:	ea5f 0030 	movs.w	r0, r0, rrx
    ab7c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    ab80:	f104 0401 	add.w	r4, r4, #1
    ab84:	ea4f 5244 	mov.w	r2, r4, lsl #21
    ab88:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    ab8c:	f080 809a 	bcs.w	acc4 <__adddf3+0x240>
    ab90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    ab94:	bf08      	it	eq
    ab96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ab9a:	f150 0000 	adcs.w	r0, r0, #0
    ab9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    aba2:	ea41 0105 	orr.w	r1, r1, r5
    aba6:	bd30      	pop	{r4, r5, pc}
    aba8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    abac:	4140      	adcs	r0, r0
    abae:	eb41 0101 	adc.w	r1, r1, r1
    abb2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    abb6:	f1a4 0401 	sub.w	r4, r4, #1
    abba:	d1e9      	bne.n	ab90 <__adddf3+0x10c>
    abbc:	f091 0f00 	teq	r1, #0
    abc0:	bf04      	itt	eq
    abc2:	4601      	moveq	r1, r0
    abc4:	2000      	moveq	r0, #0
    abc6:	fab1 f381 	clz	r3, r1
    abca:	bf08      	it	eq
    abcc:	3320      	addeq	r3, #32
    abce:	f1a3 030b 	sub.w	r3, r3, #11
    abd2:	f1b3 0220 	subs.w	r2, r3, #32
    abd6:	da0c      	bge.n	abf2 <__adddf3+0x16e>
    abd8:	320c      	adds	r2, #12
    abda:	dd08      	ble.n	abee <__adddf3+0x16a>
    abdc:	f102 0c14 	add.w	ip, r2, #20
    abe0:	f1c2 020c 	rsb	r2, r2, #12
    abe4:	fa01 f00c 	lsl.w	r0, r1, ip
    abe8:	fa21 f102 	lsr.w	r1, r1, r2
    abec:	e00c      	b.n	ac08 <__adddf3+0x184>
    abee:	f102 0214 	add.w	r2, r2, #20
    abf2:	bfd8      	it	le
    abf4:	f1c2 0c20 	rsble	ip, r2, #32
    abf8:	fa01 f102 	lsl.w	r1, r1, r2
    abfc:	fa20 fc0c 	lsr.w	ip, r0, ip
    ac00:	bfdc      	itt	le
    ac02:	ea41 010c 	orrle.w	r1, r1, ip
    ac06:	4090      	lslle	r0, r2
    ac08:	1ae4      	subs	r4, r4, r3
    ac0a:	bfa2      	ittt	ge
    ac0c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    ac10:	4329      	orrge	r1, r5
    ac12:	bd30      	popge	{r4, r5, pc}
    ac14:	ea6f 0404 	mvn.w	r4, r4
    ac18:	3c1f      	subs	r4, #31
    ac1a:	da1c      	bge.n	ac56 <__adddf3+0x1d2>
    ac1c:	340c      	adds	r4, #12
    ac1e:	dc0e      	bgt.n	ac3e <__adddf3+0x1ba>
    ac20:	f104 0414 	add.w	r4, r4, #20
    ac24:	f1c4 0220 	rsb	r2, r4, #32
    ac28:	fa20 f004 	lsr.w	r0, r0, r4
    ac2c:	fa01 f302 	lsl.w	r3, r1, r2
    ac30:	ea40 0003 	orr.w	r0, r0, r3
    ac34:	fa21 f304 	lsr.w	r3, r1, r4
    ac38:	ea45 0103 	orr.w	r1, r5, r3
    ac3c:	bd30      	pop	{r4, r5, pc}
    ac3e:	f1c4 040c 	rsb	r4, r4, #12
    ac42:	f1c4 0220 	rsb	r2, r4, #32
    ac46:	fa20 f002 	lsr.w	r0, r0, r2
    ac4a:	fa01 f304 	lsl.w	r3, r1, r4
    ac4e:	ea40 0003 	orr.w	r0, r0, r3
    ac52:	4629      	mov	r1, r5
    ac54:	bd30      	pop	{r4, r5, pc}
    ac56:	fa21 f004 	lsr.w	r0, r1, r4
    ac5a:	4629      	mov	r1, r5
    ac5c:	bd30      	pop	{r4, r5, pc}
    ac5e:	f094 0f00 	teq	r4, #0
    ac62:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    ac66:	bf06      	itte	eq
    ac68:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    ac6c:	3401      	addeq	r4, #1
    ac6e:	3d01      	subne	r5, #1
    ac70:	e74e      	b.n	ab10 <__adddf3+0x8c>
    ac72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    ac76:	bf18      	it	ne
    ac78:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    ac7c:	d029      	beq.n	acd2 <__adddf3+0x24e>
    ac7e:	ea94 0f05 	teq	r4, r5
    ac82:	bf08      	it	eq
    ac84:	ea90 0f02 	teqeq	r0, r2
    ac88:	d005      	beq.n	ac96 <__adddf3+0x212>
    ac8a:	ea54 0c00 	orrs.w	ip, r4, r0
    ac8e:	bf04      	itt	eq
    ac90:	4619      	moveq	r1, r3
    ac92:	4610      	moveq	r0, r2
    ac94:	bd30      	pop	{r4, r5, pc}
    ac96:	ea91 0f03 	teq	r1, r3
    ac9a:	bf1e      	ittt	ne
    ac9c:	2100      	movne	r1, #0
    ac9e:	2000      	movne	r0, #0
    aca0:	bd30      	popne	{r4, r5, pc}
    aca2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    aca6:	d105      	bne.n	acb4 <__adddf3+0x230>
    aca8:	0040      	lsls	r0, r0, #1
    acaa:	4149      	adcs	r1, r1
    acac:	bf28      	it	cs
    acae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    acb2:	bd30      	pop	{r4, r5, pc}
    acb4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    acb8:	bf3c      	itt	cc
    acba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    acbe:	bd30      	popcc	{r4, r5, pc}
    acc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    acc4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    acc8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    accc:	f04f 0000 	mov.w	r0, #0
    acd0:	bd30      	pop	{r4, r5, pc}
    acd2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    acd6:	bf1a      	itte	ne
    acd8:	4619      	movne	r1, r3
    acda:	4610      	movne	r0, r2
    acdc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    ace0:	bf1c      	itt	ne
    ace2:	460b      	movne	r3, r1
    ace4:	4602      	movne	r2, r0
    ace6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    acea:	bf06      	itte	eq
    acec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    acf0:	ea91 0f03 	teqeq	r1, r3
    acf4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    acf8:	bd30      	pop	{r4, r5, pc}
    acfa:	bf00      	nop

0000acfc <__aeabi_ui2d>:
    acfc:	f090 0f00 	teq	r0, #0
    ad00:	bf04      	itt	eq
    ad02:	2100      	moveq	r1, #0
    ad04:	4770      	bxeq	lr
    ad06:	b530      	push	{r4, r5, lr}
    ad08:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ad0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ad10:	f04f 0500 	mov.w	r5, #0
    ad14:	f04f 0100 	mov.w	r1, #0
    ad18:	e750      	b.n	abbc <__adddf3+0x138>
    ad1a:	bf00      	nop

0000ad1c <__aeabi_i2d>:
    ad1c:	f090 0f00 	teq	r0, #0
    ad20:	bf04      	itt	eq
    ad22:	2100      	moveq	r1, #0
    ad24:	4770      	bxeq	lr
    ad26:	b530      	push	{r4, r5, lr}
    ad28:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ad2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ad30:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    ad34:	bf48      	it	mi
    ad36:	4240      	negmi	r0, r0
    ad38:	f04f 0100 	mov.w	r1, #0
    ad3c:	e73e      	b.n	abbc <__adddf3+0x138>
    ad3e:	bf00      	nop

0000ad40 <__aeabi_f2d>:
    ad40:	0042      	lsls	r2, r0, #1
    ad42:	ea4f 01e2 	mov.w	r1, r2, asr #3
    ad46:	ea4f 0131 	mov.w	r1, r1, rrx
    ad4a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    ad4e:	bf1f      	itttt	ne
    ad50:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    ad54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    ad58:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    ad5c:	4770      	bxne	lr
    ad5e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    ad62:	bf08      	it	eq
    ad64:	4770      	bxeq	lr
    ad66:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    ad6a:	bf04      	itt	eq
    ad6c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    ad70:	4770      	bxeq	lr
    ad72:	b530      	push	{r4, r5, lr}
    ad74:	f44f 7460 	mov.w	r4, #896	; 0x380
    ad78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ad7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    ad80:	e71c      	b.n	abbc <__adddf3+0x138>
    ad82:	bf00      	nop

0000ad84 <__aeabi_ul2d>:
    ad84:	ea50 0201 	orrs.w	r2, r0, r1
    ad88:	bf08      	it	eq
    ad8a:	4770      	bxeq	lr
    ad8c:	b530      	push	{r4, r5, lr}
    ad8e:	f04f 0500 	mov.w	r5, #0
    ad92:	e00a      	b.n	adaa <__aeabi_l2d+0x16>

0000ad94 <__aeabi_l2d>:
    ad94:	ea50 0201 	orrs.w	r2, r0, r1
    ad98:	bf08      	it	eq
    ad9a:	4770      	bxeq	lr
    ad9c:	b530      	push	{r4, r5, lr}
    ad9e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    ada2:	d502      	bpl.n	adaa <__aeabi_l2d+0x16>
    ada4:	4240      	negs	r0, r0
    ada6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    adaa:	f44f 6480 	mov.w	r4, #1024	; 0x400
    adae:	f104 0432 	add.w	r4, r4, #50	; 0x32
    adb2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    adb6:	f43f aed8 	beq.w	ab6a <__adddf3+0xe6>
    adba:	f04f 0203 	mov.w	r2, #3
    adbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    adc2:	bf18      	it	ne
    adc4:	3203      	addne	r2, #3
    adc6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    adca:	bf18      	it	ne
    adcc:	3203      	addne	r2, #3
    adce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    add2:	f1c2 0320 	rsb	r3, r2, #32
    add6:	fa00 fc03 	lsl.w	ip, r0, r3
    adda:	fa20 f002 	lsr.w	r0, r0, r2
    adde:	fa01 fe03 	lsl.w	lr, r1, r3
    ade2:	ea40 000e 	orr.w	r0, r0, lr
    ade6:	fa21 f102 	lsr.w	r1, r1, r2
    adea:	4414      	add	r4, r2
    adec:	e6bd      	b.n	ab6a <__adddf3+0xe6>
    adee:	bf00      	nop

0000adf0 <__aeabi_dmul>:
    adf0:	b570      	push	{r4, r5, r6, lr}
    adf2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    adf6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    adfa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    adfe:	bf1d      	ittte	ne
    ae00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    ae04:	ea94 0f0c 	teqne	r4, ip
    ae08:	ea95 0f0c 	teqne	r5, ip
    ae0c:	f000 f8de 	bleq	afcc <__aeabi_dmul+0x1dc>
    ae10:	442c      	add	r4, r5
    ae12:	ea81 0603 	eor.w	r6, r1, r3
    ae16:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    ae1a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    ae1e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    ae22:	bf18      	it	ne
    ae24:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    ae28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ae2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ae30:	d038      	beq.n	aea4 <__aeabi_dmul+0xb4>
    ae32:	fba0 ce02 	umull	ip, lr, r0, r2
    ae36:	f04f 0500 	mov.w	r5, #0
    ae3a:	fbe1 e502 	umlal	lr, r5, r1, r2
    ae3e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    ae42:	fbe0 e503 	umlal	lr, r5, r0, r3
    ae46:	f04f 0600 	mov.w	r6, #0
    ae4a:	fbe1 5603 	umlal	r5, r6, r1, r3
    ae4e:	f09c 0f00 	teq	ip, #0
    ae52:	bf18      	it	ne
    ae54:	f04e 0e01 	orrne.w	lr, lr, #1
    ae58:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    ae5c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    ae60:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    ae64:	d204      	bcs.n	ae70 <__aeabi_dmul+0x80>
    ae66:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    ae6a:	416d      	adcs	r5, r5
    ae6c:	eb46 0606 	adc.w	r6, r6, r6
    ae70:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    ae74:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    ae78:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    ae7c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    ae80:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    ae84:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    ae88:	bf88      	it	hi
    ae8a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    ae8e:	d81e      	bhi.n	aece <__aeabi_dmul+0xde>
    ae90:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    ae94:	bf08      	it	eq
    ae96:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    ae9a:	f150 0000 	adcs.w	r0, r0, #0
    ae9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    aea2:	bd70      	pop	{r4, r5, r6, pc}
    aea4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    aea8:	ea46 0101 	orr.w	r1, r6, r1
    aeac:	ea40 0002 	orr.w	r0, r0, r2
    aeb0:	ea81 0103 	eor.w	r1, r1, r3
    aeb4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    aeb8:	bfc2      	ittt	gt
    aeba:	ebd4 050c 	rsbsgt	r5, r4, ip
    aebe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    aec2:	bd70      	popgt	{r4, r5, r6, pc}
    aec4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    aec8:	f04f 0e00 	mov.w	lr, #0
    aecc:	3c01      	subs	r4, #1
    aece:	f300 80ab 	bgt.w	b028 <__aeabi_dmul+0x238>
    aed2:	f114 0f36 	cmn.w	r4, #54	; 0x36
    aed6:	bfde      	ittt	le
    aed8:	2000      	movle	r0, #0
    aeda:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    aede:	bd70      	pople	{r4, r5, r6, pc}
    aee0:	f1c4 0400 	rsb	r4, r4, #0
    aee4:	3c20      	subs	r4, #32
    aee6:	da35      	bge.n	af54 <__aeabi_dmul+0x164>
    aee8:	340c      	adds	r4, #12
    aeea:	dc1b      	bgt.n	af24 <__aeabi_dmul+0x134>
    aeec:	f104 0414 	add.w	r4, r4, #20
    aef0:	f1c4 0520 	rsb	r5, r4, #32
    aef4:	fa00 f305 	lsl.w	r3, r0, r5
    aef8:	fa20 f004 	lsr.w	r0, r0, r4
    aefc:	fa01 f205 	lsl.w	r2, r1, r5
    af00:	ea40 0002 	orr.w	r0, r0, r2
    af04:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    af08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    af0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    af10:	fa21 f604 	lsr.w	r6, r1, r4
    af14:	eb42 0106 	adc.w	r1, r2, r6
    af18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    af1c:	bf08      	it	eq
    af1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    af22:	bd70      	pop	{r4, r5, r6, pc}
    af24:	f1c4 040c 	rsb	r4, r4, #12
    af28:	f1c4 0520 	rsb	r5, r4, #32
    af2c:	fa00 f304 	lsl.w	r3, r0, r4
    af30:	fa20 f005 	lsr.w	r0, r0, r5
    af34:	fa01 f204 	lsl.w	r2, r1, r4
    af38:	ea40 0002 	orr.w	r0, r0, r2
    af3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    af40:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    af44:	f141 0100 	adc.w	r1, r1, #0
    af48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    af4c:	bf08      	it	eq
    af4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    af52:	bd70      	pop	{r4, r5, r6, pc}
    af54:	f1c4 0520 	rsb	r5, r4, #32
    af58:	fa00 f205 	lsl.w	r2, r0, r5
    af5c:	ea4e 0e02 	orr.w	lr, lr, r2
    af60:	fa20 f304 	lsr.w	r3, r0, r4
    af64:	fa01 f205 	lsl.w	r2, r1, r5
    af68:	ea43 0302 	orr.w	r3, r3, r2
    af6c:	fa21 f004 	lsr.w	r0, r1, r4
    af70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    af74:	fa21 f204 	lsr.w	r2, r1, r4
    af78:	ea20 0002 	bic.w	r0, r0, r2
    af7c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    af80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    af84:	bf08      	it	eq
    af86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    af8a:	bd70      	pop	{r4, r5, r6, pc}
    af8c:	f094 0f00 	teq	r4, #0
    af90:	d10f      	bne.n	afb2 <__aeabi_dmul+0x1c2>
    af92:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    af96:	0040      	lsls	r0, r0, #1
    af98:	eb41 0101 	adc.w	r1, r1, r1
    af9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    afa0:	bf08      	it	eq
    afa2:	3c01      	subeq	r4, #1
    afa4:	d0f7      	beq.n	af96 <__aeabi_dmul+0x1a6>
    afa6:	ea41 0106 	orr.w	r1, r1, r6
    afaa:	f095 0f00 	teq	r5, #0
    afae:	bf18      	it	ne
    afb0:	4770      	bxne	lr
    afb2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    afb6:	0052      	lsls	r2, r2, #1
    afb8:	eb43 0303 	adc.w	r3, r3, r3
    afbc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    afc0:	bf08      	it	eq
    afc2:	3d01      	subeq	r5, #1
    afc4:	d0f7      	beq.n	afb6 <__aeabi_dmul+0x1c6>
    afc6:	ea43 0306 	orr.w	r3, r3, r6
    afca:	4770      	bx	lr
    afcc:	ea94 0f0c 	teq	r4, ip
    afd0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    afd4:	bf18      	it	ne
    afd6:	ea95 0f0c 	teqne	r5, ip
    afda:	d00c      	beq.n	aff6 <__aeabi_dmul+0x206>
    afdc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    afe0:	bf18      	it	ne
    afe2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    afe6:	d1d1      	bne.n	af8c <__aeabi_dmul+0x19c>
    afe8:	ea81 0103 	eor.w	r1, r1, r3
    afec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    aff0:	f04f 0000 	mov.w	r0, #0
    aff4:	bd70      	pop	{r4, r5, r6, pc}
    aff6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    affa:	bf06      	itte	eq
    affc:	4610      	moveq	r0, r2
    affe:	4619      	moveq	r1, r3
    b000:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b004:	d019      	beq.n	b03a <__aeabi_dmul+0x24a>
    b006:	ea94 0f0c 	teq	r4, ip
    b00a:	d102      	bne.n	b012 <__aeabi_dmul+0x222>
    b00c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    b010:	d113      	bne.n	b03a <__aeabi_dmul+0x24a>
    b012:	ea95 0f0c 	teq	r5, ip
    b016:	d105      	bne.n	b024 <__aeabi_dmul+0x234>
    b018:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    b01c:	bf1c      	itt	ne
    b01e:	4610      	movne	r0, r2
    b020:	4619      	movne	r1, r3
    b022:	d10a      	bne.n	b03a <__aeabi_dmul+0x24a>
    b024:	ea81 0103 	eor.w	r1, r1, r3
    b028:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b02c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b030:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b034:	f04f 0000 	mov.w	r0, #0
    b038:	bd70      	pop	{r4, r5, r6, pc}
    b03a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b03e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    b042:	bd70      	pop	{r4, r5, r6, pc}

0000b044 <__aeabi_ddiv>:
    b044:	b570      	push	{r4, r5, r6, lr}
    b046:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b04a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b04e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b052:	bf1d      	ittte	ne
    b054:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b058:	ea94 0f0c 	teqne	r4, ip
    b05c:	ea95 0f0c 	teqne	r5, ip
    b060:	f000 f8a7 	bleq	b1b2 <__aeabi_ddiv+0x16e>
    b064:	eba4 0405 	sub.w	r4, r4, r5
    b068:	ea81 0e03 	eor.w	lr, r1, r3
    b06c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b070:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b074:	f000 8088 	beq.w	b188 <__aeabi_ddiv+0x144>
    b078:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b07c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    b080:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    b084:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b088:	ea4f 2202 	mov.w	r2, r2, lsl #8
    b08c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    b090:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    b094:	ea4f 2600 	mov.w	r6, r0, lsl #8
    b098:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    b09c:	429d      	cmp	r5, r3
    b09e:	bf08      	it	eq
    b0a0:	4296      	cmpeq	r6, r2
    b0a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    b0a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
    b0aa:	d202      	bcs.n	b0b2 <__aeabi_ddiv+0x6e>
    b0ac:	085b      	lsrs	r3, r3, #1
    b0ae:	ea4f 0232 	mov.w	r2, r2, rrx
    b0b2:	1ab6      	subs	r6, r6, r2
    b0b4:	eb65 0503 	sbc.w	r5, r5, r3
    b0b8:	085b      	lsrs	r3, r3, #1
    b0ba:	ea4f 0232 	mov.w	r2, r2, rrx
    b0be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b0c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    b0c6:	ebb6 0e02 	subs.w	lr, r6, r2
    b0ca:	eb75 0e03 	sbcs.w	lr, r5, r3
    b0ce:	bf22      	ittt	cs
    b0d0:	1ab6      	subcs	r6, r6, r2
    b0d2:	4675      	movcs	r5, lr
    b0d4:	ea40 000c 	orrcs.w	r0, r0, ip
    b0d8:	085b      	lsrs	r3, r3, #1
    b0da:	ea4f 0232 	mov.w	r2, r2, rrx
    b0de:	ebb6 0e02 	subs.w	lr, r6, r2
    b0e2:	eb75 0e03 	sbcs.w	lr, r5, r3
    b0e6:	bf22      	ittt	cs
    b0e8:	1ab6      	subcs	r6, r6, r2
    b0ea:	4675      	movcs	r5, lr
    b0ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    b0f0:	085b      	lsrs	r3, r3, #1
    b0f2:	ea4f 0232 	mov.w	r2, r2, rrx
    b0f6:	ebb6 0e02 	subs.w	lr, r6, r2
    b0fa:	eb75 0e03 	sbcs.w	lr, r5, r3
    b0fe:	bf22      	ittt	cs
    b100:	1ab6      	subcs	r6, r6, r2
    b102:	4675      	movcs	r5, lr
    b104:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    b108:	085b      	lsrs	r3, r3, #1
    b10a:	ea4f 0232 	mov.w	r2, r2, rrx
    b10e:	ebb6 0e02 	subs.w	lr, r6, r2
    b112:	eb75 0e03 	sbcs.w	lr, r5, r3
    b116:	bf22      	ittt	cs
    b118:	1ab6      	subcs	r6, r6, r2
    b11a:	4675      	movcs	r5, lr
    b11c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    b120:	ea55 0e06 	orrs.w	lr, r5, r6
    b124:	d018      	beq.n	b158 <__aeabi_ddiv+0x114>
    b126:	ea4f 1505 	mov.w	r5, r5, lsl #4
    b12a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    b12e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    b132:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    b136:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    b13a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    b13e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    b142:	d1c0      	bne.n	b0c6 <__aeabi_ddiv+0x82>
    b144:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b148:	d10b      	bne.n	b162 <__aeabi_ddiv+0x11e>
    b14a:	ea41 0100 	orr.w	r1, r1, r0
    b14e:	f04f 0000 	mov.w	r0, #0
    b152:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    b156:	e7b6      	b.n	b0c6 <__aeabi_ddiv+0x82>
    b158:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b15c:	bf04      	itt	eq
    b15e:	4301      	orreq	r1, r0
    b160:	2000      	moveq	r0, #0
    b162:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b166:	bf88      	it	hi
    b168:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b16c:	f63f aeaf 	bhi.w	aece <__aeabi_dmul+0xde>
    b170:	ebb5 0c03 	subs.w	ip, r5, r3
    b174:	bf04      	itt	eq
    b176:	ebb6 0c02 	subseq.w	ip, r6, r2
    b17a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b17e:	f150 0000 	adcs.w	r0, r0, #0
    b182:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b186:	bd70      	pop	{r4, r5, r6, pc}
    b188:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    b18c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    b190:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    b194:	bfc2      	ittt	gt
    b196:	ebd4 050c 	rsbsgt	r5, r4, ip
    b19a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b19e:	bd70      	popgt	{r4, r5, r6, pc}
    b1a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b1a4:	f04f 0e00 	mov.w	lr, #0
    b1a8:	3c01      	subs	r4, #1
    b1aa:	e690      	b.n	aece <__aeabi_dmul+0xde>
    b1ac:	ea45 0e06 	orr.w	lr, r5, r6
    b1b0:	e68d      	b.n	aece <__aeabi_dmul+0xde>
    b1b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b1b6:	ea94 0f0c 	teq	r4, ip
    b1ba:	bf08      	it	eq
    b1bc:	ea95 0f0c 	teqeq	r5, ip
    b1c0:	f43f af3b 	beq.w	b03a <__aeabi_dmul+0x24a>
    b1c4:	ea94 0f0c 	teq	r4, ip
    b1c8:	d10a      	bne.n	b1e0 <__aeabi_ddiv+0x19c>
    b1ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b1ce:	f47f af34 	bne.w	b03a <__aeabi_dmul+0x24a>
    b1d2:	ea95 0f0c 	teq	r5, ip
    b1d6:	f47f af25 	bne.w	b024 <__aeabi_dmul+0x234>
    b1da:	4610      	mov	r0, r2
    b1dc:	4619      	mov	r1, r3
    b1de:	e72c      	b.n	b03a <__aeabi_dmul+0x24a>
    b1e0:	ea95 0f0c 	teq	r5, ip
    b1e4:	d106      	bne.n	b1f4 <__aeabi_ddiv+0x1b0>
    b1e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b1ea:	f43f aefd 	beq.w	afe8 <__aeabi_dmul+0x1f8>
    b1ee:	4610      	mov	r0, r2
    b1f0:	4619      	mov	r1, r3
    b1f2:	e722      	b.n	b03a <__aeabi_dmul+0x24a>
    b1f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b1f8:	bf18      	it	ne
    b1fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b1fe:	f47f aec5 	bne.w	af8c <__aeabi_dmul+0x19c>
    b202:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    b206:	f47f af0d 	bne.w	b024 <__aeabi_dmul+0x234>
    b20a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    b20e:	f47f aeeb 	bne.w	afe8 <__aeabi_dmul+0x1f8>
    b212:	e712      	b.n	b03a <__aeabi_dmul+0x24a>

0000b214 <__gedf2>:
    b214:	f04f 3cff 	mov.w	ip, #4294967295
    b218:	e006      	b.n	b228 <__cmpdf2+0x4>
    b21a:	bf00      	nop

0000b21c <__ledf2>:
    b21c:	f04f 0c01 	mov.w	ip, #1
    b220:	e002      	b.n	b228 <__cmpdf2+0x4>
    b222:	bf00      	nop

0000b224 <__cmpdf2>:
    b224:	f04f 0c01 	mov.w	ip, #1
    b228:	f84d cd04 	str.w	ip, [sp, #-4]!
    b22c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    b230:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    b234:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    b238:	bf18      	it	ne
    b23a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    b23e:	d01b      	beq.n	b278 <__cmpdf2+0x54>
    b240:	b001      	add	sp, #4
    b242:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    b246:	bf0c      	ite	eq
    b248:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    b24c:	ea91 0f03 	teqne	r1, r3
    b250:	bf02      	ittt	eq
    b252:	ea90 0f02 	teqeq	r0, r2
    b256:	2000      	moveq	r0, #0
    b258:	4770      	bxeq	lr
    b25a:	f110 0f00 	cmn.w	r0, #0
    b25e:	ea91 0f03 	teq	r1, r3
    b262:	bf58      	it	pl
    b264:	4299      	cmppl	r1, r3
    b266:	bf08      	it	eq
    b268:	4290      	cmpeq	r0, r2
    b26a:	bf2c      	ite	cs
    b26c:	17d8      	asrcs	r0, r3, #31
    b26e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    b272:	f040 0001 	orr.w	r0, r0, #1
    b276:	4770      	bx	lr
    b278:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    b27c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    b280:	d102      	bne.n	b288 <__cmpdf2+0x64>
    b282:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    b286:	d107      	bne.n	b298 <__cmpdf2+0x74>
    b288:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    b28c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    b290:	d1d6      	bne.n	b240 <__cmpdf2+0x1c>
    b292:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    b296:	d0d3      	beq.n	b240 <__cmpdf2+0x1c>
    b298:	f85d 0b04 	ldr.w	r0, [sp], #4
    b29c:	4770      	bx	lr
    b29e:	bf00      	nop

0000b2a0 <__aeabi_cdrcmple>:
    b2a0:	4684      	mov	ip, r0
    b2a2:	4610      	mov	r0, r2
    b2a4:	4662      	mov	r2, ip
    b2a6:	468c      	mov	ip, r1
    b2a8:	4619      	mov	r1, r3
    b2aa:	4663      	mov	r3, ip
    b2ac:	e000      	b.n	b2b0 <__aeabi_cdcmpeq>
    b2ae:	bf00      	nop

0000b2b0 <__aeabi_cdcmpeq>:
    b2b0:	b501      	push	{r0, lr}
    b2b2:	f7ff ffb7 	bl	b224 <__cmpdf2>
    b2b6:	2800      	cmp	r0, #0
    b2b8:	bf48      	it	mi
    b2ba:	f110 0f00 	cmnmi.w	r0, #0
    b2be:	bd01      	pop	{r0, pc}

0000b2c0 <__aeabi_dcmpeq>:
    b2c0:	f84d ed08 	str.w	lr, [sp, #-8]!
    b2c4:	f7ff fff4 	bl	b2b0 <__aeabi_cdcmpeq>
    b2c8:	bf0c      	ite	eq
    b2ca:	2001      	moveq	r0, #1
    b2cc:	2000      	movne	r0, #0
    b2ce:	f85d fb08 	ldr.w	pc, [sp], #8
    b2d2:	bf00      	nop

0000b2d4 <__aeabi_dcmplt>:
    b2d4:	f84d ed08 	str.w	lr, [sp, #-8]!
    b2d8:	f7ff ffea 	bl	b2b0 <__aeabi_cdcmpeq>
    b2dc:	bf34      	ite	cc
    b2de:	2001      	movcc	r0, #1
    b2e0:	2000      	movcs	r0, #0
    b2e2:	f85d fb08 	ldr.w	pc, [sp], #8
    b2e6:	bf00      	nop

0000b2e8 <__aeabi_dcmple>:
    b2e8:	f84d ed08 	str.w	lr, [sp, #-8]!
    b2ec:	f7ff ffe0 	bl	b2b0 <__aeabi_cdcmpeq>
    b2f0:	bf94      	ite	ls
    b2f2:	2001      	movls	r0, #1
    b2f4:	2000      	movhi	r0, #0
    b2f6:	f85d fb08 	ldr.w	pc, [sp], #8
    b2fa:	bf00      	nop

0000b2fc <__aeabi_dcmpge>:
    b2fc:	f84d ed08 	str.w	lr, [sp, #-8]!
    b300:	f7ff ffce 	bl	b2a0 <__aeabi_cdrcmple>
    b304:	bf94      	ite	ls
    b306:	2001      	movls	r0, #1
    b308:	2000      	movhi	r0, #0
    b30a:	f85d fb08 	ldr.w	pc, [sp], #8
    b30e:	bf00      	nop

0000b310 <__aeabi_dcmpgt>:
    b310:	f84d ed08 	str.w	lr, [sp, #-8]!
    b314:	f7ff ffc4 	bl	b2a0 <__aeabi_cdrcmple>
    b318:	bf34      	ite	cc
    b31a:	2001      	movcc	r0, #1
    b31c:	2000      	movcs	r0, #0
    b31e:	f85d fb08 	ldr.w	pc, [sp], #8
    b322:	bf00      	nop

0000b324 <__aeabi_d2iz>:
    b324:	ea4f 0241 	mov.w	r2, r1, lsl #1
    b328:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    b32c:	d215      	bcs.n	b35a <__aeabi_d2iz+0x36>
    b32e:	d511      	bpl.n	b354 <__aeabi_d2iz+0x30>
    b330:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    b334:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    b338:	d912      	bls.n	b360 <__aeabi_d2iz+0x3c>
    b33a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    b33e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b342:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    b346:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    b34a:	fa23 f002 	lsr.w	r0, r3, r2
    b34e:	bf18      	it	ne
    b350:	4240      	negne	r0, r0
    b352:	4770      	bx	lr
    b354:	f04f 0000 	mov.w	r0, #0
    b358:	4770      	bx	lr
    b35a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    b35e:	d105      	bne.n	b36c <__aeabi_d2iz+0x48>
    b360:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    b364:	bf08      	it	eq
    b366:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    b36a:	4770      	bx	lr
    b36c:	f04f 0000 	mov.w	r0, #0
    b370:	4770      	bx	lr
    b372:	bf00      	nop

0000b374 <__aeabi_d2f>:
    b374:	ea4f 0241 	mov.w	r2, r1, lsl #1
    b378:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    b37c:	bf24      	itt	cs
    b37e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    b382:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    b386:	d90d      	bls.n	b3a4 <__aeabi_d2f+0x30>
    b388:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    b38c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    b390:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    b394:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b398:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    b39c:	bf08      	it	eq
    b39e:	f020 0001 	biceq.w	r0, r0, #1
    b3a2:	4770      	bx	lr
    b3a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    b3a8:	d121      	bne.n	b3ee <__aeabi_d2f+0x7a>
    b3aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    b3ae:	bfbc      	itt	lt
    b3b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    b3b4:	4770      	bxlt	lr
    b3b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b3ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
    b3be:	f1c2 0218 	rsb	r2, r2, #24
    b3c2:	f1c2 0c20 	rsb	ip, r2, #32
    b3c6:	fa10 f30c 	lsls.w	r3, r0, ip
    b3ca:	fa20 f002 	lsr.w	r0, r0, r2
    b3ce:	bf18      	it	ne
    b3d0:	f040 0001 	orrne.w	r0, r0, #1
    b3d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    b3d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    b3dc:	fa03 fc0c 	lsl.w	ip, r3, ip
    b3e0:	ea40 000c 	orr.w	r0, r0, ip
    b3e4:	fa23 f302 	lsr.w	r3, r3, r2
    b3e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    b3ec:	e7cc      	b.n	b388 <__aeabi_d2f+0x14>
    b3ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
    b3f2:	d107      	bne.n	b404 <__aeabi_d2f+0x90>
    b3f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    b3f8:	bf1e      	ittt	ne
    b3fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    b3fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    b402:	4770      	bxne	lr
    b404:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    b408:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    b40c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    b410:	4770      	bx	lr
    b412:	bf00      	nop

0000b414 <__aeabi_frsub>:
    b414:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    b418:	e002      	b.n	b420 <__addsf3>
    b41a:	bf00      	nop

0000b41c <__aeabi_fsub>:
    b41c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000b420 <__addsf3>:
    b420:	0042      	lsls	r2, r0, #1
    b422:	bf1f      	itttt	ne
    b424:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    b428:	ea92 0f03 	teqne	r2, r3
    b42c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    b430:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    b434:	d06a      	beq.n	b50c <__addsf3+0xec>
    b436:	ea4f 6212 	mov.w	r2, r2, lsr #24
    b43a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    b43e:	bfc1      	itttt	gt
    b440:	18d2      	addgt	r2, r2, r3
    b442:	4041      	eorgt	r1, r0
    b444:	4048      	eorgt	r0, r1
    b446:	4041      	eorgt	r1, r0
    b448:	bfb8      	it	lt
    b44a:	425b      	neglt	r3, r3
    b44c:	2b19      	cmp	r3, #25
    b44e:	bf88      	it	hi
    b450:	4770      	bxhi	lr
    b452:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    b456:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    b45a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b45e:	bf18      	it	ne
    b460:	4240      	negne	r0, r0
    b462:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    b466:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    b46a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b46e:	bf18      	it	ne
    b470:	4249      	negne	r1, r1
    b472:	ea92 0f03 	teq	r2, r3
    b476:	d03f      	beq.n	b4f8 <__addsf3+0xd8>
    b478:	f1a2 0201 	sub.w	r2, r2, #1
    b47c:	fa41 fc03 	asr.w	ip, r1, r3
    b480:	eb10 000c 	adds.w	r0, r0, ip
    b484:	f1c3 0320 	rsb	r3, r3, #32
    b488:	fa01 f103 	lsl.w	r1, r1, r3
    b48c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    b490:	d502      	bpl.n	b498 <__addsf3+0x78>
    b492:	4249      	negs	r1, r1
    b494:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    b498:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b49c:	d313      	bcc.n	b4c6 <__addsf3+0xa6>
    b49e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    b4a2:	d306      	bcc.n	b4b2 <__addsf3+0x92>
    b4a4:	0840      	lsrs	r0, r0, #1
    b4a6:	ea4f 0131 	mov.w	r1, r1, rrx
    b4aa:	f102 0201 	add.w	r2, r2, #1
    b4ae:	2afe      	cmp	r2, #254	; 0xfe
    b4b0:	d251      	bcs.n	b556 <__addsf3+0x136>
    b4b2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    b4b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    b4ba:	bf08      	it	eq
    b4bc:	f020 0001 	biceq.w	r0, r0, #1
    b4c0:	ea40 0003 	orr.w	r0, r0, r3
    b4c4:	4770      	bx	lr
    b4c6:	0049      	lsls	r1, r1, #1
    b4c8:	eb40 0000 	adc.w	r0, r0, r0
    b4cc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    b4d0:	f1a2 0201 	sub.w	r2, r2, #1
    b4d4:	d1ed      	bne.n	b4b2 <__addsf3+0x92>
    b4d6:	fab0 fc80 	clz	ip, r0
    b4da:	f1ac 0c08 	sub.w	ip, ip, #8
    b4de:	ebb2 020c 	subs.w	r2, r2, ip
    b4e2:	fa00 f00c 	lsl.w	r0, r0, ip
    b4e6:	bfaa      	itet	ge
    b4e8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    b4ec:	4252      	neglt	r2, r2
    b4ee:	4318      	orrge	r0, r3
    b4f0:	bfbc      	itt	lt
    b4f2:	40d0      	lsrlt	r0, r2
    b4f4:	4318      	orrlt	r0, r3
    b4f6:	4770      	bx	lr
    b4f8:	f092 0f00 	teq	r2, #0
    b4fc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    b500:	bf06      	itte	eq
    b502:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    b506:	3201      	addeq	r2, #1
    b508:	3b01      	subne	r3, #1
    b50a:	e7b5      	b.n	b478 <__addsf3+0x58>
    b50c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    b510:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    b514:	bf18      	it	ne
    b516:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    b51a:	d021      	beq.n	b560 <__addsf3+0x140>
    b51c:	ea92 0f03 	teq	r2, r3
    b520:	d004      	beq.n	b52c <__addsf3+0x10c>
    b522:	f092 0f00 	teq	r2, #0
    b526:	bf08      	it	eq
    b528:	4608      	moveq	r0, r1
    b52a:	4770      	bx	lr
    b52c:	ea90 0f01 	teq	r0, r1
    b530:	bf1c      	itt	ne
    b532:	2000      	movne	r0, #0
    b534:	4770      	bxne	lr
    b536:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    b53a:	d104      	bne.n	b546 <__addsf3+0x126>
    b53c:	0040      	lsls	r0, r0, #1
    b53e:	bf28      	it	cs
    b540:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    b544:	4770      	bx	lr
    b546:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    b54a:	bf3c      	itt	cc
    b54c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    b550:	4770      	bxcc	lr
    b552:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    b556:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    b55a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    b55e:	4770      	bx	lr
    b560:	ea7f 6222 	mvns.w	r2, r2, asr #24
    b564:	bf16      	itet	ne
    b566:	4608      	movne	r0, r1
    b568:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    b56c:	4601      	movne	r1, r0
    b56e:	0242      	lsls	r2, r0, #9
    b570:	bf06      	itte	eq
    b572:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    b576:	ea90 0f01 	teqeq	r0, r1
    b57a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    b57e:	4770      	bx	lr

0000b580 <__aeabi_ui2f>:
    b580:	f04f 0300 	mov.w	r3, #0
    b584:	e004      	b.n	b590 <__aeabi_i2f+0x8>
    b586:	bf00      	nop

0000b588 <__aeabi_i2f>:
    b588:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    b58c:	bf48      	it	mi
    b58e:	4240      	negmi	r0, r0
    b590:	ea5f 0c00 	movs.w	ip, r0
    b594:	bf08      	it	eq
    b596:	4770      	bxeq	lr
    b598:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    b59c:	4601      	mov	r1, r0
    b59e:	f04f 0000 	mov.w	r0, #0
    b5a2:	e01c      	b.n	b5de <__aeabi_l2f+0x2a>

0000b5a4 <__aeabi_ul2f>:
    b5a4:	ea50 0201 	orrs.w	r2, r0, r1
    b5a8:	bf08      	it	eq
    b5aa:	4770      	bxeq	lr
    b5ac:	f04f 0300 	mov.w	r3, #0
    b5b0:	e00a      	b.n	b5c8 <__aeabi_l2f+0x14>
    b5b2:	bf00      	nop

0000b5b4 <__aeabi_l2f>:
    b5b4:	ea50 0201 	orrs.w	r2, r0, r1
    b5b8:	bf08      	it	eq
    b5ba:	4770      	bxeq	lr
    b5bc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    b5c0:	d502      	bpl.n	b5c8 <__aeabi_l2f+0x14>
    b5c2:	4240      	negs	r0, r0
    b5c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b5c8:	ea5f 0c01 	movs.w	ip, r1
    b5cc:	bf02      	ittt	eq
    b5ce:	4684      	moveq	ip, r0
    b5d0:	4601      	moveq	r1, r0
    b5d2:	2000      	moveq	r0, #0
    b5d4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    b5d8:	bf08      	it	eq
    b5da:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    b5de:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    b5e2:	fabc f28c 	clz	r2, ip
    b5e6:	3a08      	subs	r2, #8
    b5e8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    b5ec:	db10      	blt.n	b610 <__aeabi_l2f+0x5c>
    b5ee:	fa01 fc02 	lsl.w	ip, r1, r2
    b5f2:	4463      	add	r3, ip
    b5f4:	fa00 fc02 	lsl.w	ip, r0, r2
    b5f8:	f1c2 0220 	rsb	r2, r2, #32
    b5fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    b600:	fa20 f202 	lsr.w	r2, r0, r2
    b604:	eb43 0002 	adc.w	r0, r3, r2
    b608:	bf08      	it	eq
    b60a:	f020 0001 	biceq.w	r0, r0, #1
    b60e:	4770      	bx	lr
    b610:	f102 0220 	add.w	r2, r2, #32
    b614:	fa01 fc02 	lsl.w	ip, r1, r2
    b618:	f1c2 0220 	rsb	r2, r2, #32
    b61c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    b620:	fa21 f202 	lsr.w	r2, r1, r2
    b624:	eb43 0002 	adc.w	r0, r3, r2
    b628:	bf08      	it	eq
    b62a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    b62e:	4770      	bx	lr

0000b630 <__aeabi_fmul>:
    b630:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b634:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    b638:	bf1e      	ittt	ne
    b63a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    b63e:	ea92 0f0c 	teqne	r2, ip
    b642:	ea93 0f0c 	teqne	r3, ip
    b646:	d06f      	beq.n	b728 <__aeabi_fmul+0xf8>
    b648:	441a      	add	r2, r3
    b64a:	ea80 0c01 	eor.w	ip, r0, r1
    b64e:	0240      	lsls	r0, r0, #9
    b650:	bf18      	it	ne
    b652:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    b656:	d01e      	beq.n	b696 <__aeabi_fmul+0x66>
    b658:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    b65c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    b660:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    b664:	fba0 3101 	umull	r3, r1, r0, r1
    b668:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    b66c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    b670:	bf3e      	ittt	cc
    b672:	0049      	lslcc	r1, r1, #1
    b674:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    b678:	005b      	lslcc	r3, r3, #1
    b67a:	ea40 0001 	orr.w	r0, r0, r1
    b67e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    b682:	2afd      	cmp	r2, #253	; 0xfd
    b684:	d81d      	bhi.n	b6c2 <__aeabi_fmul+0x92>
    b686:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b68a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    b68e:	bf08      	it	eq
    b690:	f020 0001 	biceq.w	r0, r0, #1
    b694:	4770      	bx	lr
    b696:	f090 0f00 	teq	r0, #0
    b69a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    b69e:	bf08      	it	eq
    b6a0:	0249      	lsleq	r1, r1, #9
    b6a2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    b6a6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    b6aa:	3a7f      	subs	r2, #127	; 0x7f
    b6ac:	bfc2      	ittt	gt
    b6ae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    b6b2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    b6b6:	4770      	bxgt	lr
    b6b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    b6bc:	f04f 0300 	mov.w	r3, #0
    b6c0:	3a01      	subs	r2, #1
    b6c2:	dc5d      	bgt.n	b780 <__aeabi_fmul+0x150>
    b6c4:	f112 0f19 	cmn.w	r2, #25
    b6c8:	bfdc      	itt	le
    b6ca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    b6ce:	4770      	bxle	lr
    b6d0:	f1c2 0200 	rsb	r2, r2, #0
    b6d4:	0041      	lsls	r1, r0, #1
    b6d6:	fa21 f102 	lsr.w	r1, r1, r2
    b6da:	f1c2 0220 	rsb	r2, r2, #32
    b6de:	fa00 fc02 	lsl.w	ip, r0, r2
    b6e2:	ea5f 0031 	movs.w	r0, r1, rrx
    b6e6:	f140 0000 	adc.w	r0, r0, #0
    b6ea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    b6ee:	bf08      	it	eq
    b6f0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    b6f4:	4770      	bx	lr
    b6f6:	f092 0f00 	teq	r2, #0
    b6fa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    b6fe:	bf02      	ittt	eq
    b700:	0040      	lsleq	r0, r0, #1
    b702:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    b706:	3a01      	subeq	r2, #1
    b708:	d0f9      	beq.n	b6fe <__aeabi_fmul+0xce>
    b70a:	ea40 000c 	orr.w	r0, r0, ip
    b70e:	f093 0f00 	teq	r3, #0
    b712:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    b716:	bf02      	ittt	eq
    b718:	0049      	lsleq	r1, r1, #1
    b71a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    b71e:	3b01      	subeq	r3, #1
    b720:	d0f9      	beq.n	b716 <__aeabi_fmul+0xe6>
    b722:	ea41 010c 	orr.w	r1, r1, ip
    b726:	e78f      	b.n	b648 <__aeabi_fmul+0x18>
    b728:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    b72c:	ea92 0f0c 	teq	r2, ip
    b730:	bf18      	it	ne
    b732:	ea93 0f0c 	teqne	r3, ip
    b736:	d00a      	beq.n	b74e <__aeabi_fmul+0x11e>
    b738:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    b73c:	bf18      	it	ne
    b73e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    b742:	d1d8      	bne.n	b6f6 <__aeabi_fmul+0xc6>
    b744:	ea80 0001 	eor.w	r0, r0, r1
    b748:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    b74c:	4770      	bx	lr
    b74e:	f090 0f00 	teq	r0, #0
    b752:	bf17      	itett	ne
    b754:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    b758:	4608      	moveq	r0, r1
    b75a:	f091 0f00 	teqne	r1, #0
    b75e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    b762:	d014      	beq.n	b78e <__aeabi_fmul+0x15e>
    b764:	ea92 0f0c 	teq	r2, ip
    b768:	d101      	bne.n	b76e <__aeabi_fmul+0x13e>
    b76a:	0242      	lsls	r2, r0, #9
    b76c:	d10f      	bne.n	b78e <__aeabi_fmul+0x15e>
    b76e:	ea93 0f0c 	teq	r3, ip
    b772:	d103      	bne.n	b77c <__aeabi_fmul+0x14c>
    b774:	024b      	lsls	r3, r1, #9
    b776:	bf18      	it	ne
    b778:	4608      	movne	r0, r1
    b77a:	d108      	bne.n	b78e <__aeabi_fmul+0x15e>
    b77c:	ea80 0001 	eor.w	r0, r0, r1
    b780:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    b784:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    b788:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    b78c:	4770      	bx	lr
    b78e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    b792:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    b796:	4770      	bx	lr

0000b798 <__aeabi_fdiv>:
    b798:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b79c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    b7a0:	bf1e      	ittt	ne
    b7a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    b7a6:	ea92 0f0c 	teqne	r2, ip
    b7aa:	ea93 0f0c 	teqne	r3, ip
    b7ae:	d069      	beq.n	b884 <__aeabi_fdiv+0xec>
    b7b0:	eba2 0203 	sub.w	r2, r2, r3
    b7b4:	ea80 0c01 	eor.w	ip, r0, r1
    b7b8:	0249      	lsls	r1, r1, #9
    b7ba:	ea4f 2040 	mov.w	r0, r0, lsl #9
    b7be:	d037      	beq.n	b830 <__aeabi_fdiv+0x98>
    b7c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b7c4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    b7c8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    b7cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    b7d0:	428b      	cmp	r3, r1
    b7d2:	bf38      	it	cc
    b7d4:	005b      	lslcc	r3, r3, #1
    b7d6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    b7da:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    b7de:	428b      	cmp	r3, r1
    b7e0:	bf24      	itt	cs
    b7e2:	1a5b      	subcs	r3, r3, r1
    b7e4:	ea40 000c 	orrcs.w	r0, r0, ip
    b7e8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    b7ec:	bf24      	itt	cs
    b7ee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    b7f2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    b7f6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    b7fa:	bf24      	itt	cs
    b7fc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    b800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    b804:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    b808:	bf24      	itt	cs
    b80a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    b80e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    b812:	011b      	lsls	r3, r3, #4
    b814:	bf18      	it	ne
    b816:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    b81a:	d1e0      	bne.n	b7de <__aeabi_fdiv+0x46>
    b81c:	2afd      	cmp	r2, #253	; 0xfd
    b81e:	f63f af50 	bhi.w	b6c2 <__aeabi_fmul+0x92>
    b822:	428b      	cmp	r3, r1
    b824:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    b828:	bf08      	it	eq
    b82a:	f020 0001 	biceq.w	r0, r0, #1
    b82e:	4770      	bx	lr
    b830:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    b834:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    b838:	327f      	adds	r2, #127	; 0x7f
    b83a:	bfc2      	ittt	gt
    b83c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    b840:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    b844:	4770      	bxgt	lr
    b846:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    b84a:	f04f 0300 	mov.w	r3, #0
    b84e:	3a01      	subs	r2, #1
    b850:	e737      	b.n	b6c2 <__aeabi_fmul+0x92>
    b852:	f092 0f00 	teq	r2, #0
    b856:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    b85a:	bf02      	ittt	eq
    b85c:	0040      	lsleq	r0, r0, #1
    b85e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    b862:	3a01      	subeq	r2, #1
    b864:	d0f9      	beq.n	b85a <__aeabi_fdiv+0xc2>
    b866:	ea40 000c 	orr.w	r0, r0, ip
    b86a:	f093 0f00 	teq	r3, #0
    b86e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    b872:	bf02      	ittt	eq
    b874:	0049      	lsleq	r1, r1, #1
    b876:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    b87a:	3b01      	subeq	r3, #1
    b87c:	d0f9      	beq.n	b872 <__aeabi_fdiv+0xda>
    b87e:	ea41 010c 	orr.w	r1, r1, ip
    b882:	e795      	b.n	b7b0 <__aeabi_fdiv+0x18>
    b884:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    b888:	ea92 0f0c 	teq	r2, ip
    b88c:	d108      	bne.n	b8a0 <__aeabi_fdiv+0x108>
    b88e:	0242      	lsls	r2, r0, #9
    b890:	f47f af7d 	bne.w	b78e <__aeabi_fmul+0x15e>
    b894:	ea93 0f0c 	teq	r3, ip
    b898:	f47f af70 	bne.w	b77c <__aeabi_fmul+0x14c>
    b89c:	4608      	mov	r0, r1
    b89e:	e776      	b.n	b78e <__aeabi_fmul+0x15e>
    b8a0:	ea93 0f0c 	teq	r3, ip
    b8a4:	d104      	bne.n	b8b0 <__aeabi_fdiv+0x118>
    b8a6:	024b      	lsls	r3, r1, #9
    b8a8:	f43f af4c 	beq.w	b744 <__aeabi_fmul+0x114>
    b8ac:	4608      	mov	r0, r1
    b8ae:	e76e      	b.n	b78e <__aeabi_fmul+0x15e>
    b8b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    b8b4:	bf18      	it	ne
    b8b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    b8ba:	d1ca      	bne.n	b852 <__aeabi_fdiv+0xba>
    b8bc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    b8c0:	f47f af5c 	bne.w	b77c <__aeabi_fmul+0x14c>
    b8c4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    b8c8:	f47f af3c 	bne.w	b744 <__aeabi_fmul+0x114>
    b8cc:	e75f      	b.n	b78e <__aeabi_fmul+0x15e>
    b8ce:	bf00      	nop

0000b8d0 <_exit>:
    b8d0:	e7fe      	b.n	b8d0 <_exit>

Disassembly of section .fini:

0000b8d4 <_fini>:
    b8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8d6:	bf00      	nop
    b8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b8da:	bc08      	pop	{r3}
    b8dc:	469e      	mov	lr, r3
    b8de:	4770      	bx	lr
